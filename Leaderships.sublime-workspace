{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"wear",
				"wear_location"
			],
			[
				"onCo",
				"onConnectionEstablished(  )\tVoid"
			],
			[
				"onCon",
				"onConnectionClose(...)\tVoid"
			],
			[
				"onC",
				"onConnectionClose(...)\tVoid"
			],
			[
				"onConne",
				"onConnectionError(...)\tVoid"
			],
			[
				"Sync",
				"SyncData\tclass"
			],
			[
				"data",
				"bulletData\tSyncData"
			],
			[
				"crewm",
				"crewmember\tCrew"
			],
			[
				"crew",
				"crewmember\tvar"
			],
			[
				"targ",
				"target__png\tString"
			],
			[
				"int",
				"interior\tflixel.group.FlxGroup"
			],
			[
				"cos",
				"cosmonaut__png\tString"
			],
			[
				"FlxStar",
				"FlxStarField2D\tclass"
			],
			[
				"FlxSprite",
				"FlxSpriteUtil\tclass"
			],
			[
				"player",
				"player_bullets"
			],
			[
				"switch",
				"switch__png\tString"
			],
			[
				"keys",
				"keys_collected"
			],
			[
				"t",
				"type"
			],
			[
				"prop",
				"properties\tflixel.addons.editors.tiled.TiledPropertySet"
			],
			[
				"el",
				"elapsed"
			],
			[
				"exit",
				"exit_fail__wav\tString"
			],
			[
				"ju",
				"jump__wav\tString"
			],
			[
				"key",
				"keys_icon"
			],
			[
				"k",
				"key__png\tString"
			],
			[
				"TO",
				"TO_RAD\tFloat"
			],
			[
				"Ra",
				"RatioScaleMode\tclass"
			]
		]
	},
	"buffers":
	[
		{
			"file": "source/Objects.hx",
			"settings":
			{
				"buffer_size": 1049,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/PlayState.hx",
			"settings":
			{
				"buffer_size": 12041,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Project.xml",
			"settings":
			{
				"buffer_size": 3154,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 2696 files for \"debug\"\n\n/home/e1sif/Haxe/Leaderships/Project.xml:\n   76  \t-->\n   77  \n   78: \t<!--Disable the Flixel core debugger. Automatically gets set whenever you compile in release mode!-->\n   79: \t<haxedef name=\"FLX_NO_DEBUG\" unless=\"debug\" />\n   80  \n   81  \t<!--Enable this for Nape release builds for a serious peformance improvement-->\n   82: \t<haxedef name=\"NAPE_RELEASE_BUILD\" unless=\"debug\" />\n   83  \n   84  \t<!-- _________________________________ Custom _______________________________ -->\n\n/home/e1sif/Haxe/Leaderships/export/flash/haxe/debug.hxml:\n   34  -swf export/flash/bin/Leaderships.swf\n   35  -cp export/flash/haxe\n   36: -debug\n\n/home/e1sif/Haxe/Leaderships/export/html5/bin/Leaderships.js:\n 4932  \t\t_this3.label = \"exists\";\n 4933  \t\t_this3.value = value3;\n 4934: \t\treturn flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3]);\n 4935  \t}\n 4936  \t,set_visible: function(Value) {\n ....\n 6422  \t\t_this3.label = \"h\";\n 6423  \t\t_this3.value = value3;\n 6424: \t\treturn flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3]);\n 6425  \t}\n 6426  \t,get_left: function() {\n ....\n 7162  \t\t_this5.label = \"velocity\";\n 7163  \t\t_this5.value = value5;\n 7164: \t\treturn flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3,_this4,_this5]);\n 7165  \t}\n 7166  \t,set_x: function(NewX) {\n ....\n 7503  \t\t\t_this4.label = \"h\";\n 7504  \t\t\t_this4.value = value3;\n 7505: \t\t\tkey += \":\" + flixel_util_FlxStringUtil.getDebugString([_this1,_this2,_this3,_this4]);\n 7506  \t\t}\n 7507  \t\tvar graphic = flixel_FlxG.bitmap._cache.get(key);\n ....\n 8263  \t\tvar _gthis = this;\n 8264  \t\tflixel_FlxState.prototype.create.call(this);\n 8265: \t\tflixel_FlxG[\"debugger\"].set_drawDebug(true);\n 8266  \t\tvar _this = flixel_FlxG.worldBounds;\n 8267  \t\t_this.x = -16;\n ....\n 9555  \t\t_this1.label = \"y\";\n 9556  \t\t_this1.value = value1;\n 9557: \t\treturn flixel_util_FlxStringUtil.getDebugString([_this,_this1]);\n 9558  \t}\n 9559  \t,set_x: function(Value) {\n ....\n 11936  \t,__class__: flixel_system_frontEnds_ConsoleFrontEnd\n 11937  };\n 11938: var flixel_system_frontEnds_DebuggerFrontEnd = function() {\n 11939  \tthis.visible = false;\n 11940  \tthis.visibilityChanged = new flixel_util__$FlxSignal_FlxSignal0();\n 11941: \tthis.drawDebugChanged = new flixel_util__$FlxSignal_FlxSignal0();\n 11942: \tthis.drawDebug = false;\n 11943  \tthis.toggleKeys = [113,192,220];\n 11944  \tthis.precision = 3;\n 11945  };\n 11946: $hxClasses[\"flixel.system.frontEnds.DebuggerFrontEnd\"] = flixel_system_frontEnds_DebuggerFrontEnd;\n 11947: flixel_system_frontEnds_DebuggerFrontEnd.__name__ = [\"flixel\",\"system\",\"frontEnds\",\"DebuggerFrontEnd\"];\n 11948: flixel_system_frontEnds_DebuggerFrontEnd.prototype = {\n 11949  \tprecision: null\n 11950  \t,toggleKeys: null\n 11951: \t,drawDebug: null\n 11952: \t,drawDebugChanged: null\n 11953  \t,visibilityChanged: null\n 11954  \t,visible: null\n .....\n 11976  \t\t}\n 11977  \t}\n 11978: \t,set_drawDebug: function(Value) {\n 11979: \t\tif(this.drawDebug == Value) {\n 11980: \t\t\treturn this.drawDebug;\n 11981  \t\t}\n 11982: \t\tthis.drawDebug = Value;\n 11983: \t\treturn this.drawDebug;\n 11984  \t}\n 11985  \t,set_visible: function(Value) {\n .....\n 11990  \t\treturn this.visible;\n 11991  \t}\n 11992: \t,__class__: flixel_system_frontEnds_DebuggerFrontEnd\n 11993: \t,__properties__: {set_visible:\"set_visible\",set_drawDebug:\"set_drawDebug\"}\n 11994  };\n 11995  var flixel_system_frontEnds_HTML5FrontEnd = function() {\n .....\n 12251  \t\t\t}\n 12252  \t\t}\n 12253: \t\tthis.advanced(paramArray,flixel_system_debug_log_LogStyle.NORMAL);\n 12254  \t}\n 12255  \t,__class__: flixel_system_frontEnds_LogFrontEnd\n .....\n 26256  \t_this3.label = \"h\";\n 26257  \t_this3.value = value3;\n 26258: \treturn tmp + flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3]);\n 26259  };\n 26260  flixel_addons_ui_FlxUI9SliceSprite.paintCompoundBitmap = function(g,assetID,sourceRects,targetRect,tile,smooth,raw) {\n .....\n 27163  \t\t_this5.label = \"value\";\n 27164  \t\t_this5.value = value5;\n 27165: \t\treturn flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3,_this4,_this5]);\n 27166  \t}\n 27167  \t,get_percent: function() {\n .....\n 31124  \t\t_this1.label = \"y\";\n 31125  \t\t_this1.value = value1;\n 31126: \t\treturn flixel_util_FlxStringUtil.getDebugString([_this,_this1]);\n 31127  \t}\n 31128  \t,updatePositions: function() {\n .....\n 34543  \t\t_this1.label = \"label\";\n 34544  \t\t_this1.value = value1;\n 34545: \t\treturn flixel_util_FlxStringUtil.getDebugString([_this,_this1]);\n 34546  \t}\n 34547  \t,__class__: flixel_addons_ui_StrNameLabel\n .....\n 37488  \t\t_this4.label = \"h\";\n 37489  \t\t_this4.value = value3;\n 37490: \t\tkey = flixel_util_FlxStringUtil.getDebugString([_this1,_this2,_this3,_this4]);\n 37491  \t}\n 37492  \tkey = Source.parent.key + \":\" + key;\n .....\n 38896  \t\t_this1.label = \"type\";\n 38897  \t\t_this1.value = value1;\n 38898: \t\treturn flixel_util_FlxStringUtil.getDebugString([_this,_this1]);\n 38899  \t}\n 38900  \t,get_numFrames: function() {\n .....\n 40177  \t\t_this.label = \"name\";\n 40178  \t\t_this.value = value;\n 40179: \t\treturn flixel_util_FlxStringUtil.getDebugString([_this]);\n 40180  \t}\n 40181  \t,set_frame: function(value) {\n .....\n 42519  \t\t_this5.label = \"duration\";\n 42520  \t\t_this5.value = value5;\n 42521: \t\treturn flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3,_this4,_this5]);\n 42522  \t}\n 42523  \t,get_distance: function() {\n .....\n 43078  \t\t_this2.label = \"deadZone\";\n 43079  \t\t_this2.value = value2;\n 43080: \t\treturn flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2]);\n 43081  \t}\n 43082  \t,__class__: flixel_input_gamepad_FlxGamepad\n .....\n 43191  \t\t_this7.label = \"mode\";\n 43192  \t\t_this7.value = value7;\n 43193: \t\treturn flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3,_this4,_this5,_this6,_this7]);\n 43194  \t}\n 43195  \t,__class__: flixel_input_gamepad_FlxGamepadAnalogStick\n .....\n 49707  \t\t_this3.label = \"volume\";\n 49708  \t\t_this3.value = value3;\n 49709: \t\treturn flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3]);\n 49710  \t}\n 49711  \t,__class__: flixel_system_FlxSound\n .....\n 49923  \t,__class__: flixel_system_FlxSplash\n 49924  });\n 49925: var flixel_system_debug_DebuggerUtil = function() { };\n 49926: $hxClasses[\"flixel.system.debug.DebuggerUtil\"] = flixel_system_debug_DebuggerUtil;\n 49927: flixel_system_debug_DebuggerUtil.__name__ = [\"flixel\",\"system\",\"debug\",\"DebuggerUtil\"];\n 49928: flixel_system_debug_DebuggerUtil.createTextField = function(X,Y,Color,Size) {\n 49929  \tif(Size == null) {\n 49930  \t\tSize = 12;\n .....\n 49939  \t\tX = 0;\n 49940  \t}\n 49941: \treturn flixel_system_debug_DebuggerUtil.initTextField(new openfl_text_TextField(),X,Y,Color,Size);\n 49942  };\n 49943: flixel_system_debug_DebuggerUtil.initTextField = function(tf,X,Y,Color,Size) {\n 49944  \tif(Size == null) {\n 49945  \t\tSize = 12;\n .....\n 49960  \ttf.set_embedFonts(true);\n 49961  \ttf.set_selectable(false);\n 49962: \ttf.set_defaultTextFormat(new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEBUGGER,Size,Color & 16777215));\n 49963  \ttf.set_alpha((Color >> 24 & 255) / 255);\n 49964  \ttf.set_autoSize(1);\n 49965  \treturn tf;\n 49966  };\n 49967: flixel_system_debug_DebuggerUtil.fixSize = function(bitmapData) {\n 49968  \tReflect.setProperty(bitmapData,\"width\",11);\n 49969  \tReflect.setProperty(bitmapData,\"height\",11);\n 49970  \treturn bitmapData;\n 49971  };\n 49972: var flixel_system_debug__$FlxDebugger_GraphicFlixel = function(width,height,transparent,fillRGBA,onload) {\n 49973  \tif(fillRGBA == null) {\n 49974  \t\tfillRGBA = -1;\n .....\n 49978  \t}\n 49979  \topenfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);\n 49980: \tif(flixel_system_debug__$FlxDebugger_GraphicFlixel.preload != null) {\n 49981: \t\tthis.__fromImage(flixel_system_debug__$FlxDebugger_GraphicFlixel.preload);\n 49982  \t} else {\n 49983  \t\tvar _gthis = this;\n 49984: \t\tlime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug__$FlxDebugger_GraphicFlixel.resourceName),flixel_system_debug__$FlxDebugger_GraphicFlixel.resourceType).then(function(image) {\n 49985  \t\t\t_gthis.__fromImage(image);\n 49986  \t\t\treturn lime_app_Future.withValue(_gthis);\n 49987  \t\t}).onComplete(function(b) {\n 49988: \t\t\tif(flixel_system_debug__$FlxDebugger_GraphicFlixel.preload == null) {\n 49989: \t\t\t\tflixel_system_debug__$FlxDebugger_GraphicFlixel.preload = b.image;\n 49990  \t\t\t}\n 49991  \t\t\tif(onload != null) {\n .....\n 49995  \t}\n 49996  };\n 49997: $hxClasses[\"flixel.system.debug._FlxDebugger.GraphicFlixel\"] = flixel_system_debug__$FlxDebugger_GraphicFlixel;\n 49998: flixel_system_debug__$FlxDebugger_GraphicFlixel.__name__ = [\"flixel\",\"system\",\"debug\",\"_FlxDebugger\",\"GraphicFlixel\"];\n 49999: flixel_system_debug__$FlxDebugger_GraphicFlixel.preload = null;\n 50000: flixel_system_debug__$FlxDebugger_GraphicFlixel.__super__ = openfl_display_BitmapData;\n 50001: flixel_system_debug__$FlxDebugger_GraphicFlixel.prototype = $extend(openfl_display_BitmapData.prototype,{\n 50002: \t__class__: flixel_system_debug__$FlxDebugger_GraphicFlixel\n 50003  });\n 50004: var flixel_system_debug__$FlxDebugger_GraphicDrawDebug = function(width,height,transparent,fillRGBA,onload) {\n 50005  \tif(fillRGBA == null) {\n 50006  \t\tfillRGBA = -1;\n .....\n 50010  \t}\n 50011  \topenfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);\n 50012: \tif(flixel_system_debug__$FlxDebugger_GraphicDrawDebug.preload != null) {\n 50013: \t\tthis.__fromImage(flixel_system_debug__$FlxDebugger_GraphicDrawDebug.preload);\n 50014  \t} else {\n 50015  \t\tvar _gthis = this;\n 50016: \t\tlime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug__$FlxDebugger_GraphicDrawDebug.resourceName),flixel_system_debug__$FlxDebugger_GraphicDrawDebug.resourceType).then(function(image) {\n 50017  \t\t\t_gthis.__fromImage(image);\n 50018  \t\t\treturn lime_app_Future.withValue(_gthis);\n 50019  \t\t}).onComplete(function(b) {\n 50020: \t\t\tif(flixel_system_debug__$FlxDebugger_GraphicDrawDebug.preload == null) {\n 50021: \t\t\t\tflixel_system_debug__$FlxDebugger_GraphicDrawDebug.preload = b.image;\n 50022  \t\t\t}\n 50023  \t\t\tif(onload != null) {\n .....\n 50027  \t}\n 50028  };\n 50029: $hxClasses[\"flixel.system.debug._FlxDebugger.GraphicDrawDebug\"] = flixel_system_debug__$FlxDebugger_GraphicDrawDebug;\n 50030: flixel_system_debug__$FlxDebugger_GraphicDrawDebug.__name__ = [\"flixel\",\"system\",\"debug\",\"_FlxDebugger\",\"GraphicDrawDebug\"];\n 50031: flixel_system_debug__$FlxDebugger_GraphicDrawDebug.preload = null;\n 50032: flixel_system_debug__$FlxDebugger_GraphicDrawDebug.__super__ = openfl_display_BitmapData;\n 50033: flixel_system_debug__$FlxDebugger_GraphicDrawDebug.prototype = $extend(openfl_display_BitmapData.prototype,{\n 50034: \t__class__: flixel_system_debug__$FlxDebugger_GraphicDrawDebug\n 50035  });\n 50036: var flixel_system_debug_GraphicLog = function(width,height,transparent,fillRGBA,onload) {\n 50037  \tif(fillRGBA == null) {\n 50038  \t\tfillRGBA = -1;\n .....\n 50042  \t}\n 50043  \topenfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);\n 50044: \tif(flixel_system_debug_GraphicLog.preload != null) {\n 50045: \t\tthis.__fromImage(flixel_system_debug_GraphicLog.preload);\n 50046  \t} else {\n 50047  \t\tvar _gthis = this;\n 50048: \t\tlime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_GraphicLog.resourceName),flixel_system_debug_GraphicLog.resourceType).then(function(image) {\n 50049  \t\t\t_gthis.__fromImage(image);\n 50050  \t\t\treturn lime_app_Future.withValue(_gthis);\n 50051  \t\t}).onComplete(function(b) {\n 50052: \t\t\tif(flixel_system_debug_GraphicLog.preload == null) {\n 50053: \t\t\t\tflixel_system_debug_GraphicLog.preload = b.image;\n 50054  \t\t\t}\n 50055  \t\t\tif(onload != null) {\n .....\n 50059  \t}\n 50060  };\n 50061: $hxClasses[\"flixel.system.debug.GraphicLog\"] = flixel_system_debug_GraphicLog;\n 50062: flixel_system_debug_GraphicLog.__name__ = [\"flixel\",\"system\",\"debug\",\"GraphicLog\"];\n 50063: flixel_system_debug_GraphicLog.preload = null;\n 50064: flixel_system_debug_GraphicLog.__super__ = openfl_display_BitmapData;\n 50065: flixel_system_debug_GraphicLog.prototype = $extend(openfl_display_BitmapData.prototype,{\n 50066: \t__class__: flixel_system_debug_GraphicLog\n 50067  });\n 50068: var flixel_system_debug_GraphicStats = function(width,height,transparent,fillRGBA,onload) {\n 50069  \tif(fillRGBA == null) {\n 50070  \t\tfillRGBA = -1;\n .....\n 50074  \t}\n 50075  \topenfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);\n 50076: \tif(flixel_system_debug_GraphicStats.preload != null) {\n 50077: \t\tthis.__fromImage(flixel_system_debug_GraphicStats.preload);\n 50078  \t} else {\n 50079  \t\tvar _gthis = this;\n 50080: \t\tlime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_GraphicStats.resourceName),flixel_system_debug_GraphicStats.resourceType).then(function(image) {\n 50081  \t\t\t_gthis.__fromImage(image);\n 50082  \t\t\treturn lime_app_Future.withValue(_gthis);\n 50083  \t\t}).onComplete(function(b) {\n 50084: \t\t\tif(flixel_system_debug_GraphicStats.preload == null) {\n 50085: \t\t\t\tflixel_system_debug_GraphicStats.preload = b.image;\n 50086  \t\t\t}\n 50087  \t\t\tif(onload != null) {\n .....\n 50091  \t}\n 50092  };\n 50093: $hxClasses[\"flixel.system.debug.GraphicStats\"] = flixel_system_debug_GraphicStats;\n 50094: flixel_system_debug_GraphicStats.__name__ = [\"flixel\",\"system\",\"debug\",\"GraphicStats\"];\n 50095: flixel_system_debug_GraphicStats.preload = null;\n 50096: flixel_system_debug_GraphicStats.__super__ = openfl_display_BitmapData;\n 50097: flixel_system_debug_GraphicStats.prototype = $extend(openfl_display_BitmapData.prototype,{\n 50098: \t__class__: flixel_system_debug_GraphicStats\n 50099  });\n 50100: var flixel_system_debug_GraphicWatch = function(width,height,transparent,fillRGBA,onload) {\n 50101  \tif(fillRGBA == null) {\n 50102  \t\tfillRGBA = -1;\n .....\n 50106  \t}\n 50107  \topenfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);\n 50108: \tif(flixel_system_debug_GraphicWatch.preload != null) {\n 50109: \t\tthis.__fromImage(flixel_system_debug_GraphicWatch.preload);\n 50110  \t} else {\n 50111  \t\tvar _gthis = this;\n 50112: \t\tlime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_GraphicWatch.resourceName),flixel_system_debug_GraphicWatch.resourceType).then(function(image) {\n 50113  \t\t\t_gthis.__fromImage(image);\n 50114  \t\t\treturn lime_app_Future.withValue(_gthis);\n 50115  \t\t}).onComplete(function(b) {\n 50116: \t\t\tif(flixel_system_debug_GraphicWatch.preload == null) {\n 50117: \t\t\t\tflixel_system_debug_GraphicWatch.preload = b.image;\n 50118  \t\t\t}\n 50119  \t\t\tif(onload != null) {\n .....\n 50123  \t}\n 50124  };\n 50125: $hxClasses[\"flixel.system.debug.GraphicWatch\"] = flixel_system_debug_GraphicWatch;\n 50126: flixel_system_debug_GraphicWatch.__name__ = [\"flixel\",\"system\",\"debug\",\"GraphicWatch\"];\n 50127: flixel_system_debug_GraphicWatch.preload = null;\n 50128: flixel_system_debug_GraphicWatch.__super__ = openfl_display_BitmapData;\n 50129: flixel_system_debug_GraphicWatch.prototype = $extend(openfl_display_BitmapData.prototype,{\n 50130: \t__class__: flixel_system_debug_GraphicWatch\n 50131  });\n 50132: var flixel_system_debug_GraphicBitmapLog = function(width,height,transparent,fillRGBA,onload) {\n 50133  \tif(fillRGBA == null) {\n 50134  \t\tfillRGBA = -1;\n .....\n 50138  \t}\n 50139  \topenfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);\n 50140: \tif(flixel_system_debug_GraphicBitmapLog.preload != null) {\n 50141: \t\tthis.__fromImage(flixel_system_debug_GraphicBitmapLog.preload);\n 50142  \t} else {\n 50143  \t\tvar _gthis = this;\n 50144: \t\tlime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_GraphicBitmapLog.resourceName),flixel_system_debug_GraphicBitmapLog.resourceType).then(function(image) {\n 50145  \t\t\t_gthis.__fromImage(image);\n 50146  \t\t\treturn lime_app_Future.withValue(_gthis);\n 50147  \t\t}).onComplete(function(b) {\n 50148: \t\t\tif(flixel_system_debug_GraphicBitmapLog.preload == null) {\n 50149: \t\t\t\tflixel_system_debug_GraphicBitmapLog.preload = b.image;\n 50150  \t\t\t}\n 50151  \t\t\tif(onload != null) {\n .....\n 50155  \t}\n 50156  };\n 50157: $hxClasses[\"flixel.system.debug.GraphicBitmapLog\"] = flixel_system_debug_GraphicBitmapLog;\n 50158: flixel_system_debug_GraphicBitmapLog.__name__ = [\"flixel\",\"system\",\"debug\",\"GraphicBitmapLog\"];\n 50159: flixel_system_debug_GraphicBitmapLog.preload = null;\n 50160: flixel_system_debug_GraphicBitmapLog.__super__ = openfl_display_BitmapData;\n 50161: flixel_system_debug_GraphicBitmapLog.prototype = $extend(openfl_display_BitmapData.prototype,{\n 50162: \t__class__: flixel_system_debug_GraphicBitmapLog\n 50163  });\n 50164: var flixel_system_debug_GraphicConsole = function(width,height,transparent,fillRGBA,onload) {\n 50165  \tif(fillRGBA == null) {\n 50166  \t\tfillRGBA = -1;\n .....\n 50170  \t}\n 50171  \topenfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);\n 50172: \tif(flixel_system_debug_GraphicConsole.preload != null) {\n 50173: \t\tthis.__fromImage(flixel_system_debug_GraphicConsole.preload);\n 50174  \t} else {\n 50175  \t\tvar _gthis = this;\n 50176: \t\tlime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_GraphicConsole.resourceName),flixel_system_debug_GraphicConsole.resourceType).then(function(image) {\n 50177  \t\t\t_gthis.__fromImage(image);\n 50178  \t\t\treturn lime_app_Future.withValue(_gthis);\n 50179  \t\t}).onComplete(function(b) {\n 50180: \t\t\tif(flixel_system_debug_GraphicConsole.preload == null) {\n 50181: \t\t\t\tflixel_system_debug_GraphicConsole.preload = b.image;\n 50182  \t\t\t}\n 50183  \t\t\tif(onload != null) {\n .....\n 50187  \t}\n 50188  };\n 50189: $hxClasses[\"flixel.system.debug.GraphicConsole\"] = flixel_system_debug_GraphicConsole;\n 50190: flixel_system_debug_GraphicConsole.__name__ = [\"flixel\",\"system\",\"debug\",\"GraphicConsole\"];\n 50191: flixel_system_debug_GraphicConsole.preload = null;\n 50192: flixel_system_debug_GraphicConsole.__super__ = openfl_display_BitmapData;\n 50193: flixel_system_debug_GraphicConsole.prototype = $extend(openfl_display_BitmapData.prototype,{\n 50194: \t__class__: flixel_system_debug_GraphicConsole\n 50195  });\n 50196: var flixel_system_debug_GraphicArrowLeft = function(width,height,transparent,fillRGBA,onload) {\n 50197  \tif(fillRGBA == null) {\n 50198  \t\tfillRGBA = -1;\n .....\n 50202  \t}\n 50203  \topenfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);\n 50204: \tif(flixel_system_debug_GraphicArrowLeft.preload != null) {\n 50205: \t\tthis.__fromImage(flixel_system_debug_GraphicArrowLeft.preload);\n 50206  \t} else {\n 50207  \t\tvar _gthis = this;\n 50208: \t\tlime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_GraphicArrowLeft.resourceName),flixel_system_debug_GraphicArrowLeft.resourceType).then(function(image) {\n 50209  \t\t\t_gthis.__fromImage(image);\n 50210  \t\t\treturn lime_app_Future.withValue(_gthis);\n 50211  \t\t}).onComplete(function(b) {\n 50212: \t\t\tif(flixel_system_debug_GraphicArrowLeft.preload == null) {\n 50213: \t\t\t\tflixel_system_debug_GraphicArrowLeft.preload = b.image;\n 50214  \t\t\t}\n 50215  \t\t\tif(onload != null) {\n .....\n 50219  \t}\n 50220  };\n 50221: $hxClasses[\"flixel.system.debug.GraphicArrowLeft\"] = flixel_system_debug_GraphicArrowLeft;\n 50222: flixel_system_debug_GraphicArrowLeft.__name__ = [\"flixel\",\"system\",\"debug\",\"GraphicArrowLeft\"];\n 50223: flixel_system_debug_GraphicArrowLeft.preload = null;\n 50224: flixel_system_debug_GraphicArrowLeft.__super__ = openfl_display_BitmapData;\n 50225: flixel_system_debug_GraphicArrowLeft.prototype = $extend(openfl_display_BitmapData.prototype,{\n 50226: \t__class__: flixel_system_debug_GraphicArrowLeft\n 50227  });\n 50228: var flixel_system_debug_GraphicArrowRight = function(width,height,transparent,fillRGBA,onload) {\n 50229  \tif(fillRGBA == null) {\n 50230  \t\tfillRGBA = -1;\n .....\n 50234  \t}\n 50235  \topenfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);\n 50236: \tif(flixel_system_debug_GraphicArrowRight.preload != null) {\n 50237: \t\tthis.__fromImage(flixel_system_debug_GraphicArrowRight.preload);\n 50238  \t} else {\n 50239  \t\tvar _gthis = this;\n 50240: \t\tlime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_GraphicArrowRight.resourceName),flixel_system_debug_GraphicArrowRight.resourceType).then(function(image) {\n 50241  \t\t\t_gthis.__fromImage(image);\n 50242  \t\t\treturn lime_app_Future.withValue(_gthis);\n 50243  \t\t}).onComplete(function(b) {\n 50244: \t\t\tif(flixel_system_debug_GraphicArrowRight.preload == null) {\n 50245: \t\t\t\tflixel_system_debug_GraphicArrowRight.preload = b.image;\n 50246  \t\t\t}\n 50247  \t\t\tif(onload != null) {\n .....\n 50251  \t}\n 50252  };\n 50253: $hxClasses[\"flixel.system.debug.GraphicArrowRight\"] = flixel_system_debug_GraphicArrowRight;\n 50254: flixel_system_debug_GraphicArrowRight.__name__ = [\"flixel\",\"system\",\"debug\",\"GraphicArrowRight\"];\n 50255: flixel_system_debug_GraphicArrowRight.preload = null;\n 50256: flixel_system_debug_GraphicArrowRight.__super__ = openfl_display_BitmapData;\n 50257: flixel_system_debug_GraphicArrowRight.prototype = $extend(openfl_display_BitmapData.prototype,{\n 50258: \t__class__: flixel_system_debug_GraphicArrowRight\n 50259  });\n 50260: var flixel_system_debug_GraphicCloseButton = function(width,height,transparent,fillRGBA,onload) {\n 50261  \tif(fillRGBA == null) {\n 50262  \t\tfillRGBA = -1;\n .....\n 50266  \t}\n 50267  \topenfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);\n 50268: \tif(flixel_system_debug_GraphicCloseButton.preload != null) {\n 50269: \t\tthis.__fromImage(flixel_system_debug_GraphicCloseButton.preload);\n 50270  \t} else {\n 50271  \t\tvar _gthis = this;\n 50272: \t\tlime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_GraphicCloseButton.resourceName),flixel_system_debug_GraphicCloseButton.resourceType).then(function(image) {\n 50273  \t\t\t_gthis.__fromImage(image);\n 50274  \t\t\treturn lime_app_Future.withValue(_gthis);\n 50275  \t\t}).onComplete(function(b) {\n 50276: \t\t\tif(flixel_system_debug_GraphicCloseButton.preload == null) {\n 50277: \t\t\t\tflixel_system_debug_GraphicCloseButton.preload = b.image;\n 50278  \t\t\t}\n 50279  \t\t\tif(onload != null) {\n .....\n 50283  \t}\n 50284  };\n 50285: $hxClasses[\"flixel.system.debug.GraphicCloseButton\"] = flixel_system_debug_GraphicCloseButton;\n 50286: flixel_system_debug_GraphicCloseButton.__name__ = [\"flixel\",\"system\",\"debug\",\"GraphicCloseButton\"];\n 50287: flixel_system_debug_GraphicCloseButton.preload = null;\n 50288: flixel_system_debug_GraphicCloseButton.__super__ = openfl_display_BitmapData;\n 50289: flixel_system_debug_GraphicCloseButton.prototype = $extend(openfl_display_BitmapData.prototype,{\n 50290: \t__class__: flixel_system_debug_GraphicCloseButton\n 50291  });\n 50292: var flixel_system_debug_GraphicInteractive = function(width,height,transparent,fillRGBA,onload) {\n 50293  \tif(fillRGBA == null) {\n 50294  \t\tfillRGBA = -1;\n .....\n 50298  \t}\n 50299  \topenfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);\n 50300: \tif(flixel_system_debug_GraphicInteractive.preload != null) {\n 50301: \t\tthis.__fromImage(flixel_system_debug_GraphicInteractive.preload);\n 50302  \t} else {\n 50303  \t\tvar _gthis = this;\n 50304: \t\tlime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_GraphicInteractive.resourceName),flixel_system_debug_GraphicInteractive.resourceType).then(function(image) {\n 50305  \t\t\t_gthis.__fromImage(image);\n 50306  \t\t\treturn lime_app_Future.withValue(_gthis);\n 50307  \t\t}).onComplete(function(b) {\n 50308: \t\t\tif(flixel_system_debug_GraphicInteractive.preload == null) {\n 50309: \t\t\t\tflixel_system_debug_GraphicInteractive.preload = b.image;\n 50310  \t\t\t}\n 50311  \t\t\tif(onload != null) {\n .....\n 50315  \t}\n 50316  };\n 50317: $hxClasses[\"flixel.system.debug.GraphicInteractive\"] = flixel_system_debug_GraphicInteractive;\n 50318: flixel_system_debug_GraphicInteractive.__name__ = [\"flixel\",\"system\",\"debug\",\"GraphicInteractive\"];\n 50319: flixel_system_debug_GraphicInteractive.preload = null;\n 50320: flixel_system_debug_GraphicInteractive.__super__ = openfl_display_BitmapData;\n 50321: flixel_system_debug_GraphicInteractive.prototype = $extend(openfl_display_BitmapData.prototype,{\n 50322: \t__class__: flixel_system_debug_GraphicInteractive\n 50323  });\n 50324: var flixel_system_debug_FlxDebugger = function() {\n 50325  \topenfl_display_Sprite.call(this);\n 50326  };\n 50327: $hxClasses[\"flixel.system.debug.FlxDebugger\"] = flixel_system_debug_FlxDebugger;\n 50328: flixel_system_debug_FlxDebugger.__name__ = [\"flixel\",\"system\",\"debug\",\"FlxDebugger\"];\n 50329: flixel_system_debug_FlxDebugger.__super__ = openfl_display_Sprite;\n 50330: flixel_system_debug_FlxDebugger.prototype = $extend(openfl_display_Sprite.prototype,{\n 50331: \t__class__: flixel_system_debug_FlxDebugger\n 50332  });\n 50333: var flixel_system_debug_FlxDebuggerLayout = $hxClasses[\"flixel.system.debug.FlxDebuggerLayout\"] = { __ename__ : [\"flixel\",\"system\",\"debug\",\"FlxDebuggerLayout\"], __constructs__ : [\"STANDARD\",\"MICRO\",\"BIG\",\"TOP\",\"LEFT\",\"RIGHT\"] };\n 50334: flixel_system_debug_FlxDebuggerLayout.STANDARD = [\"STANDARD\",0];\n 50335: flixel_system_debug_FlxDebuggerLayout.STANDARD.toString = $estr;\n 50336: flixel_system_debug_FlxDebuggerLayout.STANDARD.__enum__ = flixel_system_debug_FlxDebuggerLayout;\n 50337: flixel_system_debug_FlxDebuggerLayout.MICRO = [\"MICRO\",1];\n 50338: flixel_system_debug_FlxDebuggerLayout.MICRO.toString = $estr;\n 50339: flixel_system_debug_FlxDebuggerLayout.MICRO.__enum__ = flixel_system_debug_FlxDebuggerLayout;\n 50340: flixel_system_debug_FlxDebuggerLayout.BIG = [\"BIG\",2];\n 50341: flixel_system_debug_FlxDebuggerLayout.BIG.toString = $estr;\n 50342: flixel_system_debug_FlxDebuggerLayout.BIG.__enum__ = flixel_system_debug_FlxDebuggerLayout;\n 50343: flixel_system_debug_FlxDebuggerLayout.TOP = [\"TOP\",3];\n 50344: flixel_system_debug_FlxDebuggerLayout.TOP.toString = $estr;\n 50345: flixel_system_debug_FlxDebuggerLayout.TOP.__enum__ = flixel_system_debug_FlxDebuggerLayout;\n 50346: flixel_system_debug_FlxDebuggerLayout.LEFT = [\"LEFT\",4];\n 50347: flixel_system_debug_FlxDebuggerLayout.LEFT.toString = $estr;\n 50348: flixel_system_debug_FlxDebuggerLayout.LEFT.__enum__ = flixel_system_debug_FlxDebuggerLayout;\n 50349: flixel_system_debug_FlxDebuggerLayout.RIGHT = [\"RIGHT\",5];\n 50350: flixel_system_debug_FlxDebuggerLayout.RIGHT.toString = $estr;\n 50351: flixel_system_debug_FlxDebuggerLayout.RIGHT.__enum__ = flixel_system_debug_FlxDebuggerLayout;\n 50352: var flixel_system_debug_Tooltip = function() { };\n 50353: $hxClasses[\"flixel.system.debug.Tooltip\"] = flixel_system_debug_Tooltip;\n 50354: flixel_system_debug_Tooltip.__name__ = [\"flixel\",\"system\",\"debug\",\"Tooltip\"];\n 50355: flixel_system_debug_Tooltip._container = null;\n 50356: flixel_system_debug_Tooltip.init = function(container) {\n 50357: \tflixel_system_debug_Tooltip._container = container;\n 50358  };\n 50359: flixel_system_debug_Tooltip.add = function(element,text) {\n 50360: \tvar tooltip = new flixel_system_debug_TooltipOverlay(element,text);\n 50361: \tflixel_system_debug_Tooltip._container.addChild(tooltip);\n 50362: \tflixel_system_debug_Tooltip._tooltips.push(tooltip);\n 50363  };\n 50364: flixel_system_debug_Tooltip.remove = function(element) {\n 50365  \tvar removed = false;\n 50366  \tvar _g1 = 0;\n 50367: \tvar _g = flixel_system_debug_Tooltip._tooltips.length;\n 50368  \twhile(_g1 < _g) {\n 50369  \t\tvar i = _g1++;\n 50370: \t\tif(flixel_system_debug_Tooltip._tooltips[i] != null && flixel_system_debug_Tooltip._tooltips[i].owner == element) {\n 50371: \t\t\tvar tooltip = flixel_system_debug_Tooltip._tooltips.splice(i,1)[0];\n 50372  \t\t\ttooltip.destroy();\n 50373  \t\t\tremoved = true;\n .....\n 50377  \treturn removed;\n 50378  };\n 50379: var flixel_system_debug_TooltipOverlay = function(target,text,width,height) {\n 50380  \tif(height == null) {\n 50381  \t\theight = 0;\n .....\n 50389  \tthis._shadow = new openfl_display_Bitmap(new openfl_display_BitmapData(1,2,true,-16777216));\n 50390  \tthis._background = new openfl_display_Bitmap(new openfl_display_BitmapData(1,1,true,-12961222));\n 50391: \tthis._text = flixel_system_debug_DebuggerUtil.createTextField(2,1);\n 50392  \tthis._text.set_alpha(0.8);\n 50393  \tthis._text.set_text(text);\n .....\n 50401  \tthis.owner.addEventListener(\"mouseOut\",$bind(this,this.handleMouseEvents));\n 50402  };\n 50403: $hxClasses[\"flixel.system.debug.TooltipOverlay\"] = flixel_system_debug_TooltipOverlay;\n 50404: flixel_system_debug_TooltipOverlay.__name__ = [\"flixel\",\"system\",\"debug\",\"TooltipOverlay\"];\n 50405: flixel_system_debug_TooltipOverlay.__super__ = openfl_display_Sprite;\n 50406: flixel_system_debug_TooltipOverlay.prototype = $extend(openfl_display_Sprite.prototype,{\n 50407  \t_width: null\n 50408  \t,_height: null\n .....\n 50474  \t\t}\n 50475  \t}\n 50476: \t,__class__: flixel_system_debug_TooltipOverlay\n 50477  });\n 50478: var flixel_system_debug__$Window_GraphicWindowHandle = function(width,height,transparent,fillRGBA,onload) {\n 50479  \tif(fillRGBA == null) {\n 50480  \t\tfillRGBA = -1;\n .....\n 50484  \t}\n 50485  \topenfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);\n 50486: \tif(flixel_system_debug__$Window_GraphicWindowHandle.preload != null) {\n 50487: \t\tthis.__fromImage(flixel_system_debug__$Window_GraphicWindowHandle.preload);\n 50488  \t} else {\n 50489  \t\tvar _gthis = this;\n 50490: \t\tlime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug__$Window_GraphicWindowHandle.resourceName),flixel_system_debug__$Window_GraphicWindowHandle.resourceType).then(function(image) {\n 50491  \t\t\t_gthis.__fromImage(image);\n 50492  \t\t\treturn lime_app_Future.withValue(_gthis);\n 50493  \t\t}).onComplete(function(b) {\n 50494: \t\t\tif(flixel_system_debug__$Window_GraphicWindowHandle.preload == null) {\n 50495: \t\t\t\tflixel_system_debug__$Window_GraphicWindowHandle.preload = b.image;\n 50496  \t\t\t}\n 50497  \t\t\tif(onload != null) {\n .....\n 50501  \t}\n 50502  };\n 50503: $hxClasses[\"flixel.system.debug._Window.GraphicWindowHandle\"] = flixel_system_debug__$Window_GraphicWindowHandle;\n 50504: flixel_system_debug__$Window_GraphicWindowHandle.__name__ = [\"flixel\",\"system\",\"debug\",\"_Window\",\"GraphicWindowHandle\"];\n 50505: flixel_system_debug__$Window_GraphicWindowHandle.preload = null;\n 50506: flixel_system_debug__$Window_GraphicWindowHandle.__super__ = openfl_display_BitmapData;\n 50507: flixel_system_debug__$Window_GraphicWindowHandle.prototype = $extend(openfl_display_BitmapData.prototype,{\n 50508: \t__class__: flixel_system_debug__$Window_GraphicWindowHandle\n 50509  });\n 50510: var flixel_system_debug_Window = function(Title,Icon,Width,Height,Resizable,Bounds,Closable) {\n 50511  \tif(Closable == null) {\n 50512  \t\tClosable = false;\n .....\n 50533  \tthis._header = new openfl_display_Bitmap(new openfl_display_BitmapData(1,15,true,-1157627904));\n 50534  \tthis._background.set_y(this._header.get_height());\n 50535: \tthis._title = flixel_system_debug_DebuggerUtil.createTextField(2,-1);\n 50536  \tthis._title.set_alpha(0.8);\n 50537  \tthis._title.set_text(Title);\n .....\n 50541  \tthis.addChild(this._title);\n 50542  \tif(Icon != null) {\n 50543: \t\tflixel_system_debug_DebuggerUtil.fixSize(Icon);\n 50544  \t\tvar icon = new openfl_display_Bitmap(Icon);\n 50545  \t\ticon.set_x(5);\n .....\n 50550  \t}\n 50551  \tif(this._resizable) {\n 50552: \t\tthis._handle = new openfl_display_Bitmap(flixel_system_debug_DebuggerUtil.fixSize(new flixel_system_debug__$Window_GraphicWindowHandle(0,0)));\n 50553  \t\tthis.addChild(this._handle);\n 50554  \t}\n 50555  \tif(Closable) {\n 50556: \t\tthis._closeButton = new flixel_system_ui_FlxSystemButton(new flixel_system_debug_GraphicCloseButton(0,0),$bind(this,this.close));\n 50557  \t\tthis._closeButton.set_alpha(0.8);\n 50558  \t\tthis.addChild(this._closeButton);\n 50559  \t} else {\n 50560: \t\tthis._id = flixel_system_debug_Window.WINDOW_AMOUNT;\n 50561  \t\tthis.loadSaveData();\n 50562: \t\tflixel_system_debug_Window.WINDOW_AMOUNT++;\n 50563  \t}\n 50564  \tif(this._width != 0 || this._height != 0) {\n .....\n 50568  \tthis.addEventListener(\"enterFrame\",$bind(this,this.init));\n 50569  };\n 50570: $hxClasses[\"flixel.system.debug.Window\"] = flixel_system_debug_Window;\n 50571: flixel_system_debug_Window.__name__ = [\"flixel\",\"system\",\"debug\",\"Window\"];\n 50572: flixel_system_debug_Window.__super__ = openfl_display_Sprite;\n 50573: flixel_system_debug_Window.prototype = $extend(openfl_display_Sprite.prototype,{\n 50574  \tminSize: null\n 50575  \t,maxSize: null\n .....\n 50781  \t\tthis.destroy();\n 50782  \t}\n 50783: \t,__class__: flixel_system_debug_Window\n 50784  });\n 50785: var flixel_system_debug_completion_CompletionList = function(capacity) {\n 50786  \tthis.upperVisibleIndex = 0;\n 50787  \tthis.lowerVisibleIndex = 0;\n .....\n 50797  \topenfl_Lib.get_current().stage.addEventListener(\"keyDown\",$bind(this,this.onKeyDown));\n 50798  };\n 50799: $hxClasses[\"flixel.system.debug.completion.CompletionList\"] = flixel_system_debug_completion_CompletionList;\n 50800: flixel_system_debug_completion_CompletionList.__name__ = [\"flixel\",\"system\",\"debug\",\"completion\",\"CompletionList\"];\n 50801: flixel_system_debug_completion_CompletionList.__super__ = openfl_display_Sprite;\n 50802: flixel_system_debug_completion_CompletionList.prototype = $extend(openfl_display_Sprite.prototype,{\n 50803  \tcompleted: null\n 50804  \t,selectionChanged: null\n .....\n 50835  \t\twhile(_g1 < _g) {\n 50836  \t\t\tvar i = _g1++;\n 50837: \t\t\tvar entry = new flixel_system_debug_completion_CompletionListEntry();\n 50838  \t\t\tthis.entries.push(entry);\n 50839  \t\t\tthis.addChild(entry);\n .....\n 50842  \t}\n 50843  \t,createScrollBar: function() {\n 50844: \t\tthis.scrollBar = new flixel_system_debug_completion_CompletionListScrollBar(150,0,5,this.actualHeight);\n 50845  \t\tthis.addChild(this.scrollBar);\n 50846  \t}\n .....\n 50984  \t\treturn this.filter = filter;\n 50985  \t}\n 50986: \t,__class__: flixel_system_debug_completion_CompletionList\n 50987  \t,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_filter:\"set_filter\"})\n 50988  });\n 50989: var flixel_system_debug_completion_CompletionListEntry = function() {\n 50990  \tthis.selected = false;\n 50991  \topenfl_display_Sprite.call(this);\n 50992  \tthis.initBitmapDatas();\n 50993  \tthis.addChild(this.background = new openfl_display_Bitmap());\n 50994: \tthis.background.set_bitmapData(flixel_system_debug_completion_CompletionListEntry.normalBitmapData);\n 50995: \tthis.label = flixel_system_debug_DebuggerUtil.createTextField();\n 50996  \tthis.label.set_x(4);\n 50997  \tthis.addChild(this.label);\n 50998  };\n 50999: $hxClasses[\"flixel.system.debug.completion.CompletionListEntry\"] = flixel_system_debug_completion_CompletionListEntry;\n 51000: flixel_system_debug_completion_CompletionListEntry.__name__ = [\"flixel\",\"system\",\"debug\",\"completion\",\"CompletionListEntry\"];\n 51001: flixel_system_debug_completion_CompletionListEntry.normalBitmapData = null;\n 51002: flixel_system_debug_completion_CompletionListEntry.highlightBitmapData = null;\n 51003: flixel_system_debug_completion_CompletionListEntry.__super__ = openfl_display_Sprite;\n 51004: flixel_system_debug_completion_CompletionListEntry.prototype = $extend(openfl_display_Sprite.prototype,{\n 51005  \tselected: null\n 51006  \t,background: null\n 51007  \t,label: null\n 51008  \t,initBitmapDatas: function() {\n 51009: \t\tif(flixel_system_debug_completion_CompletionListEntry.normalBitmapData == null) {\n 51010: \t\t\tflixel_system_debug_completion_CompletionListEntry.normalBitmapData = new openfl_display_BitmapData(150,20,true,-10526881);\n 51011  \t\t}\n 51012: \t\tif(flixel_system_debug_completion_CompletionListEntry.highlightBitmapData == null) {\n 51013: \t\t\tflixel_system_debug_completion_CompletionListEntry.highlightBitmapData = new openfl_display_BitmapData(150,20,true,-9605779);\n 51014  \t\t}\n 51015  \t}\n .....\n 51025  \t\t\treturn selected;\n 51026  \t\t}\n 51027: \t\tthis.background.set_bitmapData(selected ? flixel_system_debug_completion_CompletionListEntry.highlightBitmapData : flixel_system_debug_completion_CompletionListEntry.normalBitmapData);\n 51028  \t\treturn this.selected = selected;\n 51029  \t}\n 51030: \t,__class__: flixel_system_debug_completion_CompletionListEntry\n 51031  \t,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_selected:\"set_selected\"})\n 51032  });\n 51033: var flixel_system_debug_completion_CompletionListScrollBar = function(x,y,width,height) {\n 51034  \topenfl_display_Sprite.call(this);\n 51035  \tthis.set_x(x);\n .....\n 51039  \tthis.addChild(this.handle);\n 51040  };\n 51041: $hxClasses[\"flixel.system.debug.completion.CompletionListScrollBar\"] = flixel_system_debug_completion_CompletionListScrollBar;\n 51042: flixel_system_debug_completion_CompletionListScrollBar.__name__ = [\"flixel\",\"system\",\"debug\",\"completion\",\"CompletionListScrollBar\"];\n 51043: flixel_system_debug_completion_CompletionListScrollBar.__super__ = openfl_display_Sprite;\n 51044: flixel_system_debug_completion_CompletionListScrollBar.prototype = $extend(openfl_display_Sprite.prototype,{\n 51045  \thandle: null\n 51046  \t,updateHandle: function(lower,items,entries) {\n .....\n 51053  \t\ttmp.set_y(Max != null && lowerBound > Max ? Max : lowerBound);\n 51054  \t}\n 51055: \t,__class__: flixel_system_debug_completion_CompletionListScrollBar\n 51056  });\n 51057: var flixel_system_debug_console_ConsoleUtil = function() { };\n 51058: $hxClasses[\"flixel.system.debug.console.ConsoleUtil\"] = flixel_system_debug_console_ConsoleUtil;\n 51059: flixel_system_debug_console_ConsoleUtil.__name__ = [\"flixel\",\"system\",\"debug\",\"console\",\"ConsoleUtil\"];\n 51060: flixel_system_debug_console_ConsoleUtil.parser = null;\n 51061: flixel_system_debug_console_ConsoleUtil.interp = null;\n 51062: flixel_system_debug_console_ConsoleUtil.init = function() {\n 51063: \tflixel_system_debug_console_ConsoleUtil.parser = new hscript_Parser();\n 51064: \tflixel_system_debug_console_ConsoleUtil.parser.allowJSON = true;\n 51065: \tflixel_system_debug_console_ConsoleUtil.parser.allowTypes = true;\n 51066: \tflixel_system_debug_console_ConsoleUtil.interp = new flixel_system_debug_console__$ConsoleUtil_Interp();\n 51067  };\n 51068: flixel_system_debug_console_ConsoleUtil.parseCommand = function(Input) {\n 51069  \tif(StringTools.endsWith(Input,\";\")) {\n 51070  \t\tInput = HxOverrides.substr(Input,0,-1);\n 51071  \t}\n 51072: \treturn flixel_system_debug_console_ConsoleUtil.parser.parseString(Input);\n 51073  };\n 51074: flixel_system_debug_console_ConsoleUtil.runCommand = function(Input) {\n 51075: \treturn flixel_system_debug_console_ConsoleUtil.interp.expr(flixel_system_debug_console_ConsoleUtil.parseCommand(Input));\n 51076  };\n 51077: flixel_system_debug_console_ConsoleUtil.runExpr = function(expr) {\n 51078: \treturn flixel_system_debug_console_ConsoleUtil.interp.expr(expr);\n 51079  };\n 51080: flixel_system_debug_console_ConsoleUtil.registerObject = function(ObjectAlias,AnyObject) {\n 51081  \tif(AnyObject == null || Reflect.isObject(AnyObject)) {\n 51082: \t\tvar _this = flixel_system_debug_console_ConsoleUtil.interp.variables;\n 51083  \t\tvar value = AnyObject;\n 51084  \t\tif(__map_reserved[ObjectAlias] != null) {\n .....\n 51089  \t}\n 51090  };\n 51091: flixel_system_debug_console_ConsoleUtil.registerFunction = function(FunctionAlias,Function) {\n 51092  \tif(Reflect.isFunction(Function)) {\n 51093: \t\tvar _this = flixel_system_debug_console_ConsoleUtil.interp.variables;\n 51094  \t\tvar value = Function;\n 51095  \t\tif(__map_reserved[FunctionAlias] != null) {\n .....\n 51100  \t}\n 51101  };\n 51102: flixel_system_debug_console_ConsoleUtil.getFields = function(Object) {\n 51103  \tvar fields = [];\n 51104  \tif(js_Boot.__instanceof(Object,Class)) {\n .....\n 51125  \t\t}\n 51126  \t}\n 51127: \treturn flixel_system_debug_console_ConsoleUtil.sortFields(filteredFields);\n 51128  };\n 51129: flixel_system_debug_console_ConsoleUtil.sortFields = function(fields) {\n 51130  \tvar underscoreList = [];\n 51131  \tfields = fields.filter(function(field) {\n .....\n 51140  \treturn fields.concat(underscoreList);\n 51141  };\n 51142: flixel_system_debug_console_ConsoleUtil.log = function(Text) {\n 51143: \tflixel_FlxG.log.advanced([Text],flixel_system_debug_log_LogStyle.CONSOLE);\n 51144  };\n 51145  var hscript_Interp = function() {\n .....\n 52277  \t,__class__: hscript_Interp\n 52278  };\n 52279: var flixel_system_debug_console__$ConsoleUtil_Interp = function() {\n 52280  \thscript_Interp.call(this);\n 52281  };\n 52282: $hxClasses[\"flixel.system.debug.console._ConsoleUtil.Interp\"] = flixel_system_debug_console__$ConsoleUtil_Interp;\n 52283: flixel_system_debug_console__$ConsoleUtil_Interp.__name__ = [\"flixel\",\"system\",\"debug\",\"console\",\"_ConsoleUtil\",\"Interp\"];\n 52284: flixel_system_debug_console__$ConsoleUtil_Interp.__super__ = hscript_Interp;\n 52285: flixel_system_debug_console__$ConsoleUtil_Interp.prototype = $extend(hscript_Interp.prototype,{\n 52286  \tgetGlobals: function() {\n 52287  \t\treturn this.toArray(this.locals.keys()).concat(this.toArray(this.variables.keys()));\n .....\n 52311  \t\treturn v;\n 52312  \t}\n 52313: \t,__class__: flixel_system_debug_console__$ConsoleUtil_Interp\n 52314  });\n 52315: var flixel_system_debug_interaction_Interaction = function(container) {\n 52316  \tthis._flixelPointer = new flixel_input_FlxPointer();\n 52317: \tthis._debuggerInteraction = false;\n 52318  \tthis._keysUp = new haxe_ds_IntMap();\n 52319  \tthis._keysDown = new haxe_ds_IntMap();\n .....\n 52325  \tthis.flixelPointer = new flixel_math_FlxPoint();\n 52326  \tthis.selectedItems = new flixel_group_FlxTypedGroup();\n 52327: \tflixel_system_debug_Window.call(this,\"Tools\",new flixel_system_debug_GraphicInteractive(0,0),40,25,false);\n 52328  \tthis.reposition(2,100);\n 52329  \tthis._container = container;\n .....\n 52331  \tthis._customCursor.mouseEnabled = false;\n 52332  \tthis._container.addChild(this._customCursor);\n 52333: \tthis.addTool(new flixel_system_debug_interaction_tools_Pointer());\n 52334: \tthis.addTool(new flixel_system_debug_interaction_tools_Mover());\n 52335: \tthis.addTool(new flixel_system_debug_interaction_tools_Eraser());\n 52336  \tflixel_FlxG.signals.postDraw.add($bind(this,this.postDraw));\n 52337: \tflixel_FlxG[\"debugger\"].visibilityChanged.add($bind(this,this.handleDebuggerVisibilityChanged));\n 52338  \topenfl_Lib.get_current().stage.addEventListener(\"mouseMove\",$bind(this,this.updateMouse));\n 52339  \topenfl_Lib.get_current().stage.addEventListener(\"mouseDown\",$bind(this,this.handleMouseClick));\n .....\n 52341  \topenfl_Lib.get_current().stage.addEventListener(\"keyDown\",$bind(this,this.handleKeyEvent));\n 52342  \topenfl_Lib.get_current().stage.addEventListener(\"keyUp\",$bind(this,this.handleKeyEvent));\n 52343: \tthis._container.addEventListener(\"mouseOver\",$bind(this,this.handleMouseInDebugger));\n 52344: \tthis._container.addEventListener(\"mouseOut\",$bind(this,this.handleMouseInDebugger));\n 52345  };\n 52346: $hxClasses[\"flixel.system.debug.interaction.Interaction\"] = flixel_system_debug_interaction_Interaction;\n 52347: flixel_system_debug_interaction_Interaction.__name__ = [\"flixel\",\"system\",\"debug\",\"interaction\",\"Interaction\"];\n 52348: flixel_system_debug_interaction_Interaction.__super__ = flixel_system_debug_Window;\n 52349: flixel_system_debug_interaction_Interaction.prototype = $extend(flixel_system_debug_Window.prototype,{\n 52350  \tactiveTool: null\n 52351  \t,selectedItems: null\n .....\n 52362  \t,_wasMouseVisible: null\n 52363  \t,_wasUsingSystemCursor: null\n 52364: \t,_debuggerInteraction: null\n 52365  \t,_flixelPointer: null\n 52366: \t,handleDebuggerVisibilityChanged: function() {\n 52367: \t\tif(flixel_FlxG[\"debugger\"].visible) {\n 52368  \t\t\tthis.saveSystemCursorInfo();\n 52369  \t\t} else {\n .....\n 52394  \t}\n 52395  \t,handleMouseClick: function(event) {\n 52396: \t\tif(event.type == \"mouseDown\" && this.belongsToDebugger(event.target)) {\n 52397  \t\t\treturn;\n 52398  \t\t}\n .....\n 52405  \t\t}\n 52406  \t}\n 52407: \t,belongsToDebugger: function(object) {\n 52408  \t\tif(object == null) {\n 52409  \t\t\treturn false;\n 52410: \t\t} else if(js_Boot.__instanceof(object,flixel_system_debug_FlxDebugger)) {\n 52411  \t\t\treturn true;\n 52412  \t\t}\n 52413: \t\treturn this.belongsToDebugger(object.parent);\n 52414  \t}\n 52415: \t,handleMouseInDebugger: function(event) {\n 52416  \t\tif(!this.isActive()) {\n 52417  \t\t\treturn;\n 52418  \t\t}\n 52419  \t\tif(event.type == \"mouseOver\") {\n 52420: \t\t\tthis._debuggerInteraction = true;\n 52421  \t\t} else if(event.type == \"mouseOut\") {\n 52422: \t\t\tthis._debuggerInteraction = false;\n 52423  \t\t}\n 52424  \t\tevent.stopPropagation();\n .....\n 52446  \t,destroy: function() {\n 52447  \t\tflixel_FlxG.signals.postDraw.remove($bind(this,this.postDraw));\n 52448: \t\tflixel_FlxG[\"debugger\"].visibilityChanged.remove($bind(this,this.handleDebuggerVisibilityChanged));\n 52449  \t\topenfl_Lib.get_current().stage.removeEventListener(\"mouseMove\",$bind(this,this.updateMouse));\n 52450  \t\topenfl_Lib.get_current().stage.removeEventListener(\"mouseDown\",$bind(this,this.handleMouseClick));\n .....\n 52453  \t\topenfl_Lib.get_current().stage.removeEventListener(\"keyUp\",$bind(this,this.handleKeyEvent));\n 52454  \t\tif(this._container != null) {\n 52455: \t\t\tthis._container.removeEventListener(\"mouseOver\",$bind(this,this.handleMouseInDebugger));\n 52456: \t\t\tthis._container.removeEventListener(\"mouseOut\",$bind(this,this.handleMouseInDebugger));\n 52457  \t\t}\n 52458  \t\tif(this._customCursor != null) {\n .....\n 52467  \t}\n 52468  \t,isActive: function() {\n 52469: \t\tif(flixel_FlxG[\"debugger\"].visible) {\n 52470  \t\t\treturn this.get_visible();\n 52471  \t\t} else {\n .....\n 52502  \t\tthis.drawItemsSelection();\n 52503  \t}\n 52504: \t,getDebugGraphics: function() {\n 52505  \t\tif(flixel_FlxG.renderBlit) {\n 52506  \t\t\tflixel_util_FlxSpriteUtil.flashGfx.clear();\n .....\n 52510  \t}\n 52511  \t,drawItemsSelection: function() {\n 52512: \t\tvar gfx = this.getDebugGraphics();\n 52513  \t\tif(gfx == null) {\n 52514  \t\t\treturn;\n .....\n 52539  \t}\n 52540  \t,toggleVisible: function() {\n 52541: \t\tflixel_system_debug_Window.prototype.toggleVisible.call(this);\n 52542  \t\tif(!this.get_visible()) {\n 52543  \t\t\tthis.setActiveTool(null);\n .....\n 52556  \t}\n 52557  \t,updateCustomCursors: function() {\n 52558: \t\tif(this.activeTool != null && !this._debuggerInteraction) {\n 52559  \t\t\tif(this.activeTool.cursor != null) {\n 52560  \t\t\t\tvar _g1 = 0;\n .....\n 52667  \t\t}\n 52668  \t}\n 52669: \t,__class__: flixel_system_debug_interaction_Interaction\n 52670  });\n 52671: var flixel_system_debug_interaction_tools_GraphicEraserTool = function(width,height,transparent,fillRGBA,onload) {\n 52672  \tif(fillRGBA == null) {\n 52673  \t\tfillRGBA = -1;\n .....\n 52677  \t}\n 52678  \topenfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);\n 52679: \tif(flixel_system_debug_interaction_tools_GraphicEraserTool.preload != null) {\n 52680: \t\tthis.__fromImage(flixel_system_debug_interaction_tools_GraphicEraserTool.preload);\n 52681  \t} else {\n 52682  \t\tvar _gthis = this;\n 52683: \t\tlime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_interaction_tools_GraphicEraserTool.resourceName),flixel_system_debug_interaction_tools_GraphicEraserTool.resourceType).then(function(image) {\n 52684  \t\t\t_gthis.__fromImage(image);\n 52685  \t\t\treturn lime_app_Future.withValue(_gthis);\n 52686  \t\t}).onComplete(function(b) {\n 52687: \t\t\tif(flixel_system_debug_interaction_tools_GraphicEraserTool.preload == null) {\n 52688: \t\t\t\tflixel_system_debug_interaction_tools_GraphicEraserTool.preload = b.image;\n 52689  \t\t\t}\n 52690  \t\t\tif(onload != null) {\n .....\n 52694  \t}\n 52695  };\n 52696: $hxClasses[\"flixel.system.debug.interaction.tools.GraphicEraserTool\"] = flixel_system_debug_interaction_tools_GraphicEraserTool;\n 52697: flixel_system_debug_interaction_tools_GraphicEraserTool.__name__ = [\"flixel\",\"system\",\"debug\",\"interaction\",\"tools\",\"GraphicEraserTool\"];\n 52698: flixel_system_debug_interaction_tools_GraphicEraserTool.preload = null;\n 52699: flixel_system_debug_interaction_tools_GraphicEraserTool.__super__ = openfl_display_BitmapData;\n 52700: flixel_system_debug_interaction_tools_GraphicEraserTool.prototype = $extend(openfl_display_BitmapData.prototype,{\n 52701: \t__class__: flixel_system_debug_interaction_tools_GraphicEraserTool\n 52702  });\n 52703: var flixel_system_debug_interaction_tools_Tool = function() {\n 52704  \tthis._name = \"(Unknown tool)\";\n 52705  \topenfl_display_Sprite.call(this);\n 52706  };\n 52707: $hxClasses[\"flixel.system.debug.interaction.tools.Tool\"] = flixel_system_debug_interaction_tools_Tool;\n 52708: flixel_system_debug_interaction_tools_Tool.__name__ = [\"flixel\",\"system\",\"debug\",\"interaction\",\"tools\",\"Tool\"];\n 52709: flixel_system_debug_interaction_tools_Tool.__interfaces__ = [flixel_util_IFlxDestroyable];\n 52710: flixel_system_debug_interaction_tools_Tool.__super__ = openfl_display_Sprite;\n 52711: flixel_system_debug_interaction_tools_Tool.prototype = $extend(openfl_display_Sprite.prototype,{\n 52712  \tbutton: null\n 52713  \t,cursor: null\n .....\n 52743  \t\t\ttooltip += \" (\" + this._shortcut + \")\";\n 52744  \t\t}\n 52745: \t\tflixel_system_debug_Tooltip.add(this.button,tooltip);\n 52746  \t}\n 52747  \t,setCursor: function(Icon) {\n .....\n 52755  \t\treturn this._name;\n 52756  \t}\n 52757: \t,__class__: flixel_system_debug_interaction_tools_Tool\n 52758  });\n 52759: var flixel_system_debug_interaction_tools_Eraser = function() {\n 52760: \tflixel_system_debug_interaction_tools_Tool.call(this);\n 52761  };\n 52762: $hxClasses[\"flixel.system.debug.interaction.tools.Eraser\"] = flixel_system_debug_interaction_tools_Eraser;\n 52763: flixel_system_debug_interaction_tools_Eraser.__name__ = [\"flixel\",\"system\",\"debug\",\"interaction\",\"tools\",\"Eraser\"];\n 52764: flixel_system_debug_interaction_tools_Eraser.__super__ = flixel_system_debug_interaction_tools_Tool;\n 52765: flixel_system_debug_interaction_tools_Eraser.prototype = $extend(flixel_system_debug_interaction_tools_Tool.prototype,{\n 52766  \tinit: function(Brain) {\n 52767: \t\tflixel_system_debug_interaction_tools_Tool.prototype.init.call(this,Brain);\n 52768  \t\tthis._name = \"Eraser\";\n 52769  \t\treturn this;\n .....\n 52819  \t\t}\n 52820  \t}\n 52821: \t,__class__: flixel_system_debug_interaction_tools_Eraser\n 52822  });\n 52823: var flixel_system_debug_interaction_tools_GraphicMoverTool = function(width,height,transparent,fillRGBA,onload) {\n 52824  \tif(fillRGBA == null) {\n 52825  \t\tfillRGBA = -1;\n .....\n 52829  \t}\n 52830  \topenfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);\n 52831: \tif(flixel_system_debug_interaction_tools_GraphicMoverTool.preload != null) {\n 52832: \t\tthis.__fromImage(flixel_system_debug_interaction_tools_GraphicMoverTool.preload);\n 52833  \t} else {\n 52834  \t\tvar _gthis = this;\n 52835: \t\tlime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_interaction_tools_GraphicMoverTool.resourceName),flixel_system_debug_interaction_tools_GraphicMoverTool.resourceType).then(function(image) {\n 52836  \t\t\t_gthis.__fromImage(image);\n 52837  \t\t\treturn lime_app_Future.withValue(_gthis);\n 52838  \t\t}).onComplete(function(b) {\n 52839: \t\t\tif(flixel_system_debug_interaction_tools_GraphicMoverTool.preload == null) {\n 52840: \t\t\t\tflixel_system_debug_interaction_tools_GraphicMoverTool.preload = b.image;\n 52841  \t\t\t}\n 52842  \t\t\tif(onload != null) {\n .....\n 52846  \t}\n 52847  };\n 52848: $hxClasses[\"flixel.system.debug.interaction.tools.GraphicMoverTool\"] = flixel_system_debug_interaction_tools_GraphicMoverTool;\n 52849: flixel_system_debug_interaction_tools_GraphicMoverTool.__name__ = [\"flixel\",\"system\",\"debug\",\"interaction\",\"tools\",\"GraphicMoverTool\"];\n 52850: flixel_system_debug_interaction_tools_GraphicMoverTool.preload = null;\n 52851: flixel_system_debug_interaction_tools_GraphicMoverTool.__super__ = openfl_display_BitmapData;\n 52852: flixel_system_debug_interaction_tools_GraphicMoverTool.prototype = $extend(openfl_display_BitmapData.prototype,{\n 52853: \t__class__: flixel_system_debug_interaction_tools_GraphicMoverTool\n 52854  });\n 52855: var flixel_system_debug_interaction_tools_Mover = function() {\n 52856  \tthis._dragging = false;\n 52857: \tflixel_system_debug_interaction_tools_Tool.call(this);\n 52858  };\n 52859: $hxClasses[\"flixel.system.debug.interaction.tools.Mover\"] = flixel_system_debug_interaction_tools_Mover;\n 52860: flixel_system_debug_interaction_tools_Mover.__name__ = [\"flixel\",\"system\",\"debug\",\"interaction\",\"tools\",\"Mover\"];\n 52861: flixel_system_debug_interaction_tools_Mover.__super__ = flixel_system_debug_interaction_tools_Tool;\n 52862: flixel_system_debug_interaction_tools_Mover.prototype = $extend(flixel_system_debug_interaction_tools_Tool.prototype,{\n 52863  \t_dragging: null\n 52864  \t,_lastCursorPosition: null\n 52865  \t,init: function(brain) {\n 52866: \t\tflixel_system_debug_interaction_tools_Tool.prototype.init.call(this,brain);\n 52867  \t\tthis._lastCursorPosition = new flixel_math_FlxPoint(brain.flixelPointer.x,brain.flixelPointer.x);\n 52868  \t\tthis._name = \"Mover\";\n 52869  \t\tthis._shortcut = \"Shift\";\n 52870: \t\tthis.setButton(flixel_system_debug_interaction_tools_GraphicMoverTool);\n 52871: \t\tthis.setCursor(new flixel_system_debug_interaction_tools_GraphicMoverTool(0,0));\n 52872  \t\treturn this;\n 52873  \t}\n .....\n 52894  \t\t}\n 52895  \t\tthis._dragging = true;\n 52896: \t\tif(!this.isActive() && js_Boot.__instanceof(this._brain.activeTool,flixel_system_debug_interaction_tools_Pointer)) {\n 52897: \t\t\t(js_Boot.__cast(this._brain.activeTool , flixel_system_debug_interaction_tools_Pointer)).cancelSelection();\n 52898  \t\t}\n 52899  \t}\n .....\n 52918  \t\t}\n 52919  \t}\n 52920: \t,__class__: flixel_system_debug_interaction_tools_Mover\n 52921  });\n 52922: var flixel_system_debug_interaction_tools_GraphicCursorCross = function(width,height,transparent,fillRGBA,onload) {\n 52923  \tif(fillRGBA == null) {\n 52924  \t\tfillRGBA = -1;\n .....\n 52928  \t}\n 52929  \topenfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);\n 52930: \tif(flixel_system_debug_interaction_tools_GraphicCursorCross.preload != null) {\n 52931: \t\tthis.__fromImage(flixel_system_debug_interaction_tools_GraphicCursorCross.preload);\n 52932  \t} else {\n 52933  \t\tvar _gthis = this;\n 52934: \t\tlime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_interaction_tools_GraphicCursorCross.resourceName),flixel_system_debug_interaction_tools_GraphicCursorCross.resourceType).then(function(image) {\n 52935  \t\t\t_gthis.__fromImage(image);\n 52936  \t\t\treturn lime_app_Future.withValue(_gthis);\n 52937  \t\t}).onComplete(function(b) {\n 52938: \t\t\tif(flixel_system_debug_interaction_tools_GraphicCursorCross.preload == null) {\n 52939: \t\t\t\tflixel_system_debug_interaction_tools_GraphicCursorCross.preload = b.image;\n 52940  \t\t\t}\n 52941  \t\t\tif(onload != null) {\n .....\n 52945  \t}\n 52946  };\n 52947: $hxClasses[\"flixel.system.debug.interaction.tools.GraphicCursorCross\"] = flixel_system_debug_interaction_tools_GraphicCursorCross;\n 52948: flixel_system_debug_interaction_tools_GraphicCursorCross.__name__ = [\"flixel\",\"system\",\"debug\",\"interaction\",\"tools\",\"GraphicCursorCross\"];\n 52949: flixel_system_debug_interaction_tools_GraphicCursorCross.preload = null;\n 52950: flixel_system_debug_interaction_tools_GraphicCursorCross.__super__ = openfl_display_BitmapData;\n 52951: flixel_system_debug_interaction_tools_GraphicCursorCross.prototype = $extend(openfl_display_BitmapData.prototype,{\n 52952: \t__class__: flixel_system_debug_interaction_tools_GraphicCursorCross\n 52953  });\n 52954: var flixel_system_debug_interaction_tools_Pointer = function() {\n 52955  \tthis._itemsInSelectionArea = [];\n 52956  \tthis._selectionArea = new flixel_math_FlxRect();\n .....\n 52959  \tthis._selectionEndPoint = new flixel_math_FlxPoint();\n 52960  \tthis._selectionStartPoint = new flixel_math_FlxPoint();\n 52961: \tflixel_system_debug_interaction_tools_Tool.call(this);\n 52962  };\n 52963: $hxClasses[\"flixel.system.debug.interaction.tools.Pointer\"] = flixel_system_debug_interaction_tools_Pointer;\n 52964: flixel_system_debug_interaction_tools_Pointer.__name__ = [\"flixel\",\"system\",\"debug\",\"interaction\",\"tools\",\"Pointer\"];\n 52965: flixel_system_debug_interaction_tools_Pointer.__super__ = flixel_system_debug_interaction_tools_Tool;\n 52966: flixel_system_debug_interaction_tools_Pointer.prototype = $extend(flixel_system_debug_interaction_tools_Tool.prototype,{\n 52967  \t_selectionStartPoint: null\n 52968  \t,_selectionEndPoint: null\n .....\n 52972  \t,_itemsInSelectionArea: null\n 52973  \t,init: function(brain) {\n 52974: \t\tflixel_system_debug_interaction_tools_Tool.prototype.init.call(this,brain);\n 52975  \t\tthis._name = \"Pointer\";\n 52976: \t\tthis.setButton(flixel_system_debug_interaction_tools_GraphicCursorCross);\n 52977: \t\tthis.setCursor(new flixel_system_debug_interaction_tools_GraphicCursorCross(0,0));\n 52978  \t\treturn this;\n 52979  \t}\n .....\n 53085  \t}\n 53086  \t,draw: function() {\n 53087: \t\tvar gfx = this._brain.getDebugGraphics();\n 53088  \t\tif(gfx == null) {\n 53089  \t\t\treturn;\n .....\n 53097  \t\t}\n 53098  \t}\n 53099: \t,__class__: flixel_system_debug_interaction_tools_Pointer\n 53100  });\n 53101: var flixel_system_debug_log_LogStyle = function(Prefix,Color,Size,Bold,Italic,Underlined,ErrorSound,OpenConsole,CallbackFunction) {\n 53102  \tif(OpenConsole == null) {\n 53103  \t\tOpenConsole = false;\n .....\n 53131  \tthis.callbackFunction = CallbackFunction;\n 53132  };\n 53133: $hxClasses[\"flixel.system.debug.log.LogStyle\"] = flixel_system_debug_log_LogStyle;\n 53134: flixel_system_debug_log_LogStyle.__name__ = [\"flixel\",\"system\",\"debug\",\"log\",\"LogStyle\"];\n 53135: flixel_system_debug_log_LogStyle.prototype = {\n 53136  \tprefix: null\n 53137  \t,color: null\n .....\n 53143  \t,openConsole: null\n 53144  \t,callbackFunction: null\n 53145: \t,__class__: flixel_system_debug_log_LogStyle\n 53146  };\n 53147: var flixel_system_debug_stats__$Stats_GraphicMinimizeButton = function(width,height,transparent,fillRGBA,onload) {\n 53148  \tif(fillRGBA == null) {\n 53149  \t\tfillRGBA = -1;\n .....\n 53153  \t}\n 53154  \topenfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);\n 53155: \tif(flixel_system_debug_stats__$Stats_GraphicMinimizeButton.preload != null) {\n 53156: \t\tthis.__fromImage(flixel_system_debug_stats__$Stats_GraphicMinimizeButton.preload);\n 53157  \t} else {\n 53158  \t\tvar _gthis = this;\n 53159: \t\tlime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_stats__$Stats_GraphicMinimizeButton.resourceName),flixel_system_debug_stats__$Stats_GraphicMinimizeButton.resourceType).then(function(image) {\n 53160  \t\t\t_gthis.__fromImage(image);\n 53161  \t\t\treturn lime_app_Future.withValue(_gthis);\n 53162  \t\t}).onComplete(function(b) {\n 53163: \t\t\tif(flixel_system_debug_stats__$Stats_GraphicMinimizeButton.preload == null) {\n 53164: \t\t\t\tflixel_system_debug_stats__$Stats_GraphicMinimizeButton.preload = b.image;\n 53165  \t\t\t}\n 53166  \t\t\tif(onload != null) {\n .....\n 53170  \t}\n 53171  };\n 53172: $hxClasses[\"flixel.system.debug.stats._Stats.GraphicMinimizeButton\"] = flixel_system_debug_stats__$Stats_GraphicMinimizeButton;\n 53173: flixel_system_debug_stats__$Stats_GraphicMinimizeButton.__name__ = [\"flixel\",\"system\",\"debug\",\"stats\",\"_Stats\",\"GraphicMinimizeButton\"];\n 53174: flixel_system_debug_stats__$Stats_GraphicMinimizeButton.preload = null;\n 53175: flixel_system_debug_stats__$Stats_GraphicMinimizeButton.__super__ = openfl_display_BitmapData;\n 53176: flixel_system_debug_stats__$Stats_GraphicMinimizeButton.prototype = $extend(openfl_display_BitmapData.prototype,{\n 53177: \t__class__: flixel_system_debug_stats__$Stats_GraphicMinimizeButton\n 53178  });\n 53179: var flixel_system_debug_stats__$Stats_GraphicMaximizeButton = function(width,height,transparent,fillRGBA,onload) {\n 53180  \tif(fillRGBA == null) {\n 53181  \t\tfillRGBA = -1;\n .....\n 53185  \t}\n 53186  \topenfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);\n 53187: \tif(flixel_system_debug_stats__$Stats_GraphicMaximizeButton.preload != null) {\n 53188: \t\tthis.__fromImage(flixel_system_debug_stats__$Stats_GraphicMaximizeButton.preload);\n 53189  \t} else {\n 53190  \t\tvar _gthis = this;\n 53191: \t\tlime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_stats__$Stats_GraphicMaximizeButton.resourceName),flixel_system_debug_stats__$Stats_GraphicMaximizeButton.resourceType).then(function(image) {\n 53192  \t\t\t_gthis.__fromImage(image);\n 53193  \t\t\treturn lime_app_Future.withValue(_gthis);\n 53194  \t\t}).onComplete(function(b) {\n 53195: \t\t\tif(flixel_system_debug_stats__$Stats_GraphicMaximizeButton.preload == null) {\n 53196: \t\t\t\tflixel_system_debug_stats__$Stats_GraphicMaximizeButton.preload = b.image;\n 53197  \t\t\t}\n 53198  \t\t\tif(onload != null) {\n .....\n 53202  \t}\n 53203  };\n 53204: $hxClasses[\"flixel.system.debug.stats._Stats.GraphicMaximizeButton\"] = flixel_system_debug_stats__$Stats_GraphicMaximizeButton;\n 53205: flixel_system_debug_stats__$Stats_GraphicMaximizeButton.__name__ = [\"flixel\",\"system\",\"debug\",\"stats\",\"_Stats\",\"GraphicMaximizeButton\"];\n 53206: flixel_system_debug_stats__$Stats_GraphicMaximizeButton.preload = null;\n 53207: flixel_system_debug_stats__$Stats_GraphicMaximizeButton.__super__ = openfl_display_BitmapData;\n 53208: flixel_system_debug_stats__$Stats_GraphicMaximizeButton.prototype = $extend(openfl_display_BitmapData.prototype,{\n 53209: \t__class__: flixel_system_debug_stats__$Stats_GraphicMaximizeButton\n 53210  });\n 53211: var flixel_system_debug_watch_Watch = function(Title,Icon,Width,Height,Resizable,Bounds,Closable) {\n 53212: \tflixel_system_debug_Window.call(this,Title,Icon,Width,Height,Resizable,Bounds,Closable);\n 53213  };\n 53214: $hxClasses[\"flixel.system.debug.watch.Watch\"] = flixel_system_debug_watch_Watch;\n 53215: flixel_system_debug_watch_Watch.__name__ = [\"flixel\",\"system\",\"debug\",\"watch\",\"Watch\"];\n 53216: flixel_system_debug_watch_Watch.__super__ = flixel_system_debug_Window;\n 53217: flixel_system_debug_watch_Watch.prototype = $extend(flixel_system_debug_Window.prototype,{\n 53218: \t__class__: flixel_system_debug_watch_Watch\n 53219  });\n 53220: var flixel_system_debug_watch_Tracker = function(Title,Icon,Width,Height,Resizable,Bounds,Closable) {\n 53221: \tflixel_system_debug_watch_Watch.call(this,Title,Icon,Width,Height,Resizable,Bounds,Closable);\n 53222  };\n 53223: $hxClasses[\"flixel.system.debug.watch.Tracker\"] = flixel_system_debug_watch_Tracker;\n 53224: flixel_system_debug_watch_Tracker.__name__ = [\"flixel\",\"system\",\"debug\",\"watch\",\"Tracker\"];\n 53225: flixel_system_debug_watch_Tracker.__super__ = flixel_system_debug_watch_Watch;\n 53226: flixel_system_debug_watch_Tracker.prototype = $extend(flixel_system_debug_watch_Watch.prototype,{\n 53227: \t__class__: flixel_system_debug_watch_Tracker\n 53228  });\n 53229: var flixel_system_debug_watch_TrackerProfile = function(ObjectClass,Variables,Extensions) {\n 53230  \tthis.objectClass = ObjectClass;\n 53231  \tthis.variables = Variables;\n 53232  \tthis.extensions = Extensions;\n 53233  };\n 53234: $hxClasses[\"flixel.system.debug.watch.TrackerProfile\"] = flixel_system_debug_watch_TrackerProfile;\n 53235: flixel_system_debug_watch_TrackerProfile.__name__ = [\"flixel\",\"system\",\"debug\",\"watch\",\"TrackerProfile\"];\n 53236: flixel_system_debug_watch_TrackerProfile.prototype = {\n 53237  \tobjectClass: null\n 53238  \t,variables: null\n .....\n 53247  \t\t_this1.label = \"extensions\";\n 53248  \t\t_this1.value = value1;\n 53249: \t\treturn flixel_util_FlxStringUtil.getDebugString([_this,_this1]);\n 53250  \t}\n 53251: \t,__class__: flixel_system_debug_watch_TrackerProfile\n 53252  };\n 53253  var flixel_system_frontEnds_FlxBrowser = $hxClasses[\"flixel.system.frontEnds.FlxBrowser\"] = { __ename__ : [\"flixel\",\"system\",\"frontEnds\",\"FlxBrowser\"], __constructs__ : [\"INTERNET_EXPLORER\",\"CHROME\",\"FIREFOX\",\"SAFARI\",\"OPERA\",\"UNKNOWN\"] };\n .....\n 53892  \t\t\tthis.removeChild(this._icon);\n 53893  \t\t}\n 53894: \t\tflixel_system_debug_DebuggerUtil.fixSize(Icon);\n 53895  \t\tthis._icon = new openfl_display_Bitmap(Icon);\n 53896  \t\tthis.addChild(this._icon);\n .....\n 62522  \treturn flixel_util_FlxStringUtil.bitmapToCSV(tempBitmapData,Invert,Scale,ColorMap);\n 62523  };\n 62524: flixel_util_FlxStringUtil.getDebugString = function(LabelValuePairs) {\n 62525  \tvar output = \"(\";\n 62526  \tvar _g = 0;\n .....\n 62531  \t\tvar value = pair.value;\n 62532  \t\tif(typeof(value) == \"number\") {\n 62533: \t\t\tvalue = flixel_math_FlxMath.roundDecimal(value,flixel_FlxG[\"debugger\"].precision);\n 62534  \t\t}\n 62535  \t\toutput += Std.string(value) + \" | \";\n .....\n 62832  \t\t_this1.label = \"end\";\n 62833  \t\t_this1.value = value1;\n 62834: \t\treturn flixel_util_FlxStringUtil.getDebugString([_this,_this1]);\n 62835  \t}\n 62836  \t,__class__: flixel_util_helpers_FlxRange\n .....\n 84802  \treturn gl;\n 84803  };\n 84804: var lime_graphics_opengl_ext_KHR_$debug = function() {\n 84805  \tthis.STACK_UNDERFLOW = 1284;\n 84806  \tthis.STACK_OVERFLOW = 1283;\n 84807: \tthis.CONTEXT_FLAG_DEBUG_BIT = 2;\n 84808: \tthis.DEBUG_OUTPUT = 37600;\n 84809: \tthis.DEBUG_SEVERITY_LOW = 37192;\n 84810: \tthis.DEBUG_SEVERITY_MEDIUM = 37191;\n 84811: \tthis.DEBUG_SEVERITY_HIGH = 37190;\n 84812: \tthis.DEBUG_LOGGED_MESSAGES = 37189;\n 84813: \tthis.MAX_DEBUG_LOGGED_MESSAGES = 37188;\n 84814: \tthis.MAX_DEBUG_MESSAGE_LENGTH = 37187;\n 84815  \tthis.MAX_LABEL_LENGTH = 33512;\n 84816  \tthis.SAMPLER = 33510;\n .....\n 84819  \tthis.SHADER = 33505;\n 84820  \tthis.BUFFER = 33504;\n 84821: \tthis.DEBUG_GROUP_STACK_DEPTH = 33389;\n 84822: \tthis.MAX_DEBUG_GROUP_STACK_DEPTH = 33388;\n 84823: \tthis.DEBUG_SEVERITY_NOTIFICATION = 33387;\n 84824: \tthis.DEBUG_TYPE_POP_GROUP = 33386;\n 84825: \tthis.DEBUG_TYPE_PUSH_GROUP = 33385;\n 84826: \tthis.DEBUG_TYPE_MARKER = 33384;\n 84827: \tthis.DEBUG_TYPE_OTHER = 33361;\n 84828: \tthis.DEBUG_TYPE_PERFORMANCE = 33360;\n 84829: \tthis.DEBUG_TYPE_PORTABILITY = 33359;\n 84830: \tthis.DEBUG_TYPE_UNDEFINED_BEHAVIOR = 33358;\n 84831: \tthis.DEBUG_TYPE_DEPRECATED_BEHAVIOR = 33357;\n 84832: \tthis.DEBUG_TYPE_ERROR = 33356;\n 84833: \tthis.DEBUG_SOURCE_OTHER = 33355;\n 84834: \tthis.DEBUG_SOURCE_APPLICATION = 33354;\n 84835: \tthis.DEBUG_SOURCE_THIRD_PARTY = 33353;\n 84836: \tthis.DEBUG_SOURCE_SHADER_COMPILER = 33352;\n 84837: \tthis.DEBUG_SOURCE_WINDOW_SYSTEM = 33351;\n 84838: \tthis.DEBUG_SOURCE_API = 33350;\n 84839: \tthis.DEBUG_CALLBACK_USER_PARAM = 33349;\n 84840: \tthis.DEBUG_CALLBACK_FUNCTION = 33348;\n 84841: \tthis.DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 33347;\n 84842: \tthis.DEBUG_OUTPUT_SYNCHRONOUS = 33346;\n 84843  };\n 84844: $hxClasses[\"lime.graphics.opengl.ext.KHR_debug\"] = lime_graphics_opengl_ext_KHR_$debug;\n 84845: lime_graphics_opengl_ext_KHR_$debug.__name__ = [\"lime\",\"graphics\",\"opengl\",\"ext\",\"KHR_debug\"];\n 84846: lime_graphics_opengl_ext_KHR_$debug.prototype = {\n 84847: \tDEBUG_OUTPUT_SYNCHRONOUS: null\n 84848: \t,DEBUG_NEXT_LOGGED_MESSAGE_LENGTH: null\n 84849: \t,DEBUG_CALLBACK_FUNCTION: null\n 84850: \t,DEBUG_CALLBACK_USER_PARAM: null\n 84851: \t,DEBUG_SOURCE_API: null\n 84852: \t,DEBUG_SOURCE_WINDOW_SYSTEM: null\n 84853: \t,DEBUG_SOURCE_SHADER_COMPILER: null\n 84854: \t,DEBUG_SOURCE_THIRD_PARTY: null\n 84855: \t,DEBUG_SOURCE_APPLICATION: null\n 84856: \t,DEBUG_SOURCE_OTHER: null\n 84857: \t,DEBUG_TYPE_ERROR: null\n 84858: \t,DEBUG_TYPE_DEPRECATED_BEHAVIOR: null\n 84859: \t,DEBUG_TYPE_UNDEFINED_BEHAVIOR: null\n 84860: \t,DEBUG_TYPE_PORTABILITY: null\n 84861: \t,DEBUG_TYPE_PERFORMANCE: null\n 84862: \t,DEBUG_TYPE_OTHER: null\n 84863: \t,DEBUG_TYPE_MARKER: null\n 84864: \t,DEBUG_TYPE_PUSH_GROUP: null\n 84865: \t,DEBUG_TYPE_POP_GROUP: null\n 84866: \t,DEBUG_SEVERITY_NOTIFICATION: null\n 84867: \t,MAX_DEBUG_GROUP_STACK_DEPTH: null\n 84868: \t,DEBUG_GROUP_STACK_DEPTH: null\n 84869  \t,BUFFER: null\n 84870  \t,SHADER: null\n .....\n 84873  \t,SAMPLER: null\n 84874  \t,MAX_LABEL_LENGTH: null\n 84875: \t,MAX_DEBUG_MESSAGE_LENGTH: null\n 84876: \t,MAX_DEBUG_LOGGED_MESSAGES: null\n 84877: \t,DEBUG_LOGGED_MESSAGES: null\n 84878: \t,DEBUG_SEVERITY_HIGH: null\n 84879: \t,DEBUG_SEVERITY_MEDIUM: null\n 84880: \t,DEBUG_SEVERITY_LOW: null\n 84881: \t,DEBUG_OUTPUT: null\n 84882: \t,CONTEXT_FLAG_DEBUG_BIT: null\n 84883  \t,STACK_OVERFLOW: null\n 84884  \t,STACK_UNDERFLOW: null\n 84885: \t,__class__: lime_graphics_opengl_ext_KHR_$debug\n 84886  };\n 84887  var lime_graphics_utils_ImageCanvasUtil = function() { };\n .....\n 97291  lime_utils_Log.__name__ = [\"lime\",\"utils\",\"Log\"];\n 97292  lime_utils_Log.level = null;\n 97293: lime_utils_Log.debug = function(message,info) {\n 97294  \tif(lime_utils_Log.level >= 4) {\n 97295: \t\tconsole.debug(\"[\" + info.className + \"] \" + message);\n 97296  \t}\n 97297  };\n .....\n 97621  mphx_utils_ServerError.CorruptData.__enum__ = mphx_utils_ServerError;\n 97622  mphx_utils_ServerError.Other = function(reason) { var $x = [\"Other\",1,reason]; $x.__enum__ = mphx_utils_ServerError; $x.toString = $estr; return $x; };\n 97623: var mphx_utils__$Log_DebugLevel_$Impl_$ = {};\n 97624: $hxClasses[\"mphx.utils._Log.DebugLevel_Impl_\"] = mphx_utils__$Log_DebugLevel_$Impl_$;\n 97625: mphx_utils__$Log_DebugLevel_$Impl_$.__name__ = [\"mphx\",\"utils\",\"_Log\",\"DebugLevel_Impl_\"];\n 97626: mphx_utils__$Log_DebugLevel_$Impl_$.value = function(index) {\n 97627  \treturn 1 << index;\n 97628  };\n .....\n 97654  \t\tmphx_utils_Log.usePrintLn = false;\n 97655  \t\thaxe_Log.trace(\"Can't use print line on non sys targets.\",{ fileName : \"Log.hx\", lineNumber : 40, className : \"mphx.utils.Log\", methodName : \"message\"});\n 97656: \t} else if((mphx_utils_Log.debugLevel & level) != 0) {\n 97657  \t\thaxe_Log.trace(l + location + message,{ fileName : \"Log.hx\", lineNumber : 45, className : \"mphx.utils.Log\", methodName : \"message\"});\n 97658  \t}\n .....\n 114108  openfl__$internal_stage3D_GLUtils.__name__ = [\"openfl\",\"_internal\",\"stage3D\",\"GLUtils\"];\n 114109  openfl__$internal_stage3D_GLUtils.CheckGLError = function() {\n 114110: \tif(!openfl__$internal_stage3D_GLUtils.debug) {\n 114111  \t\treturn;\n 114112  \t}\n .....\n 114613  };\n 114614  openfl__$internal_stage3D_opengl_GLContext3D.setEnableErrorChecking = function(value) {\n 114615: \topenfl__$internal_stage3D_GLUtils.debug = value;\n 114616  };\n 114617  openfl__$internal_stage3D_opengl_GLContext3D.setProgram = function(context,program) {\n .....\n 115887  \t\t}\n 115888  \t}\n 115889: \tif(openfl__$internal_stage3D_GLUtils.debug) {\n 115890  \t\trenderer.gl.__context.getError();\n 115891  \t}\n .....\n 127711  \t\t\t\t}\n 127712  \t\t\t}\n 127713: \t\t\tif(openfl__$internal_stage3D_GLUtils.debug) {\n 127714  \t\t\t\trenderer.gl.__context.getError();\n 127715  \t\t\t}\n .....\n 137140  var Class = $hxClasses[\"Class\"] = { __name__ : [\"Class\"]};\n 137141  var Enum = { };\n 137142: haxe_Resource.content = [{ name : \"__ASSET__:bitmap_flixel_system_debug_stats__Stats_GraphicMaximizeButton\", data : \"aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFvQUFBQUtDQVlBQUFDTk1zKzlBQUFBQm1KTFIwUUEvd0QvQVArZ3ZhZVRBQUFBQ1hCSVdYTUFBQUIyQUFBQWRnRk9leVlJQUFBQUIzUkpUVVVIM2dNSkNSOFVCaGtEeVFBQUFFOUpSRUZVR05PdGtFRVN3REFJQW92Ly8vUDJvb2FhOUJaUFpvQXdxd0NlTlpMVUQ5ZkNIVzc2VFkyZmR3MklVOVVwZUhlVU5kMVlBRm5kTUFGUW1ndTV0eGFWM202VDV5bW9EL0gwT3ZrTFNBOUI4bis0Y2pvQUFBQUFTVVZPUks1Q1lJST0\"},{ name : \"__ASSET__:bitmap_flixel_system_debug_GraphicArrowRight\", data : \"aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQUQ1SlJFRlVlTnBpK1AvLy96SWdqZ1JpQmtJWVJNQUFRVTNJaWdscXdxWVlweVo4aWpFME1mNEhheUVLTENmSlpJcmRURlJvRUJYT1JNY2dRSUFCQU1xdGZ6aUhGZ2JoQUFBQUFFbEZUa1N1UW1DQw\"},{ name : \"__ASSET__:bitmap_flixel_system_GraphicLogo\", data : \"aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUdRQUFBQmtDQVlBQUFCdzRwVlVBQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBS1QybERRMUJRYUc5MGIzTm9iM0FnU1VORElIQnliMlpwYkdVQUFIamFuVk5uVkZQcEZqMzMzdlJDUzRpQWxFdHZVaFVJSUZKQ2k0QVVrU1lxSVFrUVNvZ2hvZGtWVWNFUlJVVUVHOGlnaUFPT2pvQ01GVkVzRElvSzJBZmtJYUtPZzZPSWlzcjc0WHVqYTlhODkrYk4vclhYUHVlczg1Mnp6d2ZBQ0F5V1NETlJOWUFNcVVJZUVlQ0R4OFRHNGVRdVFJRUtKSEFBRUFpelpDRnovU01CQVBoK1BEd3JJc0FIdmdBQmVOTUxDQURBVFp2QU1CeUgvdy9xUXBsY0FZQ0VBY0Iwa1RoTENJQVVBRUI2amtLbUFFQkdBWUNkbUNaVEFLQUVBR0RMWTJMakFGQXRBR0FuZitiVEFJQ2QrSmw3QVFCYmxDRVZBYUNSQUNBVFpZaEVBR2c3QUt6UFZvcEZBRmd3QUJSbVM4UTVBTmd0QURCSlYyWklBTEMzQU1ET0VBdXlBQWdNQURCUmlJVXBBQVI3QUdESUl5TjRBSVNaQUJSRzhsYzg4U3V1RU9jcUFBQjRtYkk4dVNRNVJZRmJDQzF4QjFkWExoNG96a2tYS3hRMllRSmhta0F1d25tWkdUS0JOQS9nODh3QUFLQ1JGUkhnZy9QOWVNNE9yczdPTm82MkRsOHQ2cjhHL3lKaVl1UCs1YytyY0VBQUFPRjBmdEgrTEMrekdvQTdCb0J0L3FJbDdnUm9YZ3VnZGZlTFpySVBRTFVBb09uYVYvTncrSDQ4UEVXaGtMbloyZVhrNU5oS3hFSmJZY3BYZmY1bndsL0FWLzFzK1g0OC9QZjE0TDdpSklFeVhZRkhCUGpnd3N6MFRLVWN6NUlKaEdMYzVvOUgvTGNMLy93ZDB5TEVTV0s1V0NvVTQxRVNjWTVFbW96ek1xVWlpVUtTS2NVbDB2OWs0dDhzK3dNKzN6VUFzR28rQVh1UkxhaGRZd1AyU3ljUVdIVEE0dmNBQVBLN2I4SFVLQWdEZ0dpRDRjOTMvKzgvL1VlZ0pRQ0Faa21TY1FBQVhrUWtMbFRLc3ovSENBQUFSS0NCS3JCQkcvVEJHQ3pBQmh6QkJkekJDL3hnTm9SQ0pNVENRaEJDQ21TQUhISmdLYXlDUWlpR3piQWRLbUF2MUVBZE5NQlJhSWFUY0E0dXdsVzREajF3RC9waENKN0JLTHlCQ1FSQnlBZ1RZU0hhaUFGaWlsZ2pqZ2dYbVlYNEljRklCQktMSkNESmlCUlJJa3VSTlVneFVvcFVJRlZJSGZJOWNnSTVoMXhHdXBFN3lBQXlndnlHdkVjeGxJR3lVVDNVRExWRHVhZzNHb1JHb2d2UVpIUXhtbzhXb0p2UWNyUWFQWXcyb2VmUXEyZ1AybzgrUThjd3dPZ1lCelBFYkRBdXhzTkNzVGdzQ1pOank3RWlyQXlyeGhxd1Zxd0R1NG4xWTgreGR3UVNnVVhBQ1RZRWQwSWdZUjVCU0ZoTVdFN1lTS2dnSENRMEVkb0pOd2tEaEZIQ0p5S1RxRXUwSnJvUitjUVlZakl4aDFoSUxDUFdFbzhUTHhCN2lFUEVOeVFTaVVNeUo3bVFBa214cEZUU0V0SkcwbTVTSStrc3FaczBTQm9qazhuYVpHdXlCem1VTENBcnlJWGtuZVRENURQa0crUWg4bHNLbldKQWNhVDRVK0lvVXNwcVNobmxFT1UwNVFabG1ESkJWYU9hVXQyb29WUVJOWTlhUXEyaHRsS3ZVWWVvRXpSMW1qbk5neFpKUzZXdG9wWFRHbWdYYVBkcHIraDB1aEhkbFI1T2w5Qlgwc3ZwUitpWDZBUDBkd3dOaGhXRHg0aG5LQm1iR0FjWVp4bDNHSytZVEtZWjA0c1p4MVF3TnpIcm1PZVpENWx2VlZncXRpcDhGWkhLQ3BWS2xTYVZHeW92VkttcXBxcmVxZ3RWODFYTFZJK3BYbE45cmtaVk0xUGpxUW5VbHF0VnFwMVE2MU1iVTJlcE82aUhxbWVvYjFRL3BINVovWWtHV2NOTXcwOURwRkdnc1YvanZNWWdDMk1aczNnc0lXc05xNFoxZ1RYRUpySE4yWHgyS3J1WS9SMjdpejJxcWFFNVF6TktNMWV6VXZPVVpqOEg0NWh4K0p4MFRnbm5LS2VYODM2SzNoVHZLZUlwRzZZMFRMa3haVnhycXBhWGxsaXJTS3RScTBmcnZUYXU3YWVkcHIxRnUxbjdnUTVCeDBvblhDZEhaNC9PQlozblU5bFQzYWNLcHhaTlBUcjFyaTZxYTZVYm9idEVkNzl1cCs2WW5yNWVnSjVNYjZmZWViM24raHg5TC8xVS9XMzZwL1ZIREZnR3N3d2tCdHNNemhnOHhUVnhiendkTDhmYjhWRkRYY05BUTZWaGxXR1g0WVNSdWRFOG85VkdqVVlQakduR1hPTWs0MjNHYmNhakpnWW1JU1pMVGVwTjdwcFNUYm1tS2FZN1REdE14ODNNemFMTjFwazFtejB4MXpMbm0rZWIxNXZmdDJCYWVGb3N0cWkydUdWSnN1UmFwbG51dHJ4dWhWbzVXYVZZVlZwZHMwYXRuYTBsMXJ1dHU2Y1JwN2xPazA2cm50Wm53N0R4dHNtMnFiY1pzT1hZQnR1dXRtMjJmV0ZuWWhkbnQ4V3V3KzZUdlpOOXVuMk4vVDBIRFlmWkRxc2RXaDErYzdSeUZEcFdPdDZhenB6dVAzM0Y5SmJwTDJkWXp4RFAyRFBqdGhQTEtjUnBuVk9iMDBkbkYyZTVjNFB6aUl1SlM0TExMcGMrTHBzYnh0M0l2ZVJLZFBWeFhlRjYwdldkbTdPYnd1Mm8yNi91TnU1cDdvZmNuOHcwbnltZVdUTnowTVBJUStCUjVkRS9DNStWTUd2ZnJINVBRMCtCWjdYbkl5OWpMNUZYcmRld3Q2VjNxdmRoN3hjKzlqNXluK00rNHp3MzNqTGVXVi9NTjhDM3lMZkxUOE52bmwrRjMwTi9JLzlrLzNyLzBRQ25nQ1VCWndPSmdVR0JXd0w3K0hwOEliK09QenJiWmZheTJlMUJqS0M1UVJWQmo0S3RndVhCclNGb3lPeVFyU0gzNTVqT2tjNXBEb1ZRZnVqVzBBZGg1bUdMdzM0TUo0V0hoVmVHUDQ1d2lGZ2EwVEdYTlhmUjNFTnozMFQ2UkpaRTNwdG5NVTg1cnkxS05TbytxaTVxUE5vM3VqUzZQOFl1WmxuTTFWaWRXRWxzU3h3NUxpcXVObTVzdnQvODdmT0g0cDNpQytON0Y1Z3Z5RjF3ZWFIT3d2U0ZweGFwTGhJc09wWkFUSWhPT0pUd1FSQXFxQmFNSmZJVGR5V09Dbm5DSGNKbklpL1JOdEdJMkVOY0toNU84a2dxVFhxUzdKRzhOWGtreFRPbExPVzVoQ2Vwa0x4TURVemRtenFlRnBwMklHMHlQVHE5TVlPU2taQnhRcW9oVFpPMlorcG41bVoyeTZ4bGhiTCt4VzZMdHk4ZWxRZkphN09RckFWWkxRcTJRcWJvVkZvbzF5b0hzbWRsVjJhL3pZbktPWmFybml2TjdjeXp5dHVRTjV6dm4vL3RFc0lTNFpLMnBZWkxWeTBkV09hOXJHbzVzanh4ZWRzSzR4VUZLNFpXQnF3OHVJcTJLbTNWVDZ2dFY1ZXVmcjBtZWsxcmdWN0J5b0xCdFFGcjZ3dFZDdVdGZmV2YzErMWRUMWd2V2QrMVlmcUduUnMrRlltS3JoVGJGNWNWZjlnbzNIamxHNGR2eXIrWjNKUzBxYXZFdVdUUFp0Sm02ZWJlTFo1YkRwYXFsK2FYRG00TjJkcTBEZDlXdE8zMTlrWGJMNWZOS051N2c3WkR1YU8vUExpOFphZkp6czA3UDFTa1ZQUlUrbFEyN3RMZHRXSFgrRzdSN2h0N3ZQWTA3TlhiVzd6My9UN0p2dHRWQVZWTjFXYlZaZnRKKzdQM1A2NkpxdW40bHZ0dFhhMU9iWEh0eHdQU0EvMEhJdzYyMTduVTFSM1NQVlJTajlZcjYwY094eCsrL3AzdmR5ME5OZzFWalp6RzRpTndSSG5rNmZjSjMvY2VEVHJhZG94N3JPRUgweDkySFdjZEwycENtdkthUnB0VG12dGJZbHU2VDh3KzBkYnEzbnI4UjlzZkQ1dzBQRmw1U3ZOVXlXbmE2WUxUazJmeXo0eWRsWjE5Zmk3NTNHRGJvclo3NTJQTzMyb1BiKys2RUhUaDBrWC9pK2M3dkR2T1hQSzRkUEt5MitVVFY3aFhtcTg2WDIzcWRPbzgvcFBUVDhlN25MdWFycmxjYTdudWVyMjFlMmIzNlJ1ZU44N2Q5TDE1OFJiLzF0V2VPVDNkdmZONmIvZkY5L1hmRnQxK2NpZjl6c3U3MlhjbjdxMjhUN3hmOUVEdFFkbEQzWWZWUDF2KzNOanYzSDlxd0hlZzg5SGNSL2NHaFlQUC9wSDFqdzlEQlkrWmo4dUdEWWJybmpnK09UbmlQM0w5NmZ5blE4OWt6eWFlRi82aS9zdXVGeFl2ZnZqVjY5Zk8wWmpSb1pmeWw1Ty9iWHlsL2VyQTZ4bXYyOGJDeGg2K3lYZ3pNVjcwVnZ2dHdYZmNkeDN2bzk4UFQrUjhJSDhvLzJqNXNmVlQwS2Y3a3htVGsvOEVBNWp6L0dNekxkc0FBQUFnWTBoU1RRQUFlaVVBQUlDREFBRDUvd0FBZ09rQUFIVXdBQURxWUFBQU9wZ0FBQmR2a2wvRlJnQUFCTTFKUkVGVWVOcnMyOCtMRzJVWXdQSFhabTZDdVhrMGRFMFRzVCtTbVQxb2Q1Rmsrd3ZwbXRHYmlFaE9YbFZRTDE0Q25rdjNYRVFESG9SQ1llbXBiS21kcE10U3dVejIxUE1jUlBCU2dwQmxZVWQ0UEd5em1VMDJ1L01tNzQvbm1mZDk0ZmtIOHVHYk4rL2tIUVpkRDVSTXgydkRqbHRnUkJjczNjanZsUnJ0dmJJUE1vY3BBK2w2QUIxM0FGMnZCYjNsUEMwSXZ6VXMrUVBaR09wQkNNR29odEFMY2d5bTJzU0dNU3o1emIyeUg2bUV3QUV5aG9rd3dPaUV3QVdTaEhubTFsUkQ3QmNidGIyU3Y2c1RBaWZJR0NaUUFiTmZiTlNHNVVhQUFRSTNTQkptMjYySS8ycjZxSUlOZ2dhSTREUE0vdm5iQlJWbmlleURMQWhEQVlJbUNPY1pSdGRad2l5UUZEQVVJZWlEekRoY0RrdCtreUpFZGtCZXpSL0JsYWh6NjJaRUZTSlRJTHRCQmZKYmIwTitzd2pQcjkyMElCZ3cyTllTc0swbDhpZ3NTeGhaUUdGWnc2Q093cktJa1p4N1gzeGdRV1RPNXRQTHFURW9vcEFDYVQrOXhBVkJFWVdaZ0VFSmhabUNRUVdGbVlSQkFZV1pob0VkaFptSWdSbUZtWXFCRllWQnh3MU14UmpORDkrOGp3amttVnN6R1dNMG4vL280UUJoakRIb2VHMlRNVENoSElMMGx2T3YvaEkxRmdNSlNqVCtIN3BiL1ZvSHhzYnZGOUZnNkVZWmx2emoxMmtQNzlpcXcyZytlUWNkaGthVWFQcmFqTUlOSGpPR0RwU3BPc2FWZUpzV1F6bEtOUHR5Mlk1YmtMbkJVOEpRaFRLemp2RUc3N1VzeGpUSzM5VjF0WFVjZ1J6K0RJNHN4dkc1L1BPN3dsSE9yR084d1ZjL3RoaVNVVXIrTHQrTGp3S2VjMlVKUXpUS2ZySEI5MUlTYkxzVml5RUhaVmh1QlBPOUh0ejFOaXlHZUJUdU9pWTIrSUhGRUljeWR4Mko1MXhOaXlFT1plNDZKamI0M2RNZ0JoMFhLbzh2R0lmQmk3SndIV21lYzVtT3dZTWlwSTdFYzY2MnhUaDkzdnF0UFBPU3Q3QTZabTN3Rm9QdjVyM1FPaWFmYzFrTVBoVGhkU1RYeTA0MXNoaDhLRkxxR0sxTHplZEI3bUhGZnVncFVSNnRYNWRYeDlVMXFLMnVBVlErZlFFV0pjVTh1UTI1UC8rUkI3SmFoMkIxRGNDaXBNVjRDVTRZZzlPUGE5THFTSTVGU1lFUnh1RDA0a0JxSGNrcGZ2WEFBcHlHTVJxUmxaeFVoMFhod0JCZHlhdzZMRXBLREpHVm5GV0hSVW1KSWFxU05IVVlqWklXUTBRbFBIVVlpY0tMc1dnbHZIV1loUEphOENVL3hpS1Z6RnRIY3M1Ly8wczJNVHJmemdleFNDV0wxSkdjTis5OFp6RVdyVVJFSFZsRUVZWVJ4cERyeFp2SzY4Z1Npa2lNMGJBK0ZKVFhrUVVVR1JoT0dFTXVQR2hycVlNeWlpeU1WSlhJcklNaWlteU1NeXVSWFFjbEZCVVlwMWFpcW83a3ZQSFRaOFpqekt4RVpSMmplZS9EZitIMVg5ZU54aml4RWgxMVlFVFJoVEZWaVk0NnNLSG94RGlxUkhjZFdGQXdZQnlCNks1RE53b1dEQ2VNQVUwZHVsQXdZVGhoREtqcVVJMkNEZU1RQkNIR2FKWS8rVXZhblMrTUdPaEJaRjNFdzRwQkFrUTB5cm50dTJneHlJQ0lRam0zY3g4MUJpbVFSVkVvWUpBRG1SZUZDZ1pKRUY0VVNoaGtRZEtpVU1NZ0RYTFdSVHlLR09SQlpxRlF4Y2dFeUNRS1pZek1nSXhRcUdOa0JtU2xEdTJWYTFCZ2ZTamt3b08yQmRFMWRRaXVyc0gwL2RnK1ZKeGVIRmdRM1JBVHkrbkhOV293ak5oWFU3UmFoeWJ2TFg1S01DekxFSk1yMS91dm1Rc1BJZ3N5LzFmVFlLVU9MZEh2MjJPR1laZ2hsbTlBbmtsY0dHRVlRb3dOMlJESFZnL3lUaGkzY21FOHNDQW5uU1YwTFNRd0RNTlBXSzBReUdBWTlyT0V0cVhwMVAvL0FOd29yczhWOE1oV0FBQUFBRWxGVGtTdVFtQ0M\"},{ name : \"__ASSET__:bitmap_flixel_addons_transition_GraphicTransTileDiamond\", data : \"aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQWlBQUFBQWdDQVlBQUFBckZzTTFBQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQXlKcFZGaDBXRTFNT21OdmJTNWhaRzlpWlM1NGJYQUFBQUFBQUR3L2VIQmhZMnRsZENCaVpXZHBiajBpNzd1L0lpQnBaRDBpVnpWTk1FMXdRMlZvYVVoNmNtVlRlazVVWTNwcll6bGtJajgrSUR4NE9uaHRjRzFsZEdFZ2VHMXNibk02ZUQwaVlXUnZZbVU2Ym5NNmJXVjBZUzhpSUhnNmVHMXdkR3M5SWtGa2IySmxJRmhOVUNCRGIzSmxJRFV1TXkxak1ERXhJRFkyTGpFME5UWTJNU3dnTWpBeE1pOHdNaTh3TmkweE5EbzFOam95TnlBZ0lDQWdJQ0FnSWo0Z1BISmtaanBTUkVZZ2VHMXNibk02Y21SbVBTSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHhPVGs1THpBeUx6SXlMWEprWmkxemVXNTBZWGd0Ym5NaklqNGdQSEprWmpwRVpYTmpjbWx3ZEdsdmJpQnlaR1k2WVdKdmRYUTlJaUlnZUcxc2JuTTZlRzF3UFNKb2RIUndPaTh2Ym5NdVlXUnZZbVV1WTI5dEwzaGhjQzh4TGpBdklpQjRiV3h1Y3pwNGJYQk5UVDBpYUhSMGNEb3ZMMjV6TG1Ga2IySmxMbU52YlM5NFlYQXZNUzR3TDIxdEx5SWdlRzFzYm5NNmMzUlNaV1k5SW1oMGRIQTZMeTl1Y3k1aFpHOWlaUzVqYjIwdmVHRndMekV1TUM5elZIbHdaUzlTWlhOdmRYSmpaVkpsWmlNaUlIaHRjRHBEY21WaGRHOXlWRzl2YkQwaVFXUnZZbVVnVUdodmRHOXphRzl3SUVOVE5pQW9WMmx1Wkc5M2N5a2lJSGh0Y0UxTk9rbHVjM1JoYm1ObFNVUTlJbmh0Y0M1cGFXUTZNek5HUmtFd05FSXhPRVV3TVRGRk5EazVRVGRDUlVVME56Z3lPVFkyT0RjaUlIaHRjRTFOT2tSdlkzVnRaVzUwU1VROUluaHRjQzVrYVdRNk16TkdSa0V3TkVNeE9FVXdNVEZGTkRrNVFUZENSVVUwTnpneU9UWTJPRGNpUGlBOGVHMXdUVTA2UkdWeWFYWmxaRVp5YjIwZ2MzUlNaV1k2YVc1emRHRnVZMlZKUkQwaWVHMXdMbWxwWkRvek0wWkdRVEEwT1RFNFJUQXhNVVUwT1RsQk4wSkZSVFEzT0RJNU5qWTROeUlnYzNSU1pXWTZaRzlqZFcxbGJuUkpSRDBpZUcxd0xtUnBaRG96TTBaR1FUQTBRVEU0UlRBeE1VVTBPVGxCTjBKRlJUUTNPREk1TmpZNE55SXZQaUE4TDNKa1pqcEVaWE5qY21sd2RHbHZiajRnUEM5eVpHWTZVa1JHUGlBOEwzZzZlRzF3YldWMFlUNGdQRDk0Y0dGamEyVjBJR1Z1WkQwaWNpSS9QckhzdVhJQUFBTHRTVVJCVkhqYTdOakJidVVnRUVUUk1QLy96NDRpelNhenlpakdYTGZPbGJLSnpLTUZEVlRWdXE3ckF3QmV4cjhYMXpvMDc4ZERkZnp2UmIwT3pYdFhIWGMvVE92UXZEK3Q0K21IZUIyYTl4dC8zR01BZnZGSVhJZm1QWEdCWHpkOTg4UmpmQjJhdDFKN1plOHF2VnVZa3dBQmNQc0ZkaDJhOThsTDlkcjA3YzdmT2pXMnNuYVYzcW1jblp3SUlVQ0FkNHNBQ1VURFBWZlNnMHJ0bGIycjlHN3U4UzlBZ0FEdkZSK24zVnZGdlZiY2UyVnNaZTBxdlZNNU8wUUlBUUxjZW9GSUlCcnV1WkllVkdxdjdGMmxkejMrQkFnd1NueWNkbThWOTFweDc1V3hsYldyOUU3bDdCQWhCQWh3NndVaWdXaTQ1MHA2VUttOXNuZVYzdlg0Z3dEQktQRngycjFWM0d2RnZWZkdWdGF1MGp1VnMwT0VnQURCclJlSUJLTGhuaXZwUWFYMnl0NVZldGZqRHdJRW84VEhhZmRXY2E4VjkxNFpXMW03U3U5VXpnNFJBZ0lFdDE0Z0VvaUdlNjZrQjVYYUszdFg2VjJQUDBDQWpCSWZwOTFieGIxVzNIdGxiR1h0S3IxVE9UdEVDRUNBM0hxQlNDQWE3cm1TSGxScXIreGRwWGM5L2dBQk1rcDhuSFp2RmZkYWNlK1ZzWlcxcS9STzVld1FJUUFCY3VzRklvRm91T2RLZWxDcHZiSjNsZDcxK0FNWUpVQUFBQUFCOGpqcjc5K0plWC95dnlmbWZhS085ZENZeW0rc1FYdFg2ZDNDbkFBSWtCR3NRNWZwT25TcHIwM2Y3dnl0VTJNcmExZnBuY3JaSVlJQUFtU1VDSkhBTk5LREhYVklZT2IwTHZFQkVDQjR1WXVVd1BUSFZ0YXUwanVWczBNRUFRVElLQkVpZ1dta0J6dnFrTURNNlYzaUF5QkE4SElYS1lIcGo2MnNYYVYzS21lSENBSUJnbEVpUkFMVFNBOTIxQ0dCbWRPN3hBY0lFT0RsTGxJQzB4OWJXYnRLNzFUT0RoRUVBZ1NqUklnRXBwRWU3S2hEQWpPbmQ0a1BFQ0RBeTEya0JLWS90ckoybGQ2cG5CMGlpQUFCUm9rUUNVd2pQZGhSaHdSbVR1OFNId1FJZ0plN1NBbE1mMnhsN1NxOVV6azdSQkFCQW93U0lSS1lSbnF3b3c0SnpKemVKVDRJRUFBdmQ1RVNtUDdZeXRwVmVxZHlkbklpaUFBQjhKc0xUQUxUU0E5MjFDR0JtZE83T2ZIeHhhY0FBd0RrMWZzODNpRUEyd0FBQUFCSlJVNUVya0pnZ2c9PQ\"},{ name : \"__ASSET__:bitmap_flixel_tile_GraphicAutoAlt\", data : \"aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUlBQUFBQUlDQU1BQUFBR0F3ZE1BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBS1QybERRMUJRYUc5MGIzTm9iM0FnU1VORElIQnliMlpwYkdVQUFIamFuVk5uVkZQcEZqMzMzdlJDUzRpQWxFdHZVaFVJSUZKQ2k0QVVrU1lxSVFrUVNvZ2hvZGtWVWNFUlJVVUVHOGlnaUFPT2pvQ01GVkVzRElvSzJBZmtJYUtPZzZPSWlzcjc0WHVqYTlhODkrYk4vclhYUHVlczg1Mnp6d2ZBQ0F5V1NETlJOWUFNcVVJZUVlQ0R4OFRHNGVRdVFJRUtKSEFBRUFpelpDRnovU01CQVBoK1BEd3JJc0FIdmdBQmVOTUxDQURBVFp2QU1CeUgvdy9xUXBsY0FZQ0VBY0Iwa1RoTENJQVVBRUI2amtLbUFFQkdBWUNkbUNaVEFLQUVBR0RMWTJMakFGQXRBR0FuZitiVEFJQ2QrSmw3QVFCYmxDRVZBYUNSQUNBVFpZaEVBR2c3QUt6UFZvcEZBRmd3QUJSbVM4UTVBTmd0QURCSlYyWklBTEMzQU1ET0VBdXlBQWdNQURCUmlJVXBBQVI3QUdESUl5TjRBSVNaQUJSRzhsYzg4U3V1RU9jcUFBQjRtYkk4dVNRNVJZRmJDQzF4QjFkWExoNG96a2tYS3hRMllRSmhta0F1d25tWkdUS0JOQS9nODh3QUFLQ1JGUkhnZy9QOWVNNE9yczdPTm82MkRsOHQ2cjhHL3lKaVl1UCs1YytyY0VBQUFPRjBmdEgrTEMrekdvQTdCb0J0L3FJbDdnUm9YZ3VnZGZlTFpySVBRTFVBb09uYVYvTncrSDQ4UEVXaGtMbloyZVhrNU5oS3hFSmJZY3BYZmY1bndsL0FWLzFzK1g0OC9QZjE0TDdpSklFeVhZRkhCUGpnd3N6MFRLVWN6NUlKaEdMYzVvOUgvTGNMLy93ZDB5TEVTV0s1V0NvVTQxRVNjWTVFbW96ek1xVWlpVUtTS2NVbDB2OWs0dDhzK3dNKzN6VUFzR28rQVh1UkxhaGRZd1AyU3ljUVdIVEE0dmNBQVBLN2I4SFVLQWdEZ0dpRDRjOTMvKzgvL1VlZ0pRQ0Faa21TY1FBQVhrUWtMbFRLc3ovSENBQUFSS0NCS3JCQkcvVEJHQ3pBQmh6QkJkekJDL3hnTm9SQ0pNVENRaEJDQ21TQUhISmdLYXlDUWlpR3piQWRLbUF2MUVBZE5NQlJhSWFUY0E0dXdsVzREajF3RC9waENKN0JLTHlCQ1FSQnlBZ1RZU0hhaUFGaWlsZ2pqZ2dYbVlYNEljRklCQktMSkNESmlCUlJJa3VSTlVneFVvcFVJRlZJSGZJOWNnSTVoMXhHdXBFN3lBQXlndnlHdkVjeGxJR3lVVDNVRExWRHVhZzNHb1JHb2d2UVpIUXhtbzhXb0p2UWNyUWFQWXcyb2VmUXEyZ1AybzgrUThjd3dPZ1lCelBFYkRBdXhzTkNzVGdzQ1pOank3RWlyQXlyeGhxd1Zxd0R1NG4xWTgreGR3UVNnVVhBQ1RZRWQwSWdZUjVCU0ZoTVdFN1lTS2dnSENRMEVkb0pOd2tEaEZIQ0p5S1RxRXUwSnJvUitjUVlZakl4aDFoSUxDUFdFbzhUTHhCN2lFUEVOeVFTaVVNeUo3bVFBa214cEZUU0V0SkcwbTVTSStrc3FaczBTQm9qazhuYVpHdXlCem1VTENBcnlJWGtuZVRENURQa0crUWg4bHNLbldKQWNhVDRVK0lvVXNwcVNobmxFT1UwNVFabG1ESkJWYU9hVXQyb29WUVJOWTlhUXEyaHRsS3ZVWWVvRXpSMW1qbk5neFpKUzZXdG9wWFRHbWdYYVBkcHIraDB1aEhkbFI1T2w5Qlgwc3ZwUitpWDZBUDBkd3dOaGhXRHg0aG5LQm1iR0FjWVp4bDNHSytZVEtZWjA0c1p4MVF3TnpIcm1PZVpENWx2VlZncXRpcDhGWkhLQ3BWS2xTYVZHeW92VkttcXBxcmVxZ3RWODFYTFZJK3BYbE45cmtaVk0xUGpxUW5VbHF0VnFwMVE2MU1iVTJlcE82aUhxbWVvYjFRL3BINVovWWtHV2NOTXcwOURwRkdnc1YvanZNWWdDMk1aczNnc0lXc05xNFoxZ1RYRUpySE4yWHgyS3J1WS9SMjdpejJxcWFFNVF6TktNMWV6VXZPVVpqOEg0NWh4K0p4MFRnbm5LS2VYODM2SzNoVHZLZUlwRzZZMFRMa3haVnhycXBhWGxsaXJTS3RScTBmcnZUYXU3YWVkcHIxRnUxbjdnUTVCeDBvblhDZEhaNC9PQlozblU5bFQzYWNLcHhaTlBUcjFyaTZxYTZVYm9idEVkNzl1cCs2WW5yNWVnSjVNYjZmZWViM24raHg5TC8xVS9XMzZwL1ZIREZnR3N3d2tCdHNNemhnOHhUVnhiendkTDhmYjhWRkRYY05BUTZWaGxXR1g0WVNSdWRFOG85VkdqVVlQakduR1hPTWs0MjNHYmNhakpnWW1JU1pMVGVwTjdwcFNUYm1tS2FZN1REdE14ODNNemFMTjFwazFtejB4MXpMbm0rZWIxNXZmdDJCYWVGb3N0cWkydUdWSnN1UmFwbG51dHJ4dWhWbzVXYVZZVlZwZHMwYXRuYTBsMXJ1dHU2Y1JwN2xPazA2cm50Wm53N0R4dHNtMnFiY1pzT1hZQnR1dXRtMjJmV0ZuWWhkbnQ4V3V3KzZUdlpOOXVuMk4vVDBIRFlmWkRxc2RXaDErYzdSeUZEcFdPdDZhenB6dVAzM0Y5SmJwTDJkWXp4RFAyRFBqdGhQTEtjUnBuVk9iMDBkbkYyZTVjNFB6aUl1SlM0TExMcGMrTHBzYnh0M0l2ZVJLZFBWeFhlRjYwdldkbTdPYnd1Mm8yNi91TnU1cDdvZmNuOHcwbnltZVdUTnowTVBJUStCUjVkRS9DNStWTUd2ZnJINVBRMCtCWjdYbkl5OWpMNUZYcmRld3Q2VjNxdmRoN3hjKzlqNXluK00rNHp3MzNqTGVXVi9NTjhDM3lMZkxUOE52bmwrRjMwTi9JLzlrLzNyLzBRQ25nQ1VCWndPSmdVR0JXd0w3K0hwOEliK09QenJiWmZheTJlMUJqS0M1UVJWQmo0S3RndVhCclNGb3lPeVFyU0gzNTVqT2tjNXBEb1ZRZnVqVzBBZGg1bUdMdzM0TUo0V0hoVmVHUDQ1d2lGZ2EwVEdYTlhmUjNFTnozMFQ2UkpaRTNwdG5NVTg1cnkxS05TbytxaTVxUE5vM3VqUzZQOFl1WmxuTTFWaWRXRWxzU3h3NUxpcXVObTVzdnQvODdmT0g0cDNpQytON0Y1Z3Z5RjF3ZWFIT3d2U0ZweGFwTGhJc09wWkFUSWhPT0pUd1FSQXFxQmFNSmZJVGR5V09Dbm5DSGNKbklpL1JOdEdJMkVOY0toNU84a2dxVFhxUzdKRzhOWGtreFRPbExPVzVoQ2Vwa0x4TURVemRtenFlRnBwMklHMHlQVHE5TVlPU2taQnhRcW9oVFpPMlorcG41bVoyeTZ4bGhiTCt4VzZMdHk4ZWxRZkphN09RckFWWkxRcTJRcWJvVkZvbzF5b0hzbWRsVjJhL3pZbktPWmFybml2TjdjeXp5dHVRTjV6dm4vL3RFc0lTNFpLMnBZWkxWeTBkV09hOXJHbzVzanh4ZWRzSzR4VUZLNFpXQnF3OHVJcTJLbTNWVDZ2dFY1ZXVmcjBtZWsxcmdWN0J5b0xCdFFGcjZ3dFZDdVdGZmV2YzErMWRUMWd2V2QrMVlmcUduUnMrRlltS3JoVGJGNWNWZjlnbzNIamxHNGR2eXIrWjNKUzBxYXZFdVdUUFp0Sm02ZWJlTFo1YkRwYXFsK2FYRG00TjJkcTBEZDlXdE8zMTlrWGJMNWZOS051N2c3WkR1YU8vUExpOFphZkp6czA3UDFTa1ZQUlUrbFEyN3RMZHRXSFgrRzdSN2h0N3ZQWTA3TlhiVzd6My9UN0p2dHRWQVZWTjFXYlZaZnRKKzdQM1A2NkpxdW40bHZ0dFhhMU9iWEh0eHdQU0EvMEhJdzYyMTduVTFSM1NQVlJTajlZcjYwY094eCsrL3AzdmR5ME5OZzFWalp6RzRpTndSSG5rNmZjSjMvY2VEVHJhZG94N3JPRUgweDkySFdjZEwycENtdkthUnB0VG12dGJZbHU2VDh3KzBkYnEzbnI4UjlzZkQ1dzBQRmw1U3ZOVXlXbmE2WUxUazJmeXo0eWRsWjE5Zmk3NTNHRGJvclo3NTJQTzMyb1BiKys2RUhUaDBrWC9pK2M3dkR2T1hQSzRkUEt5MitVVFY3aFhtcTg2WDIzcWRPbzgvcFBUVDhlN25MdWFycmxjYTdudWVyMjFlMmIzNlJ1ZU44N2Q5TDE1OFJiLzF0V2VPVDNkdmZONmIvZkY5L1hmRnQxK2NpZjl6c3U3MlhjbjdxMjhUN3hmOUVEdFFkbEQzWWZWUDF2KzNOanYzSDlxd0hlZzg5SGNSL2NHaFlQUC9wSDFqdzlEQlkrWmo4dUdEWWJybmpnK09UbmlQM0w5NmZ5blE4OWt6eWFlRi82aS9zdXVGeFl2ZnZqVjY5Zk8wWmpSb1pmeWw1Ty9iWHlsL2VyQTZ4bXYyOGJDeGg2K3lYZ3pNVjcwVnZ2dHdYZmNkeDN2bzk4UFQrUjhJSDhvLzJqNXNmVlQwS2Y3a3htVGsvOEVBNWp6L0dNekxkc0FBQUFnWTBoU1RRQUFlaVVBQUlDREFBRDUvd0FBZ09rQUFIVXdBQURxWUFBQU9wZ0FBQmR2a2wvRlJnQUFBd0JRVEZSRkFBQUFYbDVlQUFBQUF3TURCQVFFQlFVRkJnWUdCd2NIQ0FnSUNRa0pDZ29LQ3dzTERBd01EUTBORGc0T0R3OFBFQkFRRVJFUkVoSVNFeE1URkJRVUZSVVZGaFlXRnhjWEdCZ1lHUmtaR2hvYUd4c2JIQndjSFIwZEhoNGVIeDhmSUNBZ0lTRWhJaUlpSXlNakpDUWtKU1VsSmlZbUp5Y25LQ2dvS1NrcEtpb3FLeXNyTEN3c0xTMHRMaTR1THk4dk1EQXdNVEV4TWpJeU16TXpORFEwTlRVMU5qWTJOemMzT0RnNE9UazVPam82T3pzN1BEdzhQVDA5UGo0K1B6OC9RRUJBUVVGQlFrSkNRME5EUkVSRVJVVkZSa1pHUjBkSFNFaElTVWxKU2twS1MwdExURXhNVFUxTlRrNU9UMDlQVUZCUVVWRlJVbEpTVTFOVFZGUlVWVlZWVmxaV1YxZFhXRmhZV1ZsWldscGFXMXRiWEZ4Y1hWMWRYbDVlWDE5ZllHQmdZV0ZoWW1KaVkyTmpaR1JrWldWbFptWm1aMmRuYUdob2FXbHBhbXBxYTJ0cmJHeHNiVzF0Ym01dWIyOXZjSEJ3Y1hGeGNuSnljM056ZEhSMGRYVjFkbloyZDNkM2VIaDRlWGw1ZW5wNmUzdDdmSHg4ZlgxOWZuNStmMzkvZ0lDQWdZR0Jnb0tDZzRPRGhJU0VoWVdGaG9hR2g0ZUhpSWlJaVltSmlvcUtpNHVMakl5TWpZMk5qbzZPajQrUGtKQ1FrWkdSa3BLU2s1T1RsSlNVbFpXVmxwYVdsNWVYbUppWW1abVptcHFhbTV1Ym5KeWNuWjJkbnA2ZW41K2ZvS0Nnb2FHaG9xS2lvNk9qcEtTa3BhV2xwcWFtcDZlbnFLaW9xYW1wcXFxcXE2dXJyS3lzcmEydHJxNnVyNit2c0xDd3NiR3hzckt5czdPenRMUzB0YlcxdHJhMnQ3ZTN1TGk0dWJtNXVycTZ1N3U3dkx5OHZiMjl2cjYrdjcrL3dNREF3Y0hCd3NMQ3c4UER4TVRFeGNYRnhzYkd4OGZIeU1qSXljbkp5c3JLeTh2THpNek16YzNOenM3T3o4L1AwTkRRMGRIUjB0TFMwOVBUMU5UVTFkWFYxdGJXMTlmWDJOalkyZG5aMnRyYTI5dmIzTnpjM2QzZDN0N2UzOS9mNE9EZzRlSGg0dUxpNCtQajVPVGs1ZVhsNXVibTUrZm42T2pvNmVucDZ1cnE2K3ZyN096czdlM3Q3dTd1NysvdjhQRHc4Zkh4OHZMeTgvUHo5UFQwOWZYMTl2YjI5L2YzK1BqNCtmbjUrdnI2Ky92Ny9QejgvZjM5L3Y3Ky8vLy9Ra3FmSXdBQUFBTjBVazVULy84QTE4b05RUUFBQUhaSlJFRlVlTnJzVTBrU3dDQUlTeGovLzJUcFFSaGJOZHBiTC9VQ1lRa09Dd3dBZ0JBQU9NZ0ViTkt3OG0rTk4vN1pYMnF6MVFNRlBaU0loNHRLbWU5UFhKVy9OTFdYWFJPNzBQZVJIV3Qrdzhmdi8wREorWENhRGw5TWZGNWRIblpDdGNER1RGdldvRDdUYlVjcGIrd0NBQUQvL3dNQXl5QVNLMkFhNkV3QUFBQUFTVVZPUks1Q1lJST0\"},{ name : \"__ASSET__:bitmap_flixel_system_debug_GraphicWatch\", data : \"aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUlHTklVazBBQUhvbEFBQ0Fnd0FBK2Y4QUFJRHBBQUIxTUFBQTZtQUFBRHFZQUFBWGI1SmZ4VVlBQUFEY1NVUkJWSGphakpBaFM4TmhHTVIvZTFGWkdNSmd3U2FyVnNPS1dSSGJtcGo4Qkg0Q205L0JabDJ3R3NSZ0U5Um1GbHcwQ0NKWUxIZG44UDF2KzZ1SUIwOTU3cmk3NStrazRiOG9BTmdGZXhmN0d2c0ZlNHA5Z2oxb3FaTVFhVDlTSXQxSE9vNTBGdWs5MG1Xa2ZoS1N6TVRUU0xlUnVnMFI2VENTSXgwMHUxSUQxb0VIU3ZsWUNMMEJYb0ZodS9NWHNZYzlxamVzQWtkQXQzS3R6cHVSSGlPOVJicUtkRmR2T0krMDFOVG96RjVuYndEakd0c0hkb0JuWUp0U251Yk9peU90Uk9wRk9xM3VGeitkdjhOZUF5YkFNcVZzQVgrSWY4SG5BTlI0d3BRazlwRnhBQUFBQUVsRlRrU3VRbUND\"},{ name : \"__ASSET__:bitmap_flixel_system_debug_GraphicInteractive\", data : \"aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQkhOQ1NWUUlDQWdJZkFoa2lBQUFBQWx3U0ZsekFBQUxFZ0FBQ3hJQjB0MSsvQUFBQUJ4MFJWaDBVMjltZEhkaGNtVUFRV1J2WW1VZ1JtbHlaWGR2Y210eklFTlROdWk4c293QUFBQndTVVJCVkJpVmpaR3hEWUF3REFSZnpNSTYyU0JTT3RaZ0tBWmdBYW9NUVU5SmRSUUprUXVjOE5MTHNuVitGeGFnanFQdEovbUtrdVphaXpxSkFiaXJvNWNjSlYyU1ZqTXJGNXpFQXpockRXL3liOURDeXdpMDhFNlJDelk0NTR4WitBUWJuRkxDTEN6ZWt3UnNneTgyUDZENlFrZUFUREtHQUFBQUFFbEZUa1N1UW1DQw\"},{ name : \"__ASSET__:bitmap_flixel_system_debug_interaction_tools_GraphicMoverTool\", data : \"\"},{ name : \"__ASSET__:bitmap_flixel_system_debug_interaction_tools_GraphicCursorCross\", data : \"aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQkhOQ1NWUUlDQWdJZkFoa2lBQUFBQWx3U0ZsekFBQUxFZ0FBQ3hJQjB0MSsvQUFBQUJaMFJWaDBRM0psWVhScGIyNGdWR2x0WlFBd05TOHlPUzh4TnJ0VlFGa0FBQUFjZEVWWWRGTnZablIzWVhKbEFFRmtiMkpsSUVacGNtVjNiM0pyY3lCRFV6Ym92TEtNQUFBQUxrbEVRVlFZbFdQOC8vOC9BeGJ3bjRHQmdSRmRrQW1iU2x4Z2tDaG1ZWUI0Qmh2QUVHZGh3T0pyaG1FVUdnQjN1Z2NXZXB2bWtRQUFBQUJKUlU1RXJrSmdnZz09\"},{ name : \"__ASSET__:file_flixel_system_VirtualInputData\", data : \"YmFzZSA9IDI2NiA0NiA4NCA4NAp0aHVtYiA9IDI2NiAxMzEgNTIgNTIKYSA9IDAgMCAxMzIgNDUKYiA9IDAgNDYgMTMyIDQ1CmMgPSAwIDkyIDEzMiA0NQpkb3duID0gMCAxMzggMTMyIDQ1CmxlZnQgPSAxMzMgMCAxMzIgNDUKcmlnaHQgPSAxMzMgNDYgMTMyIDQ1CnVwID0gMTMzIDkyIDEzMiA0NQp4ID0gMjY2IDAgMTMyIDQ1CnkgPSAxMzMgMTM4IDEzMiA0NQo\"},{ name : \"__ASSET__:bitmap_flixel_system_GraphicVirtualInput\", data : \"\"},{ name : \"__ASSET__:bitmap_flixel_system_debug_GraphicArrowLeft\", data : \"aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQm1KTFIwUUFBQUFBQUFENVE3dC9BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUIzUkpUVVVIM2dRWkVqQTAzU0hjY2dBQUFFQkpSRUZVR05Oai9QLy9Qd01SSUpLQmdjR1g0Zi8vLy9odzVQLy8vNWY5aHdLaUZPRlNqRlVSdW1LOGlwQVZFMVJFdHNra3U1bXMwTUNyaVpHVUdBUUFzOU5wbXo4SWloRUFBQUFBU1VWT1JLNUNZSUk9\"},{ name : \"__ASSET__:bitmap_flixel_system_debug_GraphicCloseButton\", data : \"aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFnQUFBQUlDQVlBQUFERUQ3NkxBQUFBQkhOQ1NWUUlDQWdJZkFoa2lBQUFBQWx3U0ZsekFBQUFkZ0FBQUhZQlRuc21DQUFBQUJsMFJWaDBVMjltZEhkaGNtVUFkM2QzTG1sdWEzTmpZWEJsTG05eVo1dnVQQm9BQUFCL1NVUkJWQmlWVFkweENzSlFFQVhIYnlTZXdNdWxUV2R2YTZPbGxXSnBDQ0syaWsxT1krY3RRc1lpcS9rREM4dnM3bHZVU3UzVXBVcFdPN1ZDM1RqU3FXVU1EK0dldisxdGlKZDZ5dm95ajl3NzhWQVhLb21SR2JCaW9nY0dBTlNrTm5GNVY0L1IzOVNFMm9hNHF2TjRkdzUzS1lBMzBBRDFQeGJXUUFGOHZwYVlyTldBYU5WMEFBQUFBRWxGVGtTdVFtQ0M\"},{ name : \"__ASSET__:bitmap_flixel_system_debug_GraphicBitmapLog\", data : \"aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQm1KTFIwUUFBQUFBQUFENVE3dC9BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUIzUkpUVVVIM2dRWkV4c2Fka1ZHNHdBQUFFRkpSRUZVR05PVnpjc0pBREFJQk5FdDFUSnl0UFBKS2VSbnhBd3NlSGlnOUJOUW1mRURBU3REUUdXWTRRdStjQWhQN013cytqaU94cDR5dk9ZWkxrRkFIVzZYWUMwODhkcWRBQUFBQUVsRlRrU3VRbUND\"},{ name : \"__ASSET__:bitmap_flixel_system_debug_GraphicStats\", data : \"aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUlHTklVazBBQUhvbEFBQ0Fnd0FBK2Y4QUFJRHBBQUIxTUFBQTZtQUFBRHFZQUFBWGI1SmZ4VVlBQUFBeFNVUkJWSGphWXZ6Ly96OERzWUNKZ1FSQWpPTC9VRXdkaytHbTBkVE5XQlZqdFpvK3ptQWtKUVlCQUFBQS8vOERBTDhIREFscWRHWVJBQUFBQUVsRlRrU3VRbUND\"},{ name : \"__ASSET__:bitmap_flixel_system_debug_GraphicLog\", data : \"aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUlHTklVazBBQUhvbEFBQ0Fnd0FBK2Y4QUFJRHBBQUIxTUFBQTZtQUFBRHFZQUFBWGI1SmZ4VVlBQUFBa1NVUkJWSGphWXZ6Ly96OERzWUFGaVkxUEZ5TzZZc1pSa3dlSHlRQUFBQUQvL3dNQStmWUlMQWhqbnhZQUFBQUFTVVZPUks1Q1lJST0\"},{ name : \"__ASSET__:bitmap_flixel_system_debug__Window_GraphicWindowHandle\", data : \"aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFvQUFBQUtDQVlBQUFDTk1zKzlBQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQUZCSlJFRlVlTnFNandFS0FDQUlBeFgyeWg3b055MmpRa3lwUWJUMGRFU3FTblllRXZoWE5zRE1ZblhlelZHNHdBME5OVlJaSGpLUEgyaDYvNWwxVzBPaXgzTlRFbDFDSjdxS0MvNExraTdBQUQ1WWZydllMZlJQQUFBQUFFbEZUa1N1UW1DQw\"},{ name : \"__ASSET__:bitmap_flixel_system__FlxPreloader_GraphicLogoCorners\", data : \"aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUVBQUFBQkFDQVlBQUFDcWFYSGVBQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQlkxSlJFRlVlTnJrV3d1eW16Z1FsR1Q4d1g1Sk52ZS9UUTYwdFhrdi9tRkFDNjRaMG01TEFwejFPaENxcHJEQnh1NmVuaGtKUnRZWTg2MnhkV1A3eG40MDloM3NIem4yMGRpeHNaTlkwZGlsc2JLeENxd0c4MkQ4M3NDZVg3ZWJoWDFyRHZacVdXTUwyUzhiV3dtT1RXTnZZbDhhKzlyWVg3TC9MTWZiejJ3Yk8yZHljQ2tBQ3JtZ0FTQkZ3QzZ5Ui9BZVNJZ0Jad0lZT0pPQVJDandSZUQ2K1BrTS9sc054OVlDZWlmN055VmdMeGQ5QjYrMzlyZnN2NHNLV2dXY3lmczFlVDRGT3VUOVBnSVFXRWdKQzFCQklZNjhpT20xVVNVWlhIZWhCSnprd0VHQUtoSHZRc0M3a0hRU0FpNEF1b29BcjhuTEtlQkRWR0FEUkRnaTRnSktacy9uNHZWYzNxL1VrVXFBRjVBZllrakNoNUNqM2k4SFNOMzBBQjlDZ0Uwb0FVbXdRa0JKdVVpUHJ5RG1jM205RkNJNkFpcngvZzhnUU1Hci9BdncvcEQ0N2dPYzh2eFFFcFNJQ3ZhbFhKc1Y4Q2J4bndNcFZTYmVMWUVBQkw2WDh5ZUsrMGRCRHdYK0tCRTFPQWdKVUd4YklzQm5VTmEwREI3azlSRkszeGtraGpFK3hMc2h3SDRrZUQrQUNFM0VXc1cwVkI0QW0xWUFMWmMyZzlwK0lQQUhxdmxWSk5iTlNFOC9vZ0QrYm93SXZMWVR4eDBCMTE0STJJZ3RNZ0NxSHp4Q3lWUFpsMVRxbmdteTcxcVdsR1poYjZqOEZZUnRUOGt3eXdUb2lZQVhFZkQxTDRKOGxCZzdrSFF2d0d2NDc1Y0F4b09RMEJHQTRNODB6T1doN2JNOVBsUUZzWE0xNUlRU0JrWWhFbFlaZ01haGJxeld2d0o4MzIvYWdBbzhPSzZDb1R1VFVDTUJPTkJoNzc4YThKakU2R2wwV29FS0NzQjYwaktJRTV3TGxic3hZL2ZmZ1FoV0ErYXVNa0NDeVFMU0x3Zkd2Zm5OeVdBVmxLU0VRc2NCUlVUNmZpS2VUeW1ocGx6QUpGd0pLQlAxZnFvSzRMQ3RZYUtFSkRoSDRLc1pTRDgwTnFnREpGd3R3emNrbWFtSGdROGt3NHBJV0RqeS90UVZFQ01pUmtMbElqYzFwK2oxUGdKOElDRldMbkZuMTgvTSsxWGdIdWFOQXVvQk56dW1Gdis5WWVBQ1NXL29sSGVxT2VER2hpcGc2dU9BS0JFdVVmYm1zREVKRlpQZ1RQcWh4bHhJQ0QybTZ3Z1krOGhxVHZuQXU1bDZQVFl6dkZPRCt3T2tINW9YZE9kY1l2dzg1ZEdnSHhvT3pveDdiaitYSE5BZGMyYittMDlNazQyYmFlSWJzbGtsd1A0cFlFUHZYZVFEcVMvUGFsTUZoR3lPS3Jqck8zSXpCODBLdm51czdoTGVueklwc2NmbmQ2cDNpVENZaStkakpEZ2t3TTI4SW9SYTdib2NNR2NWaE1CamE1M3JYZ1NJbUVNSkRMWGNJdVlGZGxzdUlpVE1EZnhObDZrTGdIZG1Yb21RUTBCYlp6c0N0SWRXRDA1OVlHUURCSEJ2c2JiUVpZN0FZM3hNT1JuYW52aS9VVUJHS3BoVFNXVHBZM2Q1aTNuWm5sanBtNTU4WUNlWStFS0xMQlRyQ2dsWXc0bU13c0JNWkdnY0d2bTVsUGVOdE1sZDI4YUZpQlVSNEdES1hKdGhEWXV2bnV2SEZJREFPd1VnQVdzS0IrNFB0aWJjbWhxN0RXVk11TkY1N08yc01mY2wrbGFWNE5xaXE3VUhOd0owQXlmTzhnVnNqMC9kWDdPSlAydi9ZKzhPbWVveStDVTRkdzFxdjRaQUxuOCtGK05HNlJBQi9oYzkrOHg1UG51ZFBhOXJCWElOQVNWZ0srQnpjN3MyQ0lIR1dtZTVXenNXTGo0U0Zxd2VQd0kwMzlwRHI3UGtOMkJyVkVDN3RZc0plRjBncnI3Z0xqSm53azlmWGxYdWVLaTdCTkNxN3EzNTJTNi9WUVZzNVlzS0h0dmxhMkFZMXduZVBXSXkvOCtUSkp1WTZOaEF0a2ZRT3lLZ2E1ZlBoVFgwUGk0OHhEc29xV2JLWnl1aER6eU84VlgyQ253WEljRXBBVXZ5UEpaQWpDdGRXZnFLbmlMYjQza3VkUnNCck10b1B4RUpMVzZMWlhCbjd0Y0xlQ0lnSXhYRXdpRkZRbXdNMFZmelkwdHBPZXVyOTNQQjlFbE1sYUR5YnovVExTc3pKdDR5YitCSGxrUlFUQWtwRXZ6STBoa2I0ckxzMmZ0YklPQU5iQXRWNExwZVlHZCtManIwZ2RLSGlhVnZQZEV6OGtIb2xyYUwxSHYydmtxL1hVWGVyaUQvVEdxb2NQSDB5ZHl2dXViWXFzejlpbTFWZ251Z01neXArVFl5ekkxTmNIQm1pM01aWFIxL3hLVCtyd0FEQUFKQmFpQW1tNXh3QUFBQUFFbEZUa1N1UW1DQw\"},{ name : \"__ASSET__:bitmap_flixel_addons_transition_GraphicTransTileCircle\", data : \"\"},{ name : \"__ASSET__:bitmap_flixel_addons_transition_GraphicTransTileSquare\", data : \"\"},{ name : \"__ASSET__:bitmap_flixel_input_mouse__FlxMouse_GraphicCursor\", data : \"aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUJnQUFBQWdDQVlBQUFBSVhyZzRBQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQW1SSlJFRlVlTnEwbHM5ckUwRVV4Nzg3MllTZ0psVFNTaVdwVnZyRElxaEZVSUtnK0NlSUlncWVGRS9pVFJDOHBMUVhqeUwwNGc5Q29tWFRKSVcwT1ZVRU1UZEJSSWs1VzZXdGtLSlNiR25EcHNuNlprMlczVFFicytua3dkdVpuVm0rbjMwenczc2pCVUxCQ0lBcGRNbGMrL3orZDlScTVMbHVBT1JhTzhrZkR5ZW5XMGJ5YU9LZVl3RGpEMDNUZEFnSlJFUkhJTkVlYUpWS0ZZeEprQ1NKajAzWVJYTC85bVZib2Q2QmtIMEV1bWxTdlNjMEVnTnc1ZXAxakE2UENJY1lnQU0rUDU0OG5zYXh3VUdoRUdaKzJTaFZNSjlLNCtqQUVXRVFDMkM3cEVKakhpeWswd2dGZzBJZ3JIRmdhYm1vaTJkbWt6amMzNzlueUM3QW44MHQvRjdmMFBlQ1F3NzE5UmtRT29xUlBRTzRmVjBwNnUzdzBCQXl5U1FDZ1VESGtLYUE0czkxYkc2VjlQN3hrVkU5a29NOVBSMUJtTjNFVWkwS2JpZkd4akNuS1BEN2ZJNGh0b0RWNGkrbzVSM2ovZlRKVXdSSk9JYllBbmgrK3I2NlpoazdNejRPSlI2SDErdHRHOEphVFg3N3NZWkt0V29aQzU4OWg5U3JtYlloTFFHcXVxTXZWYU9kRDRjeEU0M0M0M2JEVkU4aWpnR05tMjIyU3hjdUl2Nzh4WDhoY2l2eFdTV0dmUDRUYmV4K0VtcitLVjhxdFZ3MlEyQ3U4YmFBVk9JbEZ1YlQvejZTWFdBdTF1N1J0MENhQXJJa25Na2t3UXVjTE11UW1PUTBReGlRWFlEWGkxa2thR2tZWTVEZExqNzBsdnhCaDhuVVl3SGtjbThRaXo0MUw4a2lMM1pVbzdjN3Jja0c0T09IOXlnVThuQVRzMWI4cytUWFNGd1ZVbkMrRkQ3VFh4czNpemtSNGtZRUx1c0o0ZUkzbTRuYkxZT1RWS0dRM3hEeDU1YUxWNjBmSTcvRDg1ekltMTA5Z21ma3QwU0wxMi9YdmRUZTdkYjEvYThBQXdDWlVNUU16UW9keXdBQUFBQkpSVTVFcmtKZ2dnPT0\"},{ name : \"__ASSET__:bitmap_flixel_system_debug_stats__Stats_GraphicMinimizeButton\", data : \"aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFvQUFBQUtDQVlBQUFDTk1zKzlBQUFBQm1KTFIwUUEvd0QvQVArZ3ZhZVRBQUFBQ1hCSVdYTUFBQUIyQUFBQWRnRk9leVlJQUFBQUIzUkpUVVVIM2dNSkNSMDFlRVp4RlFBQUFEOUpSRUZVR05OaitQLy8vMzhHQWdDdUJzWkExb1JOREM2QnJoQ1p6L1QvLzM4bWZOWVQ0elR5QUNPNjhZeU1qRmpGbUpBbHNacUVMRWRVOEJBYjRBQzRjRkxGc3d1SW53QUFBQUJKUlU1RXJrSmdnZz09\"},{ name : \"__ASSET__:bitmap_flixel_system__FlxPreloader_GraphicLogoLight\", data : \"aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUVBQUFBQkFDQVlBQUFDcWFYSGVBQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQnE1SlJFRlVlTnJVVzR0dTR6WVE1TktVYzNmcHQvYWYrcE01MjVLNFJRQ3gySnZiRi8xSTJ3Q0VaRWQyTk1QWnQwTGx6Ny9LQzMvb1NkL0RyN3JCOXNXZzZVN0E5Q295MmhjQXB3ZStpNFB2NC84Q0FSUzhSM2VBbE5ld3VBNC9RNCtTMEw0SU9EMWdDcFM0RC81cUFpeEFsSHd2SW9PVHBQQ0VtcDVHQUUwQ0orTzZqQk5rQjlSVFRLSTlDTndDR0wwWDdUd0xnS3lBWlllSUtUVTg2Z1ExSXNaN1ZRRS9TNEE4NzQ0S1h1b0RNdktPVm5XVWdJQ3NSUWNKRkpBeFJVeDdFSHlGY3dSY0EySTg4QU5rRjY5SlVRWTdEalEwaDVZQWI1RkFEdUFxRnNGNWhvQU93UHZ4K1E0cTZBYjR0Qis0eHdscTREWGdKK1cxWmc3c0VERFdMc0NpQ1hqK0ljd1ZXbkwzU1pFK0FwWkFjVlZGRmFSNGRqN0FzZ0MrSDUvWndROGcwRzRvd1EyUjdRNnZYNVhkSHlBYkFHOEtHZmdkMnU0UDRKczR4OWZqZm5ieG5YMDJTclNKM2RkMi9pU09UUnkxZFlMcjBRZDBBRDhBeTRYa2FVUjRvZkkzTWxvaXhkWGlPMG9ld1M2d21xSUdWSUFrUUlKZWp6WCszbVlrUldnS2x2Ui9lZDBtS2poTi9pY0Q5RmtjeitMMzQ5b0t6cENGbzBQZ0RmeUk1ZUZaMmUzeWlBL3draHEwOHdVQXY4SDVJb2lRU2tCUExuZitKcFpHZ0JWQ2krSVV6YWpRa3BWZURhUXZ3WDg3UUkvMVRmeE9tb1NtQUFSL0ZZUlI0RGhMMER0SU9VRnliSitVVUllN1AwQi9QNERMOVNaSWtHYkFRSUFFdjRqZEw0cGlNR21xQWp3Wi9RVFZDVklpSDdETW9BRUJBL0FuQ1QrTzQzZEJ6aG5zZWhBZzdmNFQvRThnQ3NIdlNzSlVJVzBtbzcvSVVSZ2tKd3lpL1dzRWZBSitQd2dZUzVyRzRoRHdDZjRDU2lsR2xyZ2JaS0FTckVZclo0b2hMZDNGMEhkV0NQaHhrUEN1S0dFUkpFb0h1QjdnaDBwSUFhOGxSaWVSTVZZbFd6VHJnMHd4cEJFaGZjRWlTSkFFSUFudmdvQXpSQUpwLzJkbDUyVitzRUtJYk1mN0o1RU00YkljSWJWRTFXZWx2bG9PZ0k0UUNaQ21nQXBZaGRldjRzWXQ4R05wOVlaSHdpOUtpRExCNGhSQUo4TVJuc0VSRG4vd0J4Q3dnTk5hUWZvTXdHVmtXSlQwR2plcVo3ckhUUWtSTldoalJabmdHWlNBSmpITW9JRUNic0lrQnZnQi9BMXlDU3Uxcm80RDU0d1BvQ0FaaWtwZ0xTcThLZUZ4Z0tuQ0I4aW9JTUZmSUwxdWlWTGJhNzJGWVRBVEZTaHdqTTFSeGpDUlJlejRKbXI5TTZUTkMrUU5sdXk5QnF4cEJqTzFnQlVleVZBRGtxRVJVK0hHUmlSb3prNlRrNm5TN0N5eUpZWVRzeDNpQW0xeEN0cG94ZWtZUlUzVnUwQVh1TW1aMlI4N0ZSZzcvVDJyMVYyVWZvRDNXYTk5bmhtcjNhMEE3WTk3N1d4TVQzZFk2MEV3SmtJYnRMMnNuUDllOEdZWUpLZU5aTzF3VDdTeE1HbTVpci9KSWd6dVVQL2Z4R2MyY2R3VVFsQTkzc3pBRElQUkdKcVYzbDBQMmxpeXJKV2xMWW5QVk1nRHJzcTZBUUdhU3Rnd3lSSjFoVnBDTWw3ZkhuY2VnVjlFL0Vid0MrUUJzZ3orT0k2WFl3MHlWa1VORmhIZUlOWE5BNnkrR2twdGQzYitDbVZ0aGZSMmhZS25ReW44QVNSY3dUUlFBWmFQaUtLYW1ncVQ0Z09zY1pVbCtjWG81bGdWWDRmTTd3T1dSOFNtQUk4YzVUOEthY2FPRjRNRWRxUXZuVnd6cXJvVkNDQWdZQld5bCtDUmdCV1VnSW9vR1FjWW1ZQVg0anFFdEhiY21CeVdrTkx4dllGUGtBckFqdEJGVVlFa3dsSUFubk1tQ2hSbnlvbzl0azNKNkc3S0VGVHVyblJ5NkJUeEd1bEFmOExTRklBT2taMlErRnRWT0JNR05UVnNrUGRYQXp6dVBqWkZPNWpCVGV5MGpBWVhKVS9ZamR6QWNvUnVGR0NuZHU0d2t4dm5ZMngxVlZTek83dGZ3UVIyVUFIbUJSZHh0SnhnRDU0eWNVM0E2NkdqS2V4S3I2REF6ck1DQ25jZkJ5TmFQbkZUdlArcWhNTTlDSU4zT1VFckJTYVIxR3lKTWZkTk5FS3QyV0EzU0pESHEyUDdtZDNIOUQ1VkRHbFBjZlNnNVl4Z21taDV6VXlIVjZXbXNNQjNweVpJSzhDZHBSdkFOeU5ibEFTY2xLNU9FVTdRZXo1Z0Qyb0JiL2VuTTBFdkg3Q2V5Y0dFYVFCcHg4MWxtcGRlaldFOUtUSlRLdk1qaVZCSlBKT3p3WmdMbldBTituajRqSkJHUkUvbS96elRGR21KM2ZjYURkM0lGYW80N2tyTHF6Z0U0UENUamVaSWxQV0Z1NS90Q211NUFRNGdHRVpaVlF3cHZhZkROQ2ZibmVKTEE1d3BnKzl1aVZId1hsZUlRSDlnTlRpTEUyVllxZTZpZmlGUE5IZW5HaUxraEVRQ1U4RHFyMExPRUQwMm55R2lPS0dPWnh1aldSTW9Tbmkwd2lRcFQyaVEwNGttQnp3N3RRZ0hOcDhpWW1ZeTVEMTBxRDJwVGNiTWdCTmtsNENFakpON3lmOExjS0tEck8yOE5ZTG53QXk4bHJ5MzAwODFnZG5Ka1VXSU5YVGxoQkl5NzAwUFJlNGx3RXFPTEFkcDNTQWxBSEJ5V0hNWCtHY29nQnhpSWpJeWl1STdydmt5QWlJMXpONGtUeWpqS2VDZlFVQlcyc1dwS1NJbitCTGd6eVlnVXNXak4vNi8rdS94NkticDN3QnEvZnd0d0FDRGVkRE1KazlyRWdBQUFBQkpSVTVFcmtKZ2dnPT0\"},{ name : \"__ASSET__:bitmap_flixel_addons_transition__TransitionFade_GraphicDiagonalGradient\", data : \"\"},{ name : \"__ASSET__:bitmap_flixel_system_debug__FlxDebugger_GraphicFlixel\", data : \"aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUF3QUFBQU1DQVlBQUFCV2RWem5BQUFBQkdkQlRVRUFBTEdPZlB0Umt3QUFBQ0JqU0ZKTkFBQ0hEd0FBakE4QUFQMVNBQUNCUUFBQWZYa0FBT21MQUFBODVRQUFHY3h6UElWM0FBQUtPV2xEUTFCUWFHOTBiM05vYjNBZ1NVTkRJSEJ5YjJacGJHVUFBRWpIblpaM1ZGVFhGb2ZQdlhkNm9jMHdBbEtHM3J2QUFOSjdrMTVGWVpnWllDZ0REak0wc1NHaUFoRkZSSm9pU0ZERWdORlFKRlpFc1JBVVZMQUhKQWdvTVJoRlZDeHZSdGFMcnF5ODkvTHkrK09zYisyejk3bjc3TDNQV2hjQWtxY3ZsNWNHU3dHUXloUHdnenljNlJHUlVYVHNBSUFCSG1DQUtRQk1Wa2E2WDdCN0NCREp5ODJGbmlGeUFsOEVBZkI2V0x3Q2NOUFFNNEJPQi8rZnBGbnBmSUhvbUFBUm03TTVHU3dSRjRnNEpVdVFMcmJQaXBnYWx5eG1HQ1ZtdmloQkVjdUpPV0dSRFQ3N0xMS2ptTm1wUExhSXhUbW5zMVBaWXU0VjhiWk1JVWZFaUsrSUN6TzVuQ3dSM3hLeFJvb3dsU3ZpTitMWVZBNHpBd0FVU1d3WGNGaUpJallSTVlrZkV1UWk0dVVBNEVnSlgzSGNWeXpnWkF2RWwzSkpTOC9oY3hNU0JYUWRsaTdkMU5xYVFmZmtaS1Z3QkFMREFDWXJtY2xuMDEzU1V0T1p2QndBRnUvOFdUTGkydEpGUmJZMHRiYTBORFF6TXYycVVQOTE4MjlLM050RmVobjR1V2NRcmYrTDdhLzgwaG9BWU15SmFyUHppeTJ1Q29ET0xRREkzZnRpMHpnQWdLU29ieDNYdjdvUFRUd3ZpUUpCdW8yeGNWWldsaEdYd3pJU0YvUVAvVStIdjZHdnZtY2tQdTZQOHRCZE9mRk1ZWXFBTHE0Ykt5MGxUY2luWjZReldSeTY0WitIK0I4SC9uVWVCa0djZUE2Znd4TkZoSW1tak10TEVMV2J4K1lLdUdrOE9wZjNuNXI0RDhQK3BNVzVGb25TK0JGUVk0eUExSFVxUUg3dEJ5Z0tFU0RSKzhWZC82TnZ2dmd3SUg1NTRTcVRpM1AvN3pmOVo4R2w0aVdEbS9BNXppVW9oTTRTOGpNWDk4VFBFcUFCQVVnQ0twQUh5a0FkNkFCRFlBYXNnQzF3Qkc3QUcvaURFQkFKVmdNV1NBU3BnQSt5UUI3WUJBcEJNZGdKOW9CcVVBY2FRVE5vQmNkQkp6Z0Z6b05MNEJxNEFXNkQrMkFVVElCbllCYThCZ3NRQkdFaE1rU0I1Q0VWU0JQU2g4d2dCbVFQdVVHK1VCQVVDY1ZDQ1JBUEVrSjUwR2FvR0NxRHFxRjZxQm42SGpvSm5ZZXVRSVBRWFdnTW1vWitoOTdCQ0V5Q3FiQVNyQVVid3d6WUNmYUJRK0JWY0FLOEJzNkZDK0FkY0NYY0FCK0ZPK0R6OERYNE5qd0tQNFBuRUlBUUVScWlpaGdpRE1RRjhVZWlrSGlFajZ4SGlwQUtwQUZwUmJxUlB1UW1Nb3JNSUc5UkdCUUZSVWNab214Um5xaFFGQXUxQnJVZVZZS3FSaDFHZGFCNlVUZFJZNmhaMUVjMEdhMkkxa2Zib0wzUUVlZ0VkQmE2RUYyQmJrSzNveStpYjZNbjBLOHhHQXdObzQyeHduaGlJakZKbUxXWUVzdytUQnZtSEdZUU00Nlp3Mkt4OGxoOXJCM1dIOHZFQ3JDRjJDcnNVZXhaN0JCMkF2c0dSOFNwNE14dzdyZ29IQStYajZ2QUhjR2R3UTNoSm5FTGVDbThKdDRHNzQ5bjQzUHdwZmhHZkRmK09uNEN2MENRSm1nVDdBZ2hoQ1RDSmtJbG9aVndrZkNBOEpKSUpLb1JyWW1CUkM1eEk3R1NlSXg0bVRoR2ZFdVNJZW1SWEVqUkpDRnBCK2tRNlJ6cEx1a2xtVXpXSWp1U284Z0M4ZzV5TS9rQytSSDVqUVJGd2tqQ1M0SXRzVUdpUnFKRFlraml1U1JlVWxQU1NYSzFaSzVraGVRSnlldVNNMUo0S1MwcEZ5bW0xSHFwR3FtVFVpTlNjOUlVYVZOcGYrbFU2UkxwSTlKWHBLZGtzREphTW00eWJKa0NtWU15RjJUR0tRaEZuZUpDWVZFMlV4b3BGeWtUVkF4Vm0rcEZUYUlXVTcrakRsQm5aV1ZrbDhtR3lXYkwxc2llbGgybElUUXRtaGN0aFZaS08wNGJwcjFib3JURWFRbG55ZllsclV1R2xzekxMWlZ6bE9QSUZjbTF5ZDJXZXlkUGwzZVRUNWJmSmQ4cC8xQUJwYUNuRUtpUXBiQmY0YUxDekZMcVV0dWxyS1ZGUzQ4dnZhY0lLK29wQmltdVZUeW8ySzg0cDZTczVLR1VybFNsZEVGcFJwbW03S2ljcEZ5dWZFWjVXb1dpWXEvQ1ZTbFhPYXZ5bEM1TGQ2S24wQ3ZwdmZSWlZVVlZUMVdoYXIzcWdPcUNtclphcUZxK1dwdmFRM1dDT2tNOVhyMWN2VWQ5VmtORncwOGpUNk5GNDU0bVhwT2htYWk1VjdOUGMxNUxXeXRjYTZ0V3A5YVV0cHkybDNhdWRvdjJBeDJ5am9QT0dwMEduVnU2R0YyR2JyTHVQdDBiZXJDZWhWNmlYbzNlZFgxWTMxS2ZxNzlQZjlBQWJXQnR3RE5vTUJneEpCazZHV1lhdGhpT0dkR01mSTN5alRxTm5odHJHRWNaN3pMdU0vNW9ZbUdTWXRKb2N0OVV4dFRiTk4rMDIvUjNNejB6bGxtTjJTMXpzcm03K1Fiekx2TVh5L1NYY1pidFgzYkhnbUxoWjdIVm9zZmlnNldWSmQreTFYTGFTc01xMXFyV2FvUkJaUVF3U2hpWHJkSFd6dFlickU5WnY3V3h0QkhZSExmNXpkYlFOdG4yaU8zVWN1M2xuT1dOeThmdDFPeVlkdlYyby9aMCsxajdBL2FqRHFvT1RJY0doOGVPNm81c3h5YkhTU2RkcHlTbm8wN1BuVTJjK2M3dHp2TXVOaTdyWE02NUlxNGVya1d1QTI0eWJxRnUxVzZQM05YY0U5eGIzR2M5TER6V2VwenpSSHY2ZU83eUhQRlM4bUo1Tlh2TmVsdDVyL1B1OVNINUJQdFUrenoyMWZQbCszYjd3WDdlZnJ2OUhxelFYTUZiMGVrUC9MMzhkL3MvRE5BT1dCUHdZeUFtTUNDd0p2QkprR2xRWGxCZk1DVTRKdmhJOE9zUTU1RFNrUHVoT3FIQzBKNHd5YkRvc09hdytYRFg4TEx3MFFqamlIVVIxeUlWSXJtUlhWSFlxTENvcHFpNWxXNHI5NnljaUxhSUxvd2VYcVc5S252VmxkVUtxMU5XbjQ2UmpHSEduSWhGeDRiSEhvbDl6L1JuTmpEbjRyemlhdU5tV1M2c3ZheG5iRWQyT1h1YVk4Y3A0MHpHMjhXWHhVOGwyQ1hzVHBoT2RFaXNTSnpodW5DcnVTK1NQSlBxa3VhVC9aTVBKWDlLQ1U5cFM4V2x4cWFlNU1ud2tubTlhY3BwMldtRDZmcnBoZW1qYTJ6VzdGa3p5L2ZoTjJWQUdhc3l1Z1JVMGM5VXYxQkh1RVU0bG1tZldaUDVKaXNzNjBTMmREWXZ1ejlITDJkN3ptU3VlKzYzYTFGcldXdDc4bFR6TnVXTnJYTmFWNzhlV2grM3ZtZUQrb2FDRFJNYlBUWWUza1RZbEx6cHAzeVQvTEw4VjV2RE4zY1hLQlZzTEJqZjRyR2xwVkNpa0Y4NHN0VjJhOTAyMURidXRvSHQ1dHVydG44c1loZGRMVFlwcmloK1g4SXF1ZnFONlRlVjMzemFFYjlqb05TeWRQOU96RTdlenVGZERyc09sMG1YNVphTjcvYmIzVkZPTHk4cWY3VW5acytWaW1VVmRYc0plNFY3Unl0OUs3dXFOS3AyVnIydlRxeStYZU5jMDFhcldMdTlkbjRmZTkvUWZzZjlyWFZLZGNWMTd3NXdEOXlwOTZqdmFOQnFxRGlJT1poNThFbGpXR1BmdDR4dm01c1Vtb3FiUGh6aUhSbzlISFM0dDltcXVmbUk0cEhTRnJoRjJESjlOUHJvamU5Y3YrdHFOV3l0YjZPMUZSOER4NFRIbm40ZisvM3djWi9qUFNjWUoxcC8wUHlodHAzU1h0UUJkZVIwekhZbWRvNTJSWFlObnZRKzJkTnQyOTMrbzlHUGgwNnBucW81TFh1NjlBemhUTUdaVDJkeno4NmRTejgzY3o3aC9IaFBUTS85Q3hFWGJ2VUc5ZzVjOUxsNCtaTDdwUXQ5VG4xbkw5dGRQblhGNXNySnE0eXJuZGNzcjNYMFcvUzMvMlR4VS91QTVVREhkYXZyWFRlc2IzUVBMaDg4TStRd2RQNm02ODFMdDd4dVhidTk0dmJnY09qd25aSG9rZEU3N0R0VGQxUHV2cmlYZVcvaC9zWUg2QWRGRDZVZVZqeFNmTlR3cys3UGJhT1dvNmZIWE1mNkh3Yy92ai9PR24vMlM4WXY3eWNLbnBDZlZFeXFURFpQbVUyZG1uYWZ2dkYwNWRPSlorblBGbVlLZjVYK3RmYTV6dk1mZm5QOHJYODJZbmJpQmYvRnA5OUxYc3EvUFBScTJhdWV1WUM1UjY5VFh5L01GNzJSZjNQNExlTnQzN3Z3ZDVNTFdlK3g3eXMvNkg3by91ano4Y0duMUUrZi9nVURtUFA4dXNUbzB3QUFBQWx3U0ZsekFBQUxFZ0FBQ3hJQjB0MSsvQUFBQUJwMFJWaDBVMjltZEhkaGNtVUFVR0ZwYm5RdVRrVlVJSFl6TGpVdU1UQXc5SEtoQUFBQkxFbEVRVlFvVTJQNGY5RG9QeEkrRG1RNy9qOWt4QUFDWDlYOVZJRjRHUkQvQStML0lNeUFwZ0drK2QvSEE0WTdqcnE1emdJcStBbFRpRlBENTRPRy94MTNxLzJYWHFuKy80S3RPOWhVWkF5eTRTck1sbzlBeFhaQXhRdzdsY0JZY3BYYS96TU9LSnErZ1RTNGdaenhBYWpZRWtreFRKUFlHclgvSjV6Y1lMYjBNL3cvWXNUdzdJREJPclBkcW5DVFlZcGh0TWhhdGYrSFhGMi9BSjBtQVE0TjQ0REhDN21XZXVEVXdMQlQ5VC9yNGFYUFdNNys1bVN3ZHZ5dkJzUy9USDFlLytkYzdveEZrOXAvNW1NYi93TVZnM0FPU01NQ0lQNFB3aVorei85enJIUkEwZ1JTdkFtbUdFUS9BbW40RGRNQTFoVHcrRC83S3R2L0RMczBnSXEzSUNzR3MwRWF3S1lqWTZPUXUyK1lqMnk0QlhVR2lpWjBEVitBR3R1QVdCQ29tQldJazRINEFiSkdBSlFUU2ZzMmF1VnlBQUFBQUVsRlRrU3VRbUND\"},{ name : \"__ASSET__:bitmap_flixel_tile_GraphicAuto\", data : \"aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUlBQUFBQUlDQU1BQUFBR0F3ZE1BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBS1QybERRMUJRYUc5MGIzTm9iM0FnU1VORElIQnliMlpwYkdVQUFIamFuVk5uVkZQcEZqMzMzdlJDUzRpQWxFdHZVaFVJSUZKQ2k0QVVrU1lxSVFrUVNvZ2hvZGtWVWNFUlJVVUVHOGlnaUFPT2pvQ01GVkVzRElvSzJBZmtJYUtPZzZPSWlzcjc0WHVqYTlhODkrYk4vclhYUHVlczg1Mnp6d2ZBQ0F5V1NETlJOWUFNcVVJZUVlQ0R4OFRHNGVRdVFJRUtKSEFBRUFpelpDRnovU01CQVBoK1BEd3JJc0FIdmdBQmVOTUxDQURBVFp2QU1CeUgvdy9xUXBsY0FZQ0VBY0Iwa1RoTENJQVVBRUI2amtLbUFFQkdBWUNkbUNaVEFLQUVBR0RMWTJMakFGQXRBR0FuZitiVEFJQ2QrSmw3QVFCYmxDRVZBYUNSQUNBVFpZaEVBR2c3QUt6UFZvcEZBRmd3QUJSbVM4UTVBTmd0QURCSlYyWklBTEMzQU1ET0VBdXlBQWdNQURCUmlJVXBBQVI3QUdESUl5TjRBSVNaQUJSRzhsYzg4U3V1RU9jcUFBQjRtYkk4dVNRNVJZRmJDQzF4QjFkWExoNG96a2tYS3hRMllRSmhta0F1d25tWkdUS0JOQS9nODh3QUFLQ1JGUkhnZy9QOWVNNE9yczdPTm82MkRsOHQ2cjhHL3lKaVl1UCs1YytyY0VBQUFPRjBmdEgrTEMrekdvQTdCb0J0L3FJbDdnUm9YZ3VnZGZlTFpySVBRTFVBb09uYVYvTncrSDQ4UEVXaGtMbloyZVhrNU5oS3hFSmJZY3BYZmY1bndsL0FWLzFzK1g0OC9QZjE0TDdpSklFeVhZRkhCUGpnd3N6MFRLVWN6NUlKaEdMYzVvOUgvTGNMLy93ZDB5TEVTV0s1V0NvVTQxRVNjWTVFbW96ek1xVWlpVUtTS2NVbDB2OWs0dDhzK3dNKzN6VUFzR28rQVh1UkxhaGRZd1AyU3ljUVdIVEE0dmNBQVBLN2I4SFVLQWdEZ0dpRDRjOTMvKzgvL1VlZ0pRQ0Faa21TY1FBQVhrUWtMbFRLc3ovSENBQUFSS0NCS3JCQkcvVEJHQ3pBQmh6QkJkekJDL3hnTm9SQ0pNVENRaEJDQ21TQUhISmdLYXlDUWlpR3piQWRLbUF2MUVBZE5NQlJhSWFUY0E0dXdsVzREajF3RC9waENKN0JLTHlCQ1FSQnlBZ1RZU0hhaUFGaWlsZ2pqZ2dYbVlYNEljRklCQktMSkNESmlCUlJJa3VSTlVneFVvcFVJRlZJSGZJOWNnSTVoMXhHdXBFN3lBQXlndnlHdkVjeGxJR3lVVDNVRExWRHVhZzNHb1JHb2d2UVpIUXhtbzhXb0p2UWNyUWFQWXcyb2VmUXEyZ1AybzgrUThjd3dPZ1lCelBFYkRBdXhzTkNzVGdzQ1pOank3RWlyQXlyeGhxd1Zxd0R1NG4xWTgreGR3UVNnVVhBQ1RZRWQwSWdZUjVCU0ZoTVdFN1lTS2dnSENRMEVkb0pOd2tEaEZIQ0p5S1RxRXUwSnJvUitjUVlZakl4aDFoSUxDUFdFbzhUTHhCN2lFUEVOeVFTaVVNeUo3bVFBa214cEZUU0V0SkcwbTVTSStrc3FaczBTQm9qazhuYVpHdXlCem1VTENBcnlJWGtuZVRENURQa0crUWg4bHNLbldKQWNhVDRVK0lvVXNwcVNobmxFT1UwNVFabG1ESkJWYU9hVXQyb29WUVJOWTlhUXEyaHRsS3ZVWWVvRXpSMW1qbk5neFpKUzZXdG9wWFRHbWdYYVBkcHIraDB1aEhkbFI1T2w5Qlgwc3ZwUitpWDZBUDBkd3dOaGhXRHg0aG5LQm1iR0FjWVp4bDNHSytZVEtZWjA0c1p4MVF3TnpIcm1PZVpENWx2VlZncXRpcDhGWkhLQ3BWS2xTYVZHeW92VkttcXBxcmVxZ3RWODFYTFZJK3BYbE45cmtaVk0xUGpxUW5VbHF0VnFwMVE2MU1iVTJlcE82aUhxbWVvYjFRL3BINVovWWtHV2NOTXcwOURwRkdnc1YvanZNWWdDMk1aczNnc0lXc05xNFoxZ1RYRUpySE4yWHgyS3J1WS9SMjdpejJxcWFFNVF6TktNMWV6VXZPVVpqOEg0NWh4K0p4MFRnbm5LS2VYODM2SzNoVHZLZUlwRzZZMFRMa3haVnhycXBhWGxsaXJTS3RScTBmcnZUYXU3YWVkcHIxRnUxbjdnUTVCeDBvblhDZEhaNC9PQlozblU5bFQzYWNLcHhaTlBUcjFyaTZxYTZVYm9idEVkNzl1cCs2WW5yNWVnSjVNYjZmZWViM24raHg5TC8xVS9XMzZwL1ZIREZnR3N3d2tCdHNNemhnOHhUVnhiendkTDhmYjhWRkRYY05BUTZWaGxXR1g0WVNSdWRFOG85VkdqVVlQakduR1hPTWs0MjNHYmNhakpnWW1JU1pMVGVwTjdwcFNUYm1tS2FZN1REdE14ODNNemFMTjFwazFtejB4MXpMbm0rZWIxNXZmdDJCYWVGb3N0cWkydUdWSnN1UmFwbG51dHJ4dWhWbzVXYVZZVlZwZHMwYXRuYTBsMXJ1dHU2Y1JwN2xPazA2cm50Wm53N0R4dHNtMnFiY1pzT1hZQnR1dXRtMjJmV0ZuWWhkbnQ4V3V3KzZUdlpOOXVuMk4vVDBIRFlmWkRxc2RXaDErYzdSeUZEcFdPdDZhenB6dVAzM0Y5SmJwTDJkWXp4RFAyRFBqdGhQTEtjUnBuVk9iMDBkbkYyZTVjNFB6aUl1SlM0TExMcGMrTHBzYnh0M0l2ZVJLZFBWeFhlRjYwdldkbTdPYnd1Mm8yNi91TnU1cDdvZmNuOHcwbnltZVdUTnowTVBJUStCUjVkRS9DNStWTUd2ZnJINVBRMCtCWjdYbkl5OWpMNUZYcmRld3Q2VjNxdmRoN3hjKzlqNXluK00rNHp3MzNqTGVXVi9NTjhDM3lMZkxUOE52bmwrRjMwTi9JLzlrLzNyLzBRQ25nQ1VCWndPSmdVR0JXd0w3K0hwOEliK09QenJiWmZheTJlMUJqS0M1UVJWQmo0S3RndVhCclNGb3lPeVFyU0gzNTVqT2tjNXBEb1ZRZnVqVzBBZGg1bUdMdzM0TUo0V0hoVmVHUDQ1d2lGZ2EwVEdYTlhmUjNFTnozMFQ2UkpaRTNwdG5NVTg1cnkxS05TbytxaTVxUE5vM3VqUzZQOFl1WmxuTTFWaWRXRWxzU3h3NUxpcXVObTVzdnQvODdmT0g0cDNpQytON0Y1Z3Z5RjF3ZWFIT3d2U0ZweGFwTGhJc09wWkFUSWhPT0pUd1FSQXFxQmFNSmZJVGR5V09Dbm5DSGNKbklpL1JOdEdJMkVOY0toNU84a2dxVFhxUzdKRzhOWGtreFRPbExPVzVoQ2Vwa0x4TURVemRtenFlRnBwMklHMHlQVHE5TVlPU2taQnhRcW9oVFpPMlorcG41bVoyeTZ4bGhiTCt4VzZMdHk4ZWxRZkphN09RckFWWkxRcTJRcWJvVkZvbzF5b0hzbWRsVjJhL3pZbktPWmFybml2TjdjeXp5dHVRTjV6dm4vL3RFc0lTNFpLMnBZWkxWeTBkV09hOXJHbzVzanh4ZWRzSzR4VUZLNFpXQnF3OHVJcTJLbTNWVDZ2dFY1ZXVmcjBtZWsxcmdWN0J5b0xCdFFGcjZ3dFZDdVdGZmV2YzErMWRUMWd2V2QrMVlmcUduUnMrRlltS3JoVGJGNWNWZjlnbzNIamxHNGR2eXIrWjNKUzBxYXZFdVdUUFp0Sm02ZWJlTFo1YkRwYXFsK2FYRG00TjJkcTBEZDlXdE8zMTlrWGJMNWZOS051N2c3WkR1YU8vUExpOFphZkp6czA3UDFTa1ZQUlUrbFEyN3RMZHRXSFgrRzdSN2h0N3ZQWTA3TlhiVzd6My9UN0p2dHRWQVZWTjFXYlZaZnRKKzdQM1A2NkpxdW40bHZ0dFhhMU9iWEh0eHdQU0EvMEhJdzYyMTduVTFSM1NQVlJTajlZcjYwY094eCsrL3AzdmR5ME5OZzFWalp6RzRpTndSSG5rNmZjSjMvY2VEVHJhZG94N3JPRUgweDkySFdjZEwycENtdkthUnB0VG12dGJZbHU2VDh3KzBkYnEzbnI4UjlzZkQ1dzBQRmw1U3ZOVXlXbmE2WUxUazJmeXo0eWRsWjE5Zmk3NTNHRGJvclo3NTJQTzMyb1BiKys2RUhUaDBrWC9pK2M3dkR2T1hQSzRkUEt5MitVVFY3aFhtcTg2WDIzcWRPbzgvcFBUVDhlN25MdWFycmxjYTdudWVyMjFlMmIzNlJ1ZU44N2Q5TDE1OFJiLzF0V2VPVDNkdmZONmIvZkY5L1hmRnQxK2NpZjl6c3U3MlhjbjdxMjhUN3hmOUVEdFFkbEQzWWZWUDF2KzNOanYzSDlxd0hlZzg5SGNSL2NHaFlQUC9wSDFqdzlEQlkrWmo4dUdEWWJybmpnK09UbmlQM0w5NmZ5blE4OWt6eWFlRi82aS9zdXVGeFl2ZnZqVjY5Zk8wWmpSb1pmeWw1Ty9iWHlsL2VyQTZ4bXYyOGJDeGg2K3lYZ3pNVjcwVnZ2dHdYZmNkeDN2bzk4UFQrUjhJSDhvLzJqNXNmVlQwS2Y3a3htVGsvOEVBNWp6L0dNekxkc0FBQUFnWTBoU1RRQUFlaVVBQUlDREFBRDUvd0FBZ09rQUFIVXdBQURxWUFBQU9wZ0FBQmR2a2wvRlJnQUFBd0JRVEZSRkFBQUFYbDVlQUFBQUF3TURCQVFFQlFVRkJnWUdCd2NIQ0FnSUNRa0pDZ29LQ3dzTERBd01EUTBORGc0T0R3OFBFQkFRRVJFUkVoSVNFeE1URkJRVUZSVVZGaFlXRnhjWEdCZ1lHUmtaR2hvYUd4c2JIQndjSFIwZEhoNGVIeDhmSUNBZ0lTRWhJaUlpSXlNakpDUWtKU1VsSmlZbUp5Y25LQ2dvS1NrcEtpb3FLeXNyTEN3c0xTMHRMaTR1THk4dk1EQXdNVEV4TWpJeU16TXpORFEwTlRVMU5qWTJOemMzT0RnNE9UazVPam82T3pzN1BEdzhQVDA5UGo0K1B6OC9RRUJBUVVGQlFrSkNRME5EUkVSRVJVVkZSa1pHUjBkSFNFaElTVWxKU2twS1MwdExURXhNVFUxTlRrNU9UMDlQVUZCUVVWRlJVbEpTVTFOVFZGUlVWVlZWVmxaV1YxZFhXRmhZV1ZsWldscGFXMXRiWEZ4Y1hWMWRYbDVlWDE5ZllHQmdZV0ZoWW1KaVkyTmpaR1JrWldWbFptWm1aMmRuYUdob2FXbHBhbXBxYTJ0cmJHeHNiVzF0Ym01dWIyOXZjSEJ3Y1hGeGNuSnljM056ZEhSMGRYVjFkbloyZDNkM2VIaDRlWGw1ZW5wNmUzdDdmSHg4ZlgxOWZuNStmMzkvZ0lDQWdZR0Jnb0tDZzRPRGhJU0VoWVdGaG9hR2g0ZUhpSWlJaVltSmlvcUtpNHVMakl5TWpZMk5qbzZPajQrUGtKQ1FrWkdSa3BLU2s1T1RsSlNVbFpXVmxwYVdsNWVYbUppWW1abVptcHFhbTV1Ym5KeWNuWjJkbnA2ZW41K2ZvS0Nnb2FHaG9xS2lvNk9qcEtTa3BhV2xwcWFtcDZlbnFLaW9xYW1wcXFxcXE2dXJyS3lzcmEydHJxNnVyNit2c0xDd3NiR3hzckt5czdPenRMUzB0YlcxdHJhMnQ3ZTN1TGk0dWJtNXVycTZ1N3U3dkx5OHZiMjl2cjYrdjcrL3dNREF3Y0hCd3NMQ3c4UER4TVRFeGNYRnhzYkd4OGZIeU1qSXljbkp5c3JLeTh2THpNek16YzNOenM3T3o4L1AwTkRRMGRIUjB0TFMwOVBUMU5UVTFkWFYxdGJXMTlmWDJOalkyZG5aMnRyYTI5dmIzTnpjM2QzZDN0N2UzOS9mNE9EZzRlSGg0dUxpNCtQajVPVGs1ZVhsNXVibTUrZm42T2pvNmVucDZ1cnE2K3ZyN096czdlM3Q3dTd1NysvdjhQRHc4Zkh4OHZMeTgvUHo5UFQwOWZYMTl2YjI5L2YzK1BqNCtmbjUrdnI2Ky92Ny9QejgvZjM5L3Y3Ky8vLy9Ra3FmSXdBQUFBTjBVazVULy84QTE4b05RUUFBQUcxSlJFRlVlTnJzazdFU3dDQUlRMS84LzQ5MlVEeUJWdHk2MUNVWEVnVTVvQUZBUXdCaWNnYUhTc2ZaZlBCT2x5UUpTekM1bHJmUWpWb0MrVUNwYncvdlNNQ0RuczFQdnp6b2Z3SGZGMkJENWxCKzJONExTUFp3eWdKc3pRS0dkYXM2UUxwMjI0RU9BQUQvL3dNQTlQY0E4YU9wY3lVQUFBQUFTVVZPUks1Q1lJST0\"},{ name : \"__ASSET__:bitmap_flixel_system_debug_GraphicConsole\", data : \"aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUlHTklVazBBQUhvbEFBQ0Fnd0FBK2Y4QUFJRHBBQUIxTUFBQTZtQUFBRHFZQUFBWGI1SmZ4VVlBQUFCVVNVUkJWSGphdEpIUkNVQWhEQVBqRzhVVjNNbmhuTVZaWE9IOFVTaFBoSW9ZeUUrNXRJRUdRRjU5T3BDRm82UXFLVzFwd0RvRERTaS91WUFGbmk0amxEM3d2SUlOWEcxMmQ0NUFCZEt1V25qMmxENEFLVWJYUXNkOGx3a0FBQUFBU1VWT1JLNUNZSUk9\"},{ name : \"__ASSET__:bitmap_flixel_system_debug_interaction_tools_GraphicEraserTool\", data : \"\"},{ name : \"__ASSET__:bitmap_flixel_system_debug__FlxDebugger_GraphicDrawDebug\", data : \"aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQUU5SlJFRlVlTnEwa01zTkFDQUlRNnRic3FCcjF2Z25haFFQTnVrRlhna3BTS0phZUZhWVFWSGg1WWdWbEFiZjFJN1E1UVRnc0pmZTBlTkJYMkFwajR4V2RxWnV4QUwzUnRJZ0dLdERGR0FBNGg0Vk01NWl5QnNBQUFBQVNVVk9SSzVDWUlJPQ\"}];\n 137143  var __map_reserved = {};\n 137144  var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;\n .....\n 137326  flixel_FlxG.bitmapLog = new flixel_system_frontEnds_BitmapLogFrontEnd();\n 137327  flixel_FlxG.watch = new flixel_system_frontEnds_WatchFrontEnd();\n 137328: flixel_FlxG[\"debugger\"] = new flixel_system_frontEnds_DebuggerFrontEnd();\n 137329  flixel_FlxG.bitmap = new flixel_system_frontEnds_BitmapFrontEnd();\n 137330  flixel_FlxG.cameras = new flixel_system_frontEnds_CameraFrontEnd();\n .....\n 138723  flixel_system_VirtualInputData.resourceName = \"__ASSET__:file_flixel_system_VirtualInputData\";\n 138724  flixel_system_FlxAssets.FONT_DEFAULT = \"Nokia Cellphone FC Small\";\n 138725: flixel_system_FlxAssets.FONT_DEBUGGER = \"Monsterrat\";\n 138726  flixel_system_FlxBasePreloader.LOCAL = \"localhost\";\n 138727  flixel_system_FlxLinkedList._NUM_CACHED_FLX_LIST = 0;\n .....\n 138733  flixel_system_FlxQuadTree.B_LIST = 1;\n 138734  flixel_system_FlxQuadTree._NUM_CACHED_QUAD_TREES = 0;\n 138735: flixel_system_debug__$FlxDebugger_GraphicFlixel.resourceType = \"image/png\";\n 138736: flixel_system_debug__$FlxDebugger_GraphicFlixel.resourceName = \"__ASSET__:bitmap_flixel_system_debug__FlxDebugger_GraphicFlixel\";\n 138737: flixel_system_debug__$FlxDebugger_GraphicDrawDebug.resourceType = \"image/png\";\n 138738: flixel_system_debug__$FlxDebugger_GraphicDrawDebug.resourceName = \"__ASSET__:bitmap_flixel_system_debug__FlxDebugger_GraphicDrawDebug\";\n 138739: flixel_system_debug_GraphicLog.resourceType = \"image/png\";\n 138740: flixel_system_debug_GraphicLog.resourceName = \"__ASSET__:bitmap_flixel_system_debug_GraphicLog\";\n 138741: flixel_system_debug_GraphicStats.resourceType = \"image/png\";\n 138742: flixel_system_debug_GraphicStats.resourceName = \"__ASSET__:bitmap_flixel_system_debug_GraphicStats\";\n 138743: flixel_system_debug_GraphicWatch.resourceType = \"image/png\";\n 138744: flixel_system_debug_GraphicWatch.resourceName = \"__ASSET__:bitmap_flixel_system_debug_GraphicWatch\";\n 138745: flixel_system_debug_GraphicBitmapLog.resourceType = \"image/png\";\n 138746: flixel_system_debug_GraphicBitmapLog.resourceName = \"__ASSET__:bitmap_flixel_system_debug_GraphicBitmapLog\";\n 138747: flixel_system_debug_GraphicConsole.resourceType = \"image/png\";\n 138748: flixel_system_debug_GraphicConsole.resourceName = \"__ASSET__:bitmap_flixel_system_debug_GraphicConsole\";\n 138749: flixel_system_debug_GraphicArrowLeft.resourceType = \"image/png\";\n 138750: flixel_system_debug_GraphicArrowLeft.resourceName = \"__ASSET__:bitmap_flixel_system_debug_GraphicArrowLeft\";\n 138751: flixel_system_debug_GraphicArrowRight.resourceType = \"image/png\";\n 138752: flixel_system_debug_GraphicArrowRight.resourceName = \"__ASSET__:bitmap_flixel_system_debug_GraphicArrowRight\";\n 138753: flixel_system_debug_GraphicCloseButton.resourceType = \"image/png\";\n 138754: flixel_system_debug_GraphicCloseButton.resourceName = \"__ASSET__:bitmap_flixel_system_debug_GraphicCloseButton\";\n 138755: flixel_system_debug_GraphicInteractive.resourceType = \"image/png\";\n 138756: flixel_system_debug_GraphicInteractive.resourceName = \"__ASSET__:bitmap_flixel_system_debug_GraphicInteractive\";\n 138757: flixel_system_debug_Tooltip._tooltips = [];\n 138758: flixel_system_debug_TooltipOverlay.BG_COLOR = -12961222;\n 138759: flixel_system_debug_TooltipOverlay.TEXT_ALPHA = 0.8;\n 138760: flixel_system_debug_TooltipOverlay.MARGIN_X = 10;\n 138761: flixel_system_debug_TooltipOverlay.MARGIN_Y = 10;\n 138762: flixel_system_debug__$Window_GraphicWindowHandle.resourceType = \"image/png\";\n 138763: flixel_system_debug__$Window_GraphicWindowHandle.resourceName = \"__ASSET__:bitmap_flixel_system_debug__Window_GraphicWindowHandle\";\n 138764: flixel_system_debug_Window.BG_COLOR = -580952225;\n 138765: flixel_system_debug_Window.HEADER_COLOR = -1157627904;\n 138766: flixel_system_debug_Window.HEADER_ALPHA = 0.8;\n 138767: flixel_system_debug_Window.HEADER_HEIGHT = 15;\n 138768: flixel_system_debug_Window.WINDOW_AMOUNT = 0;\n 138769: flixel_system_debug_completion_CompletionListEntry.WIDTH = 150;\n 138770: flixel_system_debug_completion_CompletionListEntry.HEIGHT = 20;\n 138771: flixel_system_debug_completion_CompletionListEntry.COLOR_NORMAL = -10526881;\n 138772: flixel_system_debug_completion_CompletionListEntry.COLOR_HIGHLIGHT = -9605779;\n 138773: flixel_system_debug_completion_CompletionListEntry.GUTTER = 4;\n 138774: flixel_system_debug_completion_CompletionListScrollBar.BG_COLOR = -12303292;\n 138775: flixel_system_debug_completion_CompletionListScrollBar.HANDLE_COLOR = -14540254;\n 138776: flixel_system_debug_interaction_tools_GraphicEraserTool.resourceType = \"image/png\";\n 138777: flixel_system_debug_interaction_tools_GraphicEraserTool.resourceName = \"__ASSET__:bitmap_flixel_system_debug_interaction_tools_GraphicEraserTool\";\n 138778: flixel_system_debug_interaction_tools_GraphicMoverTool.resourceType = \"image/png\";\n 138779: flixel_system_debug_interaction_tools_GraphicMoverTool.resourceName = \"__ASSET__:bitmap_flixel_system_debug_interaction_tools_GraphicMoverTool\";\n 138780: flixel_system_debug_interaction_tools_GraphicCursorCross.resourceType = \"image/png\";\n 138781: flixel_system_debug_interaction_tools_GraphicCursorCross.resourceName = \"__ASSET__:bitmap_flixel_system_debug_interaction_tools_GraphicCursorCross\";\n 138782: flixel_system_debug_log_LogStyle.NORMAL = new flixel_system_debug_log_LogStyle();\n 138783: flixel_system_debug_log_LogStyle.WARNING = new flixel_system_debug_log_LogStyle(\"[WARNING] \",\"D9F85C\",12,false,false,false,\"flixel/sounds/beep\",true);\n 138784: flixel_system_debug_log_LogStyle.ERROR = new flixel_system_debug_log_LogStyle(\"[ERROR] \",\"FF8888\",12,false,false,false,\"flixel/sounds/beep\",true);\n 138785: flixel_system_debug_log_LogStyle.NOTICE = new flixel_system_debug_log_LogStyle(\"[NOTICE] \",\"5CF878\",12,false);\n 138786: flixel_system_debug_log_LogStyle.CONSOLE = new flixel_system_debug_log_LogStyle(\"> \",\"5A96FA\",12,false);\n 138787: flixel_system_debug_stats__$Stats_GraphicMinimizeButton.resourceType = \"image/png\";\n 138788: flixel_system_debug_stats__$Stats_GraphicMinimizeButton.resourceName = \"__ASSET__:bitmap_flixel_system_debug_stats__Stats_GraphicMinimizeButton\";\n 138789: flixel_system_debug_stats__$Stats_GraphicMaximizeButton.resourceType = \"image/png\";\n 138790: flixel_system_debug_stats__$Stats_GraphicMaximizeButton.resourceName = \"__ASSET__:bitmap_flixel_system_debug_stats__Stats_GraphicMaximizeButton\";\n 138791  flixel_text__$FlxText_FlxTextAlign_$Impl_$.LEFT = \"left\";\n 138792  flixel_text__$FlxText_FlxTextAlign_$Impl_$.CENTER = \"center\";\n .....\n 140468  lime_utils__$Log_LogLevel_$Impl_$.WARN = 2;\n 140469  lime_utils__$Log_LogLevel_$Impl_$.INFO = 3;\n 140470: lime_utils__$Log_LogLevel_$Impl_$.DEBUG = 4;\n 140471  lime_utils__$Log_LogLevel_$Impl_$.VERBOSE = 5;\n 140472  lime_utils__$UInt16Array_UInt16Array_$Impl_$.BYTES_PER_ELEMENT = 2;\n .....\n 140474  lime_utils__$UInt8Array_UInt8Array_$Impl_$.BYTES_PER_ELEMENT = 1;\n 140475  lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.BYTES_PER_ELEMENT = 1;\n 140476: mphx_utils__$Log_DebugLevel_$Impl_$.None = 0;\n 140477: mphx_utils__$Log_DebugLevel_$Impl_$.Warnings = 1;\n 140478: mphx_utils__$Log_DebugLevel_$Impl_$.Errors = 2;\n 140479: mphx_utils__$Log_DebugLevel_$Impl_$.Info = 4;\n 140480: mphx_utils__$Log_DebugLevel_$Impl_$.Networking = 8;\n 140481: mphx_utils_Log.debugLevel = 2 | 1 | 4;\n 140482  mphx_utils_Log.usePrintLn = false;\n 140483  mphx_utils_Log.printLevel = true;\n .....\n 140509  openfl__$internal_stage3D_Context3DStateCache.MAX_NUM_REGISTERS = 1024;\n 140510  openfl__$internal_stage3D_Context3DStateCache.disableCache = true;\n 140511: openfl__$internal_stage3D_GLUtils.debug = false;\n 140512  openfl__$internal_stage3D_opengl_GLTextureBase.__supportsBGRA = null;\n 140513  openfl__$internal_stage3D_opengl_GLTextureBase.__compressedTextureFormats = null;\n\n/home/e1sif/Haxe/Leaderships/export/html5/haxe/debug.hxml:\n   23  -D ANDROID_SETUP=true\n   24  -D ANDROID_SDK=/home/e1sif/Android/Sdk\n   25: -D FLX_NO_DEBUG\n   26  -D ANDROID_NDK_ROOT=/home/e1sif/ndk/android-ndk-r15c\n   27  -D howlerjs\n   ..\n   39  -cp export/html5/haxe\n   40  -D html5\n   41: -debug\n\n/home/e1sif/Haxe/Leaderships/export/html5/haxe/final.hxml:\n   23  -D ANDROID_SETUP=true\n   24  -D ANDROID_SDK=/home/e1sif/Android/Sdk\n   25: -D FLX_NO_DEBUG\n   26  -D ANDROID_NDK_ROOT=/home/e1sif/ndk/android-ndk-r15c\n   27  -D howlerjs\n\n/home/e1sif/Haxe/Leaderships/export/html5/haxe/release.hxml:\n   23  -D ANDROID_SETUP=true\n   24  -D ANDROID_SDK=/home/e1sif/Android/Sdk\n   25: -D FLX_NO_DEBUG\n   26  -D ANDROID_NDK_ROOT=/home/e1sif/ndk/android-ndk-r15c\n   27  -D howlerjs\n\n/home/e1sif/Haxe/Leaderships/export/linux/bin/Leaderships:\n    <binary>\n\n/home/e1sif/Haxe/Leaderships/export/linux/bin/lime.ndll:\n    <binary>\n\n/home/e1sif/Haxe/Leaderships/export/linux/haxe/debug.hxml:\n   29  -D ANDROID_SDK=/home/e1sif/Android/Sdk\n   30  -D lime-cairo\n   31: -D FLX_NO_DEBUG\n   32  -D no-compilation\n   33  -D lime-opengl\n   ..\n   45  -cp export/linux/haxe\n   46  --macro keep(\"Main\")\n   47: -debug\n   48  \n\n/home/e1sif/Haxe/Leaderships/export/linux/haxe/final.hxml:\n   29  -D ANDROID_SDK=/home/e1sif/Android/Sdk\n   30  -D lime-cairo\n   31: -D FLX_NO_DEBUG\n   32  -D no-compilation\n   33  -D lime-opengl\n\n/home/e1sif/Haxe/Leaderships/export/linux/haxe/release.hxml:\n   29  -D ANDROID_SDK=/home/e1sif/Android/Sdk\n   30  -D lime-cairo\n   31: -D FLX_NO_DEBUG\n   32  -D no-compilation\n   33  -D lime-opengl\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/ApplicationMain:\n    <binary>\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/Build.xml:\n 2969     <depend name=\"include/mphx/utils/Log.h\"/>\n 2970    </file>\n 2971:   <file name=\"src/mphx/utils/_Log/DebugLevel_Impl_.cpp\" >\n 2972:    <depend name=\"include/mphx/utils/_Log/DebugLevel_Impl_.h\"/>\n 2973    </file>\n 2974    <file name=\"src/mphx/utils/ServerError.cpp\" >\n ....\n 3960     <depend name=\"include/lime/graphics/opengl/ext/KHR_texture_compression_astc_ldr.h\"/>\n 3961    </file>\n 3962:   <file name=\"src/lime/graphics/opengl/ext/KHR_debug.cpp\" >\n 3963:    <depend name=\"include/lime/graphics/opengl/ext/KHR_debug.h\"/>\n 3964    </file>\n 3965    <file name=\"src/lime/graphics/opengl/ext/IMG_texture_compression_pvrtc.cpp\" >\n ....\n 4047     <depend name=\"include/lime/graphics/opengl/ext/EXT_discard_framebuffer.h\"/>\n 4048    </file>\n 4049:   <file name=\"src/lime/graphics/opengl/ext/EXT_debug_marker.cpp\" >\n 4050:    <depend name=\"include/lime/graphics/opengl/ext/EXT_debug_marker.h\"/>\n 4051    </file>\n 4052:   <file name=\"src/lime/graphics/opengl/ext/EXT_debug_label.cpp\" >\n 4053:    <depend name=\"include/lime/graphics/opengl/ext/EXT_debug_label.h\"/>\n 4054    </file>\n 4055    <file name=\"src/lime/graphics/opengl/ext/EXT_color_buffer_half_float.cpp\" >\n ....\n 4686     <depend name=\"include/lime/graphics/opengl/ext/EXT_color_buffer_float.h\"/>\n 4687     <depend name=\"include/lime/graphics/opengl/ext/EXT_color_buffer_half_float.h\"/>\n 4688:    <depend name=\"include/lime/graphics/opengl/ext/EXT_debug_label.h\"/>\n 4689:    <depend name=\"include/lime/graphics/opengl/ext/EXT_debug_marker.h\"/>\n 4690     <depend name=\"include/lime/graphics/opengl/ext/EXT_discard_framebuffer.h\"/>\n 4691     <depend name=\"include/lime/graphics/opengl/ext/EXT_map_buffer_range.h\"/>\n ....\n 4716     <depend name=\"include/lime/graphics/opengl/ext/IMG_shader_binary.h\"/>\n 4717     <depend name=\"include/lime/graphics/opengl/ext/IMG_texture_compression_pvrtc.h\"/>\n 4718:    <depend name=\"include/lime/graphics/opengl/ext/KHR_debug.h\"/>\n 4719     <depend name=\"include/lime/graphics/opengl/ext/KHR_texture_compression_astc_ldr.h\"/>\n 4720     <depend name=\"include/lime/graphics/opengl/ext/NV_coverage_sample.h\"/>\n ....\n 5240     <depend name=\"include/flixel/FlxG.h\"/>\n 5241     <depend name=\"include/flixel/math/FlxMath.h\"/>\n 5242:    <depend name=\"include/flixel/system/frontEnds/DebuggerFrontEnd.h\"/>\n 5243     <depend name=\"include/flixel/system/frontEnds/LogFrontEnd.h\"/>\n 5244     <depend name=\"include/flixel/util/FlxPool_flixel_util_LabelValuePair.h\"/>\n ....\n 5894    </file>\n 5895    <file name=\"src/flixel/system/ui/FlxSystemButton.cpp\" >\n 5896:    <depend name=\"include/flixel/system/debug/DebuggerUtil.h\"/>\n 5897     <depend name=\"include/flixel/system/ui/FlxSystemButton.h\"/>\n 5898     <depend name=\"include/flixel/util/IFlxDestroyable.h\"/>\n ....\n 6013     <depend name=\"include/flixel/util/IFlxDestroyable.h\"/>\n 6014    </file>\n 6015:   <file name=\"src/flixel/system/debug/watch/TrackerProfile.cpp\" >\n 6016:    <depend name=\"include/flixel/system/debug/watch/TrackerProfile.h\"/>\n 6017     <depend name=\"include/flixel/util/FlxPool_flixel_util_LabelValuePair.h\"/>\n 6018     <depend name=\"include/flixel/util/FlxStringUtil.h\"/>\n ....\n 6021     <depend name=\"include/flixel/util/LabelValuePair.h\"/>\n 6022    </file>\n 6023:   <file name=\"src/flixel/system/debug/watch/Tracker.cpp\" >\n 6024:    <depend name=\"include/flixel/system/debug/Window.h\"/>\n 6025:    <depend name=\"include/flixel/system/debug/watch/Tracker.h\"/>\n 6026:    <depend name=\"include/flixel/system/debug/watch/Watch.h\"/>\n 6027     <depend name=\"include/openfl/display/BitmapData.h\"/>\n 6028     <depend name=\"include/openfl/display/DisplayObject.h\"/>\n ....\n 6035     <depend name=\"include/openfl/geom/Rectangle.h\"/>\n 6036    </file>\n 6037:   <file name=\"src/flixel/system/debug/watch/Watch.cpp\" >\n 6038:    <depend name=\"include/flixel/system/debug/Window.h\"/>\n 6039:    <depend name=\"include/flixel/system/debug/watch/Watch.h\"/>\n 6040     <depend name=\"include/openfl/display/BitmapData.h\"/>\n 6041     <depend name=\"include/openfl/display/DisplayObject.h\"/>\n ....\n 6048     <depend name=\"include/openfl/geom/Rectangle.h\"/>\n 6049    </file>\n 6050:   <file name=\"src/flixel/system/debug/stats/_Stats/GraphicMaximizeButton.cpp\" >\n 6051:    <depend name=\"include/flixel/system/debug/stats/_Stats/GraphicMaximizeButton.h\"/>\n 6052     <depend name=\"include/haxe/Resource.h\"/>\n 6053     <depend name=\"include/haxe/io/Bytes.h\"/>\n ....\n 6060     <depend name=\"include/openfl/utils/_ByteArray/ByteArray_Impl_.h\"/>\n 6061    </file>\n 6062:   <file name=\"src/flixel/system/debug/stats/_Stats/GraphicMinimizeButton.cpp\" >\n 6063:    <depend name=\"include/flixel/system/debug/stats/_Stats/GraphicMinimizeButton.h\"/>\n 6064     <depend name=\"include/haxe/Resource.h\"/>\n 6065     <depend name=\"include/haxe/io/Bytes.h\"/>\n ....\n 6072     <depend name=\"include/openfl/utils/_ByteArray/ByteArray_Impl_.h\"/>\n 6073    </file>\n 6074:   <file name=\"src/flixel/system/debug/log/LogStyle.cpp\" >\n 6075:    <depend name=\"include/flixel/system/debug/log/LogStyle.h\"/>\n 6076    </file>\n 6077:   <file name=\"src/flixel/system/debug/interaction/tools/Pointer.cpp\" >\n 6078     <depend name=\"include/flixel/FlxBasic.h\"/>\n 6079     <depend name=\"include/flixel/FlxCamera.h\"/>\n ....\n 6085     <depend name=\"include/flixel/math/FlxPoint.h\"/>\n 6086     <depend name=\"include/flixel/math/FlxRect.h\"/>\n 6087:    <depend name=\"include/flixel/system/debug/Window.h\"/>\n 6088:    <depend name=\"include/flixel/system/debug/interaction/Interaction.h\"/>\n 6089:    <depend name=\"include/flixel/system/debug/interaction/tools/GraphicCursorCross.h\"/>\n 6090:    <depend name=\"include/flixel/system/debug/interaction/tools/Pointer.h\"/>\n 6091:    <depend name=\"include/flixel/system/debug/interaction/tools/Tool.h\"/>\n 6092     <depend name=\"include/flixel/system/frontEnds/ConsoleFrontEnd.h\"/>\n 6093     <depend name=\"include/flixel/util/FlxArrayUtil.h\"/>\n ....\n 6108     <depend name=\"include/openfl/geom/Rectangle.h\"/>\n 6109    </file>\n 6110:   <file name=\"src/flixel/system/debug/interaction/tools/GraphicCursorCross.cpp\" >\n 6111:    <depend name=\"include/flixel/system/debug/interaction/tools/GraphicCursorCross.h\"/>\n 6112     <depend name=\"include/haxe/Resource.h\"/>\n 6113     <depend name=\"include/haxe/io/Bytes.h\"/>\n ....\n 6120     <depend name=\"include/openfl/utils/_ByteArray/ByteArray_Impl_.h\"/>\n 6121    </file>\n 6122:   <file name=\"src/flixel/system/debug/interaction/tools/Mover.cpp\" >\n 6123     <depend name=\"include/Std.h\"/>\n 6124     <depend name=\"include/flixel/FlxBasic.h\"/>\n ....\n 6126     <depend name=\"include/flixel/group/FlxTypedGroup.h\"/>\n 6127     <depend name=\"include/flixel/math/FlxPoint.h\"/>\n 6128:    <depend name=\"include/flixel/system/debug/Window.h\"/>\n 6129:    <depend name=\"include/flixel/system/debug/interaction/Interaction.h\"/>\n 6130:    <depend name=\"include/flixel/system/debug/interaction/tools/GraphicMoverTool.h\"/>\n 6131:    <depend name=\"include/flixel/system/debug/interaction/tools/Mover.h\"/>\n 6132:    <depend name=\"include/flixel/system/debug/interaction/tools/Pointer.h\"/>\n 6133:    <depend name=\"include/flixel/system/debug/interaction/tools/Tool.h\"/>\n 6134     <depend name=\"include/flixel/util/IFlxDestroyable.h\"/>\n 6135     <depend name=\"include/flixel/util/IFlxPooled.h\"/>\n ....\n 6143     <depend name=\"include/openfl/events/IEventDispatcher.h\"/>\n 6144    </file>\n 6145:   <file name=\"src/flixel/system/debug/interaction/tools/GraphicMoverTool.cpp\" >\n 6146:    <depend name=\"include/flixel/system/debug/interaction/tools/GraphicMoverTool.h\"/>\n 6147     <depend name=\"include/haxe/Resource.h\"/>\n 6148     <depend name=\"include/haxe/io/Bytes.h\"/>\n ....\n 6155     <depend name=\"include/openfl/utils/_ByteArray/ByteArray_Impl_.h\"/>\n 6156    </file>\n 6157:   <file name=\"src/flixel/system/debug/interaction/tools/Eraser.cpp\" >\n 6158     <depend name=\"include/Std.h\"/>\n 6159     <depend name=\"include/flixel/FlxBasic.h\"/>\n ....\n 6164     <depend name=\"include/flixel/group/FlxTypedGroup.h\"/>\n 6165     <depend name=\"include/flixel/group/FlxTypedGroupIterator.h\"/>\n 6166:    <depend name=\"include/flixel/system/debug/Window.h\"/>\n 6167:    <depend name=\"include/flixel/system/debug/interaction/Interaction.h\"/>\n 6168:    <depend name=\"include/flixel/system/debug/interaction/tools/Eraser.h\"/>\n 6169:    <depend name=\"include/flixel/system/debug/interaction/tools/Tool.h\"/>\n 6170     <depend name=\"include/flixel/util/IFlxDestroyable.h\"/>\n 6171     <depend name=\"include/openfl/display/DisplayObject.h\"/>\n ....\n 6177     <depend name=\"include/openfl/events/IEventDispatcher.h\"/>\n 6178    </file>\n 6179:   <file name=\"src/flixel/system/debug/interaction/tools/Tool.cpp\" >\n 6180     <depend name=\"include/Type.h\"/>\n 6181:    <depend name=\"include/flixel/system/debug/Tooltip.h\"/>\n 6182:    <depend name=\"include/flixel/system/debug/Window.h\"/>\n 6183:    <depend name=\"include/flixel/system/debug/interaction/Interaction.h\"/>\n 6184:    <depend name=\"include/flixel/system/debug/interaction/tools/Tool.h\"/>\n 6185     <depend name=\"include/flixel/system/ui/FlxSystemButton.h\"/>\n 6186     <depend name=\"include/flixel/util/IFlxDestroyable.h\"/>\n ....\n 6194     <depend name=\"include/openfl/events/IEventDispatcher.h\"/>\n 6195    </file>\n 6196:   <file name=\"src/flixel/system/debug/interaction/tools/GraphicEraserTool.cpp\" >\n 6197:    <depend name=\"include/flixel/system/debug/interaction/tools/GraphicEraserTool.h\"/>\n 6198     <depend name=\"include/haxe/Resource.h\"/>\n 6199     <depend name=\"include/haxe/io/Bytes.h\"/>\n ....\n 6206     <depend name=\"include/openfl/utils/_ByteArray/ByteArray_Impl_.h\"/>\n 6207    </file>\n 6208:   <file name=\"src/flixel/system/debug/interaction/Interaction.cpp\" >\n 6209     <depend name=\"include/Std.h\"/>\n 6210     <depend name=\"include/flixel/FlxBasic.h\"/>\n ....\n 6222     <depend name=\"include/flixel/math/FlxPoint.h\"/>\n 6223     <depend name=\"include/flixel/math/FlxRect.h\"/>\n 6224:    <depend name=\"include/flixel/system/debug/FlxDebugger.h\"/>\n 6225:    <depend name=\"include/flixel/system/debug/GraphicInteractive.h\"/>\n 6226:    <depend name=\"include/flixel/system/debug/Window.h\"/>\n 6227:    <depend name=\"include/flixel/system/debug/interaction/Interaction.h\"/>\n 6228:    <depend name=\"include/flixel/system/debug/interaction/tools/Eraser.h\"/>\n 6229:    <depend name=\"include/flixel/system/debug/interaction/tools/Mover.h\"/>\n 6230:    <depend name=\"include/flixel/system/debug/interaction/tools/Pointer.h\"/>\n 6231:    <depend name=\"include/flixel/system/debug/interaction/tools/Tool.h\"/>\n 6232:    <depend name=\"include/flixel/system/frontEnds/DebuggerFrontEnd.h\"/>\n 6233     <depend name=\"include/flixel/system/frontEnds/SignalFrontEnd.h\"/>\n 6234     <depend name=\"include/flixel/system/scaleModes/BaseScaleMode.h\"/>\n ....\n 6266     <depend name=\"include/openfl/geom/Rectangle.h\"/>\n 6267    </file>\n 6268:   <file name=\"src/flixel/system/debug/console/_ConsoleUtil/Interp.cpp\" >\n 6269     <depend name=\"include/Reflect.h\"/>\n 6270:    <depend name=\"include/flixel/system/debug/console/_ConsoleUtil/Interp.h\"/>\n 6271     <depend name=\"include/haxe/IMap.h\"/>\n 6272     <depend name=\"include/haxe/ds/StringMap.h\"/>\n ....\n 6293     <depend name=\"include/hscript/_Interp/Stop.h\"/>\n 6294    </file>\n 6295:   <file name=\"src/flixel/system/debug/console/ConsoleUtil.cpp\" >\n 6296     <depend name=\"include/Reflect.h\"/>\n 6297     <depend name=\"include/Std.h\"/>\n ....\n 6299     <depend name=\"include/Type.h\"/>\n 6300     <depend name=\"include/flixel/FlxG.h\"/>\n 6301:    <depend name=\"include/flixel/system/debug/console/ConsoleUtil.h\"/>\n 6302:    <depend name=\"include/flixel/system/debug/console/_ConsoleUtil/Interp.h\"/>\n 6303:    <depend name=\"include/flixel/system/debug/log/LogStyle.h\"/>\n 6304     <depend name=\"include/flixel/system/frontEnds/LogFrontEnd.h\"/>\n 6305     <depend name=\"include/flixel/util/FlxStringUtil.h\"/>\n ....\n 6310     <depend name=\"include/hscript/Parser.h\"/>\n 6311    </file>\n 6312:   <file name=\"src/flixel/system/debug/completion/CompletionListScrollBar.cpp\" >\n 6313:    <depend name=\"include/flixel/system/debug/completion/CompletionListScrollBar.h\"/>\n 6314     <depend name=\"include/openfl/display/Bitmap.h\"/>\n 6315     <depend name=\"include/openfl/display/BitmapData.h\"/>\n ....\n 6322     <depend name=\"include/openfl/events/IEventDispatcher.h\"/>\n 6323    </file>\n 6324:   <file name=\"src/flixel/system/debug/completion/CompletionListEntry.cpp\" >\n 6325:    <depend name=\"include/flixel/system/debug/DebuggerUtil.h\"/>\n 6326:    <depend name=\"include/flixel/system/debug/completion/CompletionListEntry.h\"/>\n 6327     <depend name=\"include/openfl/display/Bitmap.h\"/>\n 6328     <depend name=\"include/openfl/display/BitmapData.h\"/>\n ....\n 6336     <depend name=\"include/openfl/text/TextField.h\"/>\n 6337    </file>\n 6338:   <file name=\"src/flixel/system/debug/completion/CompletionList.cpp\" >\n 6339     <depend name=\"include/EReg.h\"/>\n 6340     <depend name=\"include/Std.h\"/>\n 6341     <depend name=\"include/StringTools.h\"/>\n 6342:    <depend name=\"include/flixel/system/debug/completion/CompletionList.h\"/>\n 6343:    <depend name=\"include/flixel/system/debug/completion/CompletionListEntry.h\"/>\n 6344:    <depend name=\"include/flixel/system/debug/completion/CompletionListScrollBar.h\"/>\n 6345     <depend name=\"include/lime/app/IModule.h\"/>\n 6346     <depend name=\"include/openfl/Lib.h\"/>\n ....\n 6357     <depend name=\"include/openfl/events/KeyboardEvent.h\"/>\n 6358    </file>\n 6359:   <file name=\"src/flixel/system/debug/Window.cpp\" >\n 6360     <depend name=\"include/Std.h\"/>\n 6361     <depend name=\"include/flixel/FlxG.h\"/>\n 6362:    <depend name=\"include/flixel/system/debug/DebuggerUtil.h\"/>\n 6363:    <depend name=\"include/flixel/system/debug/GraphicCloseButton.h\"/>\n 6364:    <depend name=\"include/flixel/system/debug/Window.h\"/>\n 6365:    <depend name=\"include/flixel/system/debug/_Window/GraphicWindowHandle.h\"/>\n 6366     <depend name=\"include/flixel/system/ui/FlxSystemButton.h\"/>\n 6367     <depend name=\"include/flixel/util/FlxDestroyUtil.h\"/>\n ....\n 6387     <depend name=\"include/openfl/text/TextField.h\"/>\n 6388    </file>\n 6389:   <file name=\"src/flixel/system/debug/_Window/GraphicWindowHandle.cpp\" >\n 6390:    <depend name=\"include/flixel/system/debug/_Window/GraphicWindowHandle.h\"/>\n 6391     <depend name=\"include/haxe/Resource.h\"/>\n 6392     <depend name=\"include/haxe/io/Bytes.h\"/>\n ....\n 6399     <depend name=\"include/openfl/utils/_ByteArray/ByteArray_Impl_.h\"/>\n 6400    </file>\n 6401:   <file name=\"src/flixel/system/debug/TooltipOverlay.cpp\" >\n 6402     <depend name=\"include/Std.h\"/>\n 6403:    <depend name=\"include/flixel/system/debug/DebuggerUtil.h\"/>\n 6404:    <depend name=\"include/flixel/system/debug/TooltipOverlay.h\"/>\n 6405     <depend name=\"include/flixel/util/FlxDestroyUtil.h\"/>\n 6406     <depend name=\"include/lime/app/IModule.h\"/>\n ....\n 6422     <depend name=\"include/openfl/text/TextField.h\"/>\n 6423    </file>\n 6424:   <file name=\"src/flixel/system/debug/Tooltip.cpp\" >\n 6425:    <depend name=\"include/flixel/system/debug/Tooltip.h\"/>\n 6426:    <depend name=\"include/flixel/system/debug/TooltipOverlay.h\"/>\n 6427     <depend name=\"include/openfl/display/DisplayObject.h\"/>\n 6428     <depend name=\"include/openfl/display/DisplayObjectContainer.h\"/>\n ....\n 6433     <depend name=\"include/openfl/events/IEventDispatcher.h\"/>\n 6434    </file>\n 6435:   <file name=\"src/flixel/system/debug/FlxDebuggerLayout.cpp\" >\n 6436:    <depend name=\"include/flixel/system/debug/FlxDebuggerLayout.h\"/>\n 6437    </file>\n 6438:   <file name=\"src/flixel/system/debug/FlxDebugger.cpp\" >\n 6439:    <depend name=\"include/flixel/system/debug/FlxDebugger.h\"/>\n 6440     <depend name=\"include/openfl/display/DisplayObject.h\"/>\n 6441     <depend name=\"include/openfl/display/DisplayObjectContainer.h\"/>\n ....\n 6446     <depend name=\"include/openfl/events/IEventDispatcher.h\"/>\n 6447    </file>\n 6448:   <file name=\"src/flixel/system/debug/GraphicInteractive.cpp\" >\n 6449:    <depend name=\"include/flixel/system/debug/GraphicInteractive.h\"/>\n 6450     <depend name=\"include/haxe/Resource.h\"/>\n 6451     <depend name=\"include/haxe/io/Bytes.h\"/>\n ....\n 6458     <depend name=\"include/openfl/utils/_ByteArray/ByteArray_Impl_.h\"/>\n 6459    </file>\n 6460:   <file name=\"src/flixel/system/debug/GraphicCloseButton.cpp\" >\n 6461:    <depend name=\"include/flixel/system/debug/GraphicCloseButton.h\"/>\n 6462     <depend name=\"include/haxe/Resource.h\"/>\n 6463     <depend name=\"include/haxe/io/Bytes.h\"/>\n ....\n 6470     <depend name=\"include/openfl/utils/_ByteArray/ByteArray_Impl_.h\"/>\n 6471    </file>\n 6472:   <file name=\"src/flixel/system/debug/GraphicArrowRight.cpp\" >\n 6473:    <depend name=\"include/flixel/system/debug/GraphicArrowRight.h\"/>\n 6474     <depend name=\"include/haxe/Resource.h\"/>\n 6475     <depend name=\"include/haxe/io/Bytes.h\"/>\n ....\n 6482     <depend name=\"include/openfl/utils/_ByteArray/ByteArray_Impl_.h\"/>\n 6483    </file>\n 6484:   <file name=\"src/flixel/system/debug/GraphicArrowLeft.cpp\" >\n 6485:    <depend name=\"include/flixel/system/debug/GraphicArrowLeft.h\"/>\n 6486     <depend name=\"include/haxe/Resource.h\"/>\n 6487     <depend name=\"include/haxe/io/Bytes.h\"/>\n ....\n 6494     <depend name=\"include/openfl/utils/_ByteArray/ByteArray_Impl_.h\"/>\n 6495    </file>\n 6496:   <file name=\"src/flixel/system/debug/GraphicConsole.cpp\" >\n 6497:    <depend name=\"include/flixel/system/debug/GraphicConsole.h\"/>\n 6498     <depend name=\"include/haxe/Resource.h\"/>\n 6499     <depend name=\"include/haxe/io/Bytes.h\"/>\n ....\n 6506     <depend name=\"include/openfl/utils/_ByteArray/ByteArray_Impl_.h\"/>\n 6507    </file>\n 6508:   <file name=\"src/flixel/system/debug/GraphicBitmapLog.cpp\" >\n 6509:    <depend name=\"include/flixel/system/debug/GraphicBitmapLog.h\"/>\n 6510     <depend name=\"include/haxe/Resource.h\"/>\n 6511     <depend name=\"include/haxe/io/Bytes.h\"/>\n ....\n 6518     <depend name=\"include/openfl/utils/_ByteArray/ByteArray_Impl_.h\"/>\n 6519    </file>\n 6520:   <file name=\"src/flixel/system/debug/GraphicWatch.cpp\" >\n 6521:    <depend name=\"include/flixel/system/debug/GraphicWatch.h\"/>\n 6522     <depend name=\"include/haxe/Resource.h\"/>\n 6523     <depend name=\"include/haxe/io/Bytes.h\"/>\n ....\n 6530     <depend name=\"include/openfl/utils/_ByteArray/ByteArray_Impl_.h\"/>\n 6531    </file>\n 6532:   <file name=\"src/flixel/system/debug/GraphicStats.cpp\" >\n 6533:    <depend name=\"include/flixel/system/debug/GraphicStats.h\"/>\n 6534     <depend name=\"include/haxe/Resource.h\"/>\n 6535     <depend name=\"include/haxe/io/Bytes.h\"/>\n ....\n 6542     <depend name=\"include/openfl/utils/_ByteArray/ByteArray_Impl_.h\"/>\n 6543    </file>\n 6544:   <file name=\"src/flixel/system/debug/GraphicLog.cpp\" >\n 6545:    <depend name=\"include/flixel/system/debug/GraphicLog.h\"/>\n 6546     <depend name=\"include/haxe/Resource.h\"/>\n 6547     <depend name=\"include/haxe/io/Bytes.h\"/>\n ....\n 6554     <depend name=\"include/openfl/utils/_ByteArray/ByteArray_Impl_.h\"/>\n 6555    </file>\n 6556:   <file name=\"src/flixel/system/debug/_FlxDebugger/GraphicDrawDebug.cpp\" >\n 6557:    <depend name=\"include/flixel/system/debug/_FlxDebugger/GraphicDrawDebug.h\"/>\n 6558     <depend name=\"include/haxe/Resource.h\"/>\n 6559     <depend name=\"include/haxe/io/Bytes.h\"/>\n ....\n 6566     <depend name=\"include/openfl/utils/_ByteArray/ByteArray_Impl_.h\"/>\n 6567    </file>\n 6568:   <file name=\"src/flixel/system/debug/_FlxDebugger/GraphicFlixel.cpp\" >\n 6569:    <depend name=\"include/flixel/system/debug/_FlxDebugger/GraphicFlixel.h\"/>\n 6570     <depend name=\"include/haxe/Resource.h\"/>\n 6571     <depend name=\"include/haxe/io/Bytes.h\"/>\n ....\n 6578     <depend name=\"include/openfl/utils/_ByteArray/ByteArray_Impl_.h\"/>\n 6579    </file>\n 6580:   <file name=\"src/flixel/system/debug/DebuggerUtil.cpp\" >\n 6581     <depend name=\"include/flixel/system/FlxAssets.h\"/>\n 6582:    <depend name=\"include/flixel/system/debug/DebuggerUtil.h\"/>\n 6583     <depend name=\"include/openfl/display/BitmapData.h\"/>\n 6584     <depend name=\"include/openfl/display/DisplayObject.h\"/>\n ....\n 9737     <depend name=\"include/flixel/system/frontEnds/CameraFrontEnd.h\"/>\n 9738     <depend name=\"include/flixel/system/frontEnds/ConsoleFrontEnd.h\"/>\n 9739:    <depend name=\"include/flixel/system/frontEnds/DebuggerFrontEnd.h\"/>\n 9740     <depend name=\"include/flixel/system/frontEnds/InputFrontEnd.h\"/>\n 9741     <depend name=\"include/flixel/system/frontEnds/LogFrontEnd.h\"/>\n ....\n 9834    </file>\n 9835    <file name=\"src/flixel/system/frontEnds/LogFrontEnd.cpp\" >\n 9836:    <depend name=\"include/flixel/system/debug/log/LogStyle.h\"/>\n 9837     <depend name=\"include/flixel/system/frontEnds/LogFrontEnd.h\"/>\n 9838     <depend name=\"include/haxe/Log.h\"/>\n ....\n 9850     <depend name=\"include/flixel/util/IFlxDestroyable.h\"/>\n 9851    </file>\n 9852:   <file name=\"src/flixel/system/frontEnds/DebuggerFrontEnd.cpp\" >\n 9853:    <depend name=\"include/flixel/system/debug/FlxDebuggerLayout.h\"/>\n 9854:    <depend name=\"include/flixel/system/debug/Window.h\"/>\n 9855:    <depend name=\"include/flixel/system/debug/watch/TrackerProfile.h\"/>\n 9856:    <depend name=\"include/flixel/system/frontEnds/DebuggerFrontEnd.h\"/>\n 9857     <depend name=\"include/flixel/system/ui/FlxSystemButton.h\"/>\n 9858     <depend name=\"include/flixel/util/FlxHorizontalAlign.h\"/>\n ....\n 10125     <depend name=\"include/flixel/system/FlxSound.h\"/>\n 10126     <depend name=\"include/flixel/system/FlxSoundGroup.h\"/>\n 10127:    <depend name=\"include/flixel/system/frontEnds/DebuggerFrontEnd.h\"/>\n 10128     <depend name=\"include/flixel/system/frontEnds/SoundFrontEnd.h\"/>\n 10129     <depend name=\"include/flixel/text/FlxText.h\"/>\n .....\n 11208     <depend name=\"include/flixel/tile/FlxTilemapAutoTiling.h\"/>\n 11209     <depend name=\"include/flixel/text/FlxTextBorderStyle.h\"/>\n 11210:    <depend name=\"include/flixel/system/debug/FlxDebuggerLayout.h\"/>\n 11211     <depend name=\"include/flixel/input/gamepad/mappings/Manufacturer.h\"/>\n 11212     <depend name=\"include/flixel/input/gamepad/FlxAnalogToDigitalMode.h\"/>\n .....\n 11328     <depend name=\"include/openfl/Lib.h\"/>\n 11329     <depend name=\"include/mphx/utils/Log.h\"/>\n 11330:    <depend name=\"include/mphx/utils/_Log/DebugLevel_Impl_.h\"/>\n 11331     <depend name=\"include/lime/utils/_UInt8ClampedArray/UInt8ClampedArray_Impl_.h\"/>\n 11332     <depend name=\"include/lime/utils/_UInt8Array/UInt8Array_Impl_.h\"/>\n .....\n 11392     <depend name=\"include/flixel/tile/GraphicAuto.h\"/>\n 11393     <depend name=\"include/flixel/text/_FlxText/FlxTextAlign_Impl_.h\"/>\n 11394:    <depend name=\"include/flixel/system/debug/stats/_Stats/GraphicMaximizeButton.h\"/>\n 11395:    <depend name=\"include/flixel/system/debug/stats/_Stats/GraphicMinimizeButton.h\"/>\n 11396:    <depend name=\"include/flixel/system/debug/log/LogStyle.h\"/>\n 11397:    <depend name=\"include/flixel/system/debug/interaction/tools/GraphicCursorCross.h\"/>\n 11398:    <depend name=\"include/flixel/system/debug/interaction/tools/GraphicMoverTool.h\"/>\n 11399:    <depend name=\"include/flixel/system/debug/interaction/tools/GraphicEraserTool.h\"/>\n 11400:    <depend name=\"include/flixel/system/debug/completion/CompletionListScrollBar.h\"/>\n 11401:    <depend name=\"include/flixel/system/debug/completion/CompletionListEntry.h\"/>\n 11402:    <depend name=\"include/flixel/system/debug/Window.h\"/>\n 11403:    <depend name=\"include/flixel/system/debug/_Window/GraphicWindowHandle.h\"/>\n 11404:    <depend name=\"include/flixel/system/debug/TooltipOverlay.h\"/>\n 11405:    <depend name=\"include/flixel/system/debug/Tooltip.h\"/>\n 11406:    <depend name=\"include/flixel/system/debug/GraphicInteractive.h\"/>\n 11407:    <depend name=\"include/flixel/system/debug/GraphicCloseButton.h\"/>\n 11408:    <depend name=\"include/flixel/system/debug/GraphicArrowRight.h\"/>\n 11409:    <depend name=\"include/flixel/system/debug/GraphicArrowLeft.h\"/>\n 11410:    <depend name=\"include/flixel/system/debug/GraphicConsole.h\"/>\n 11411:    <depend name=\"include/flixel/system/debug/GraphicBitmapLog.h\"/>\n 11412:    <depend name=\"include/flixel/system/debug/GraphicWatch.h\"/>\n 11413:    <depend name=\"include/flixel/system/debug/GraphicStats.h\"/>\n 11414:    <depend name=\"include/flixel/system/debug/GraphicLog.h\"/>\n 11415:    <depend name=\"include/flixel/system/debug/_FlxDebugger/GraphicDrawDebug.h\"/>\n 11416:    <depend name=\"include/flixel/system/debug/_FlxDebugger/GraphicFlixel.h\"/>\n 11417     <depend name=\"include/flixel/system/FlxQuadTree.h\"/>\n 11418     <depend name=\"include/flixel/system/_FlxPreloader/GraphicLogoCorners.h\"/>\n .....\n 11535     <depend name=\"include/lime/_backend/native/NativeCFFI.h\"/>\n 11536    </file>\n 11537:   <file name=\"src/__files__.cpp\" if='HXCPP_DEBUGGER'>\n 11538    </file>\n 11539:    <file name=\"${HXCPP}/src/hx/NoFiles.cpp\" unless=\"HXCPP_DEBUGGER\" />\n 11540    <file name=\"src/__resources__.cpp\" >\n 11541    </file>\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/Options.txt:\n    9  FLX_MOUSE=1\n   10  FLX_MOUSE_ADVANCED=1\n   11: FLX_NO_DEBUG=1\n   12  FLX_NO_TOUCH=1\n   13  FLX_POINTER_INPUT=1\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/FlxG.h:\n   31  HX_DECLARE_CLASS3(flixel,_hx_system,frontEnds,CameraFrontEnd)\n   32  HX_DECLARE_CLASS3(flixel,_hx_system,frontEnds,ConsoleFrontEnd)\n   33: HX_DECLARE_CLASS3(flixel,_hx_system,frontEnds,DebuggerFrontEnd)\n   34  HX_DECLARE_CLASS3(flixel,_hx_system,frontEnds,InputFrontEnd)\n   35  HX_DECLARE_CLASS3(flixel,_hx_system,frontEnds,LogFrontEnd)\n   ..\n  126  \t\tstatic  ::flixel::_hx_system::frontEnds::BitmapLogFrontEnd bitmapLog;\n  127  \t\tstatic  ::flixel::_hx_system::frontEnds::WatchFrontEnd watch;\n  128: \t\tstatic  ::flixel::_hx_system::frontEnds::DebuggerFrontEnd debugger;\n  129  \t\tstatic  ::flixel::_hx_system::frontEnds::VCRFrontEnd vcr;\n  130  \t\tstatic  ::flixel::_hx_system::frontEnds::BitmapFrontEnd bitmap;\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/FlxAssets.h:\n   64  \t\tstatic void __boot();\n   65  \t\tstatic ::String FONT_DEFAULT;\n   66: \t\tstatic ::String FONT_DEBUGGER;\n   67  \t\tstatic void drawLogo( ::openfl::display::Graphics graph);\n   68  \t\tstatic ::Dynamic drawLogo_dyn();\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/DebuggerUtil.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_DebuggerUtil\n    3: #define INCLUDED_flixel_system_debug_DebuggerUtil\n    4  \n    5  #ifndef HXCPP_H\n    .\n    7  #endif\n    8  \n    9: HX_DECLARE_CLASS3(flixel,_hx_system,debug,DebuggerUtil)\n   10  HX_DECLARE_CLASS2(openfl,display,BitmapData)\n   11  HX_DECLARE_CLASS2(openfl,display,DisplayObject)\n   ..\n   18  namespace flixel{\n   19  namespace _hx_system{\n   20: namespace debug{\n   21  \n   22  \n   23: class HXCPP_CLASS_ATTRIBUTES DebuggerUtil_obj : public hx::Object\n   24  {\n   25  \tpublic:\n   26  \t\ttypedef hx::Object super;\n   27: \t\ttypedef DebuggerUtil_obj OBJ_;\n   28: \t\tDebuggerUtil_obj();\n   29  \n   30  \tpublic:\n   ..\n   32  \n   33  \t\tvoid __construct();\n   34: \t\tinline void *operator new(size_t inSize, bool inContainer=false,const char *inName=\"flixel.system.debug.DebuggerUtil\")\n   35  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   36  \t\tinline void *operator new(size_t inSize, int extra)\n   37: \t\t\t{ return hx::Object::operator new(inSize+extra,false,\"flixel.system.debug.DebuggerUtil\"); }\n   38  \n   39: \t\thx::ObjectPtr< DebuggerUtil_obj > __new() {\n   40: \t\t\thx::ObjectPtr< DebuggerUtil_obj > __this = new DebuggerUtil_obj();\n   41  \t\t\t__this->__construct();\n   42  \t\t\treturn __this;\n   43  \t\t}\n   44  \n   45: \t\tstatic hx::ObjectPtr< DebuggerUtil_obj > __alloc(hx::Ctx *_hx_ctx) {\n   46: \t\t\tDebuggerUtil_obj *__this = (DebuggerUtil_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DebuggerUtil_obj), false, \"flixel.system.debug.DebuggerUtil\"));\n   47: \t\t\t*(void **)__this = DebuggerUtil_obj::_hx_vtable;\n   48  \t\t\treturn __this;\n   49  \t\t}\n   ..\n   52  \t\tstatic Dynamic __CreateEmpty();\n   53  \t\tstatic Dynamic __Create(hx::DynamicArray inArgs);\n   54: \t\t//~DebuggerUtil_obj();\n   55  \n   56  \t\tHX_DO_RTTI_ALL;\n   ..\n   58  \t\tstatic void __register();\n   59  \t\tbool _hx_isInstanceOf(int inClassId);\n   60: \t\t::String __ToString() const { return HX_HCSTRING(\"DebuggerUtil\",\"\\xe3\",\"\\x18\",\"\\x20\",\"\\x50\"); }\n   61  \n   62  \t\tstatic  ::openfl::text::TextField createTextField(hx::Null< Float >  X,hx::Null< Float >  Y,hx::Null< int >  Color,hx::Null< int >  Size);\n   ..\n   73  } // end namespace flixel\n   74  } // end namespace system\n   75: } // end namespace debug\n   76  \n   77: #endif /* INCLUDED_flixel_system_debug_DebuggerUtil */ \n   78  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/FlxDebugger.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_FlxDebugger\n    3: #define INCLUDED_flixel_system_debug_FlxDebugger\n    4  \n    5  #ifndef HXCPP_H\n    .\n   10  #include <openfl/display/Sprite.h>\n   11  #endif\n   12: HX_DECLARE_CLASS3(flixel,_hx_system,debug,FlxDebugger)\n   13  HX_DECLARE_CLASS2(openfl,display,DisplayObject)\n   14  HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)\n   ..\n   21  namespace flixel{\n   22  namespace _hx_system{\n   23: namespace debug{\n   24  \n   25  \n   26: class HXCPP_CLASS_ATTRIBUTES FlxDebugger_obj : public  ::openfl::display::Sprite_obj\n   27  {\n   28  \tpublic:\n   29  \t\ttypedef  ::openfl::display::Sprite_obj super;\n   30: \t\ttypedef FlxDebugger_obj OBJ_;\n   31: \t\tFlxDebugger_obj();\n   32  \n   33  \tpublic:\n   ..\n   35  \n   36  \t\tvoid __construct();\n   37: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.FlxDebugger\")\n   38  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   39  \t\tinline void *operator new(size_t inSize, int extra)\n   40: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.FlxDebugger\"); }\n   41: \t\tstatic hx::ObjectPtr< FlxDebugger_obj > __new();\n   42: \t\tstatic hx::ObjectPtr< FlxDebugger_obj > __alloc(hx::Ctx *_hx_ctx);\n   43  \t\tstatic void * _hx_vtable;\n   44  \t\tstatic Dynamic __CreateEmpty();\n   45  \t\tstatic Dynamic __Create(hx::DynamicArray inArgs);\n   46: \t\t//~FlxDebugger_obj();\n   47  \n   48  \t\tHX_DO_RTTI_ALL;\n   49  \t\tstatic void __register();\n   50  \t\tbool _hx_isInstanceOf(int inClassId);\n   51: \t\t::String __ToString() const { return HX_HCSTRING(\"FlxDebugger\",\"\\x93\",\"\\xfe\",\"\\x01\",\"\\xa8\"); }\n   52  \n   53  };\n   ..\n   55  } // end namespace flixel\n   56  } // end namespace system\n   57: } // end namespace debug\n   58  \n   59: #endif /* INCLUDED_flixel_system_debug_FlxDebugger */ \n   60  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/FlxDebuggerLayout.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_FlxDebuggerLayout\n    3: #define INCLUDED_flixel_system_debug_FlxDebuggerLayout\n    4  \n    5  #ifndef HXCPP_H\n    .\n    7  #endif\n    8  \n    9: HX_DECLARE_CLASS3(flixel,_hx_system,debug,FlxDebuggerLayout)\n   10  namespace flixel{\n   11  namespace _hx_system{\n   12: namespace debug{\n   13  \n   14  \n   15: class FlxDebuggerLayout_obj : public hx::EnumBase_obj\n   16  {\n   17  \ttypedef hx::EnumBase_obj super;\n   18: \t\ttypedef FlxDebuggerLayout_obj OBJ_;\n   19  \n   20  \tpublic:\n   21: \t\tFlxDebuggerLayout_obj() {};\n   22  \t\tHX_DO_ENUM_RTTI;\n   23  \t\tstatic void __boot();\n   24  \t\tstatic void __register();\n   25  \t\tstatic bool __GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp);\n   26: \t\t::String GetEnumName( ) const { return HX_HCSTRING(\"flixel.system.debug.FlxDebuggerLayout\",\"\\x15\",\"\\xd0\",\"\\x5b\",\"\\x09\"); }\n   27: \t\t::String __ToString() const { return HX_HCSTRING(\"FlxDebuggerLayout.\",\"\\xf1\",\"\\x97\",\"\\x82\",\"\\xc5\") + _hx_tag; }\n   28  \n   29: \t\tstatic ::flixel::_hx_system::debug::FlxDebuggerLayout BIG;\n   30: \t\tstatic inline ::flixel::_hx_system::debug::FlxDebuggerLayout BIG_dyn() { return BIG; }\n   31: \t\tstatic ::flixel::_hx_system::debug::FlxDebuggerLayout LEFT;\n   32: \t\tstatic inline ::flixel::_hx_system::debug::FlxDebuggerLayout LEFT_dyn() { return LEFT; }\n   33: \t\tstatic ::flixel::_hx_system::debug::FlxDebuggerLayout MICRO;\n   34: \t\tstatic inline ::flixel::_hx_system::debug::FlxDebuggerLayout MICRO_dyn() { return MICRO; }\n   35: \t\tstatic ::flixel::_hx_system::debug::FlxDebuggerLayout RIGHT;\n   36: \t\tstatic inline ::flixel::_hx_system::debug::FlxDebuggerLayout RIGHT_dyn() { return RIGHT; }\n   37: \t\tstatic ::flixel::_hx_system::debug::FlxDebuggerLayout STANDARD;\n   38: \t\tstatic inline ::flixel::_hx_system::debug::FlxDebuggerLayout STANDARD_dyn() { return STANDARD; }\n   39: \t\tstatic ::flixel::_hx_system::debug::FlxDebuggerLayout TOP;\n   40: \t\tstatic inline ::flixel::_hx_system::debug::FlxDebuggerLayout TOP_dyn() { return TOP; }\n   41  };\n   42  \n   43  } // end namespace flixel\n   44  } // end namespace system\n   45: } // end namespace debug\n   46  \n   47: #endif /* INCLUDED_flixel_system_debug_FlxDebuggerLayout */ \n   48  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/GraphicArrowLeft.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_GraphicArrowLeft\n    3: #define INCLUDED_flixel_system_debug_GraphicArrowLeft\n    4  \n    5  #ifndef HXCPP_H\n    .\n   10  #include <openfl/display/BitmapData.h>\n   11  #endif\n   12: HX_DECLARE_CLASS3(flixel,_hx_system,debug,GraphicArrowLeft)\n   13  HX_DECLARE_CLASS2(openfl,display,BitmapData)\n   14  HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)\n   ..\n   16  namespace flixel{\n   17  namespace _hx_system{\n   18: namespace debug{\n   19  \n   20  \n   ..\n   30  \n   31  \t\tvoid __construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   32: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.GraphicArrowLeft\")\n   33  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   34  \t\tinline void *operator new(size_t inSize, int extra)\n   35: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.GraphicArrowLeft\"); }\n   36  \t\tstatic hx::ObjectPtr< GraphicArrowLeft_obj > __new(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   37  \t\tstatic hx::ObjectPtr< GraphicArrowLeft_obj > __alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   ..\n   54  } // end namespace flixel\n   55  } // end namespace system\n   56: } // end namespace debug\n   57  \n   58: #endif /* INCLUDED_flixel_system_debug_GraphicArrowLeft */ \n   59  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/GraphicArrowRight.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_GraphicArrowRight\n    3: #define INCLUDED_flixel_system_debug_GraphicArrowRight\n    4  \n    5  #ifndef HXCPP_H\n    .\n   10  #include <openfl/display/BitmapData.h>\n   11  #endif\n   12: HX_DECLARE_CLASS3(flixel,_hx_system,debug,GraphicArrowRight)\n   13  HX_DECLARE_CLASS2(openfl,display,BitmapData)\n   14  HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)\n   ..\n   16  namespace flixel{\n   17  namespace _hx_system{\n   18: namespace debug{\n   19  \n   20  \n   ..\n   30  \n   31  \t\tvoid __construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   32: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.GraphicArrowRight\")\n   33  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   34  \t\tinline void *operator new(size_t inSize, int extra)\n   35: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.GraphicArrowRight\"); }\n   36  \t\tstatic hx::ObjectPtr< GraphicArrowRight_obj > __new(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   37  \t\tstatic hx::ObjectPtr< GraphicArrowRight_obj > __alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   ..\n   54  } // end namespace flixel\n   55  } // end namespace system\n   56: } // end namespace debug\n   57  \n   58: #endif /* INCLUDED_flixel_system_debug_GraphicArrowRight */ \n   59  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/GraphicBitmapLog.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_GraphicBitmapLog\n    3: #define INCLUDED_flixel_system_debug_GraphicBitmapLog\n    4  \n    5  #ifndef HXCPP_H\n    .\n   10  #include <openfl/display/BitmapData.h>\n   11  #endif\n   12: HX_DECLARE_CLASS3(flixel,_hx_system,debug,GraphicBitmapLog)\n   13  HX_DECLARE_CLASS2(openfl,display,BitmapData)\n   14  HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)\n   ..\n   16  namespace flixel{\n   17  namespace _hx_system{\n   18: namespace debug{\n   19  \n   20  \n   ..\n   30  \n   31  \t\tvoid __construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   32: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.GraphicBitmapLog\")\n   33  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   34  \t\tinline void *operator new(size_t inSize, int extra)\n   35: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.GraphicBitmapLog\"); }\n   36  \t\tstatic hx::ObjectPtr< GraphicBitmapLog_obj > __new(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   37  \t\tstatic hx::ObjectPtr< GraphicBitmapLog_obj > __alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   ..\n   54  } // end namespace flixel\n   55  } // end namespace system\n   56: } // end namespace debug\n   57  \n   58: #endif /* INCLUDED_flixel_system_debug_GraphicBitmapLog */ \n   59  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/GraphicCloseButton.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_GraphicCloseButton\n    3: #define INCLUDED_flixel_system_debug_GraphicCloseButton\n    4  \n    5  #ifndef HXCPP_H\n    .\n   10  #include <openfl/display/BitmapData.h>\n   11  #endif\n   12: HX_DECLARE_CLASS3(flixel,_hx_system,debug,GraphicCloseButton)\n   13  HX_DECLARE_CLASS2(openfl,display,BitmapData)\n   14  HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)\n   ..\n   16  namespace flixel{\n   17  namespace _hx_system{\n   18: namespace debug{\n   19  \n   20  \n   ..\n   30  \n   31  \t\tvoid __construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   32: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.GraphicCloseButton\")\n   33  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   34  \t\tinline void *operator new(size_t inSize, int extra)\n   35: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.GraphicCloseButton\"); }\n   36  \t\tstatic hx::ObjectPtr< GraphicCloseButton_obj > __new(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   37  \t\tstatic hx::ObjectPtr< GraphicCloseButton_obj > __alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   ..\n   54  } // end namespace flixel\n   55  } // end namespace system\n   56: } // end namespace debug\n   57  \n   58: #endif /* INCLUDED_flixel_system_debug_GraphicCloseButton */ \n   59  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/GraphicConsole.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_GraphicConsole\n    3: #define INCLUDED_flixel_system_debug_GraphicConsole\n    4  \n    5  #ifndef HXCPP_H\n    .\n   10  #include <openfl/display/BitmapData.h>\n   11  #endif\n   12: HX_DECLARE_CLASS3(flixel,_hx_system,debug,GraphicConsole)\n   13  HX_DECLARE_CLASS2(openfl,display,BitmapData)\n   14  HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)\n   ..\n   16  namespace flixel{\n   17  namespace _hx_system{\n   18: namespace debug{\n   19  \n   20  \n   ..\n   30  \n   31  \t\tvoid __construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   32: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.GraphicConsole\")\n   33  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   34  \t\tinline void *operator new(size_t inSize, int extra)\n   35: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.GraphicConsole\"); }\n   36  \t\tstatic hx::ObjectPtr< GraphicConsole_obj > __new(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   37  \t\tstatic hx::ObjectPtr< GraphicConsole_obj > __alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   ..\n   54  } // end namespace flixel\n   55  } // end namespace system\n   56: } // end namespace debug\n   57  \n   58: #endif /* INCLUDED_flixel_system_debug_GraphicConsole */ \n   59  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/GraphicInteractive.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_GraphicInteractive\n    3: #define INCLUDED_flixel_system_debug_GraphicInteractive\n    4  \n    5  #ifndef HXCPP_H\n    .\n   10  #include <openfl/display/BitmapData.h>\n   11  #endif\n   12: HX_DECLARE_CLASS3(flixel,_hx_system,debug,GraphicInteractive)\n   13  HX_DECLARE_CLASS2(openfl,display,BitmapData)\n   14  HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)\n   ..\n   16  namespace flixel{\n   17  namespace _hx_system{\n   18: namespace debug{\n   19  \n   20  \n   ..\n   30  \n   31  \t\tvoid __construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   32: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.GraphicInteractive\")\n   33  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   34  \t\tinline void *operator new(size_t inSize, int extra)\n   35: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.GraphicInteractive\"); }\n   36  \t\tstatic hx::ObjectPtr< GraphicInteractive_obj > __new(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   37  \t\tstatic hx::ObjectPtr< GraphicInteractive_obj > __alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   ..\n   54  } // end namespace flixel\n   55  } // end namespace system\n   56: } // end namespace debug\n   57  \n   58: #endif /* INCLUDED_flixel_system_debug_GraphicInteractive */ \n   59  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/GraphicLog.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_GraphicLog\n    3: #define INCLUDED_flixel_system_debug_GraphicLog\n    4  \n    5  #ifndef HXCPP_H\n    .\n   10  #include <openfl/display/BitmapData.h>\n   11  #endif\n   12: HX_DECLARE_CLASS3(flixel,_hx_system,debug,GraphicLog)\n   13  HX_DECLARE_CLASS2(openfl,display,BitmapData)\n   14  HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)\n   ..\n   16  namespace flixel{\n   17  namespace _hx_system{\n   18: namespace debug{\n   19  \n   20  \n   ..\n   30  \n   31  \t\tvoid __construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   32: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.GraphicLog\")\n   33  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   34  \t\tinline void *operator new(size_t inSize, int extra)\n   35: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.GraphicLog\"); }\n   36  \t\tstatic hx::ObjectPtr< GraphicLog_obj > __new(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   37  \t\tstatic hx::ObjectPtr< GraphicLog_obj > __alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   ..\n   54  } // end namespace flixel\n   55  } // end namespace system\n   56: } // end namespace debug\n   57  \n   58: #endif /* INCLUDED_flixel_system_debug_GraphicLog */ \n   59  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/GraphicStats.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_GraphicStats\n    3: #define INCLUDED_flixel_system_debug_GraphicStats\n    4  \n    5  #ifndef HXCPP_H\n    .\n   10  #include <openfl/display/BitmapData.h>\n   11  #endif\n   12: HX_DECLARE_CLASS3(flixel,_hx_system,debug,GraphicStats)\n   13  HX_DECLARE_CLASS2(openfl,display,BitmapData)\n   14  HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)\n   ..\n   16  namespace flixel{\n   17  namespace _hx_system{\n   18: namespace debug{\n   19  \n   20  \n   ..\n   30  \n   31  \t\tvoid __construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   32: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.GraphicStats\")\n   33  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   34  \t\tinline void *operator new(size_t inSize, int extra)\n   35: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.GraphicStats\"); }\n   36  \t\tstatic hx::ObjectPtr< GraphicStats_obj > __new(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   37  \t\tstatic hx::ObjectPtr< GraphicStats_obj > __alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   ..\n   54  } // end namespace flixel\n   55  } // end namespace system\n   56: } // end namespace debug\n   57  \n   58: #endif /* INCLUDED_flixel_system_debug_GraphicStats */ \n   59  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/GraphicWatch.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_GraphicWatch\n    3: #define INCLUDED_flixel_system_debug_GraphicWatch\n    4  \n    5  #ifndef HXCPP_H\n    .\n   10  #include <openfl/display/BitmapData.h>\n   11  #endif\n   12: HX_DECLARE_CLASS3(flixel,_hx_system,debug,GraphicWatch)\n   13  HX_DECLARE_CLASS2(openfl,display,BitmapData)\n   14  HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)\n   ..\n   16  namespace flixel{\n   17  namespace _hx_system{\n   18: namespace debug{\n   19  \n   20  \n   ..\n   30  \n   31  \t\tvoid __construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   32: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.GraphicWatch\")\n   33  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   34  \t\tinline void *operator new(size_t inSize, int extra)\n   35: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.GraphicWatch\"); }\n   36  \t\tstatic hx::ObjectPtr< GraphicWatch_obj > __new(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   37  \t\tstatic hx::ObjectPtr< GraphicWatch_obj > __alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   ..\n   54  } // end namespace flixel\n   55  } // end namespace system\n   56: } // end namespace debug\n   57  \n   58: #endif /* INCLUDED_flixel_system_debug_GraphicWatch */ \n   59  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/Tooltip.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_Tooltip\n    3: #define INCLUDED_flixel_system_debug_Tooltip\n    4  \n    5  #ifndef HXCPP_H\n    .\n    7  #endif\n    8  \n    9: HX_DECLARE_CLASS3(flixel,_hx_system,debug,Tooltip)\n   10: HX_DECLARE_CLASS3(flixel,_hx_system,debug,TooltipOverlay)\n   11  HX_DECLARE_CLASS2(openfl,display,DisplayObject)\n   12  HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)\n   ..\n   19  namespace flixel{\n   20  namespace _hx_system{\n   21: namespace debug{\n   22  \n   23  \n   ..\n   33  \n   34  \t\tvoid __construct();\n   35: \t\tinline void *operator new(size_t inSize, bool inContainer=false,const char *inName=\"flixel.system.debug.Tooltip\")\n   36  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   37  \t\tinline void *operator new(size_t inSize, int extra)\n   38: \t\t\t{ return hx::Object::operator new(inSize+extra,false,\"flixel.system.debug.Tooltip\"); }\n   39  \n   40  \t\thx::ObjectPtr< Tooltip_obj > __new() {\n   ..\n   45  \n   46  \t\tstatic hx::ObjectPtr< Tooltip_obj > __alloc(hx::Ctx *_hx_ctx) {\n   47: \t\t\tTooltip_obj *__this = (Tooltip_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Tooltip_obj), false, \"flixel.system.debug.Tooltip\"));\n   48  \t\t\t*(void **)__this = Tooltip_obj::_hx_vtable;\n   49  \t\t\treturn __this;\n   ..\n   78  } // end namespace flixel\n   79  } // end namespace system\n   80: } // end namespace debug\n   81  \n   82: #endif /* INCLUDED_flixel_system_debug_Tooltip */ \n   83  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/TooltipOverlay.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_TooltipOverlay\n    3: #define INCLUDED_flixel_system_debug_TooltipOverlay\n    4  \n    5  #ifndef HXCPP_H\n    .\n   10  #include <openfl/display/Sprite.h>\n   11  #endif\n   12: HX_DECLARE_CLASS3(flixel,_hx_system,debug,TooltipOverlay)\n   13  HX_DECLARE_CLASS2(openfl,display,Bitmap)\n   14  HX_DECLARE_CLASS2(openfl,display,DisplayObject)\n   ..\n   26  namespace flixel{\n   27  namespace _hx_system{\n   28: namespace debug{\n   29  \n   30  \n   ..\n   40  \n   41  \t\tvoid __construct( ::openfl::display::Sprite target,::String text,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height);\n   42: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.TooltipOverlay\")\n   43  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   44  \t\tinline void *operator new(size_t inSize, int extra)\n   45: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.TooltipOverlay\"); }\n   46  \t\tstatic hx::ObjectPtr< TooltipOverlay_obj > __new( ::openfl::display::Sprite target,::String text,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height);\n   47  \t\tstatic hx::ObjectPtr< TooltipOverlay_obj > __alloc(hx::Ctx *_hx_ctx, ::openfl::display::Sprite target,::String text,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height);\n   ..\n  107  } // end namespace flixel\n  108  } // end namespace system\n  109: } // end namespace debug\n  110  \n  111: #endif /* INCLUDED_flixel_system_debug_TooltipOverlay */ \n  112  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/Window.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_Window\n    3: #define INCLUDED_flixel_system_debug_Window\n    4  \n    5  #ifndef HXCPP_H\n    .\n   10  #include <openfl/display/Sprite.h>\n   11  #endif\n   12: HX_DECLARE_CLASS3(flixel,_hx_system,debug,Window)\n   13  HX_DECLARE_CLASS3(flixel,_hx_system,ui,FlxSystemButton)\n   14  HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)\n   ..\n   30  namespace flixel{\n   31  namespace _hx_system{\n   32: namespace debug{\n   33  \n   34  \n   ..\n   44  \n   45  \t\tvoid __construct(::String Title, ::openfl::display::BitmapData Icon,hx::Null< Float >  __o_Width,hx::Null< Float >  __o_Height,hx::Null< bool >  __o_Resizable, ::openfl::geom::Rectangle Bounds,hx::Null< bool >  __o_Closable);\n   46: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.Window\")\n   47  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   48  \t\tinline void *operator new(size_t inSize, int extra)\n   49: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.Window\"); }\n   50  \t\tstatic hx::ObjectPtr< Window_obj > __new(::String Title, ::openfl::display::BitmapData Icon,hx::Null< Float >  __o_Width,hx::Null< Float >  __o_Height,hx::Null< bool >  __o_Resizable, ::openfl::geom::Rectangle Bounds,hx::Null< bool >  __o_Closable);\n   51  \t\tstatic hx::ObjectPtr< Window_obj > __alloc(hx::Ctx *_hx_ctx,::String Title, ::openfl::display::BitmapData Icon,hx::Null< Float >  __o_Width,hx::Null< Float >  __o_Height,hx::Null< bool >  __o_Resizable, ::openfl::geom::Rectangle Bounds,hx::Null< bool >  __o_Closable);\n   ..\n  148  } // end namespace flixel\n  149  } // end namespace system\n  150: } // end namespace debug\n  151  \n  152: #endif /* INCLUDED_flixel_system_debug_Window */ \n  153  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/_FlxDebugger/GraphicDrawDebug.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug__FlxDebugger_GraphicDrawDebug\n    3: #define INCLUDED_flixel_system_debug__FlxDebugger_GraphicDrawDebug\n    4  \n    5  #ifndef HXCPP_H\n    .\n   10  #include <openfl/display/BitmapData.h>\n   11  #endif\n   12: HX_DECLARE_CLASS4(flixel,_hx_system,debug,_FlxDebugger,GraphicDrawDebug)\n   13  HX_DECLARE_CLASS2(openfl,display,BitmapData)\n   14  HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)\n   ..\n   16  namespace flixel{\n   17  namespace _hx_system{\n   18: namespace debug{\n   19: namespace _FlxDebugger{\n   20  \n   21  \n   22: class HXCPP_CLASS_ATTRIBUTES GraphicDrawDebug_obj : public  ::openfl::display::BitmapData_obj\n   23  {\n   24  \tpublic:\n   25  \t\ttypedef  ::openfl::display::BitmapData_obj super;\n   26: \t\ttypedef GraphicDrawDebug_obj OBJ_;\n   27: \t\tGraphicDrawDebug_obj();\n   28  \n   29  \tpublic:\n   ..\n   31  \n   32  \t\tvoid __construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   33: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug._FlxDebugger.GraphicDrawDebug\")\n   34  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   35  \t\tinline void *operator new(size_t inSize, int extra)\n   36: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug._FlxDebugger.GraphicDrawDebug\"); }\n   37: \t\tstatic hx::ObjectPtr< GraphicDrawDebug_obj > __new(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   38: \t\tstatic hx::ObjectPtr< GraphicDrawDebug_obj > __alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   39  \t\tstatic void * _hx_vtable;\n   40  \t\tstatic Dynamic __CreateEmpty();\n   41  \t\tstatic Dynamic __Create(hx::DynamicArray inArgs);\n   42: \t\t//~GraphicDrawDebug_obj();\n   43  \n   44  \t\tHX_DO_RTTI_ALL;\n   ..\n   47  \t\tstatic void __register();\n   48  \t\tbool _hx_isInstanceOf(int inClassId);\n   49: \t\t::String __ToString() const { return HX_HCSTRING(\"GraphicDrawDebug\",\"\\x07\",\"\\x54\",\"\\x14\",\"\\x0d\"); }\n   50  \n   51  \t\tstatic void __boot();\n   ..\n   55  } // end namespace flixel\n   56  } // end namespace system\n   57: } // end namespace debug\n   58: } // end namespace _FlxDebugger\n   59  \n   60: #endif /* INCLUDED_flixel_system_debug__FlxDebugger_GraphicDrawDebug */ \n   61  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/_FlxDebugger/GraphicFlixel.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug__FlxDebugger_GraphicFlixel\n    3: #define INCLUDED_flixel_system_debug__FlxDebugger_GraphicFlixel\n    4  \n    5  #ifndef HXCPP_H\n    .\n   10  #include <openfl/display/BitmapData.h>\n   11  #endif\n   12: HX_DECLARE_CLASS4(flixel,_hx_system,debug,_FlxDebugger,GraphicFlixel)\n   13  HX_DECLARE_CLASS2(openfl,display,BitmapData)\n   14  HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)\n   ..\n   16  namespace flixel{\n   17  namespace _hx_system{\n   18: namespace debug{\n   19: namespace _FlxDebugger{\n   20  \n   21  \n   ..\n   31  \n   32  \t\tvoid __construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   33: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug._FlxDebugger.GraphicFlixel\")\n   34  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   35  \t\tinline void *operator new(size_t inSize, int extra)\n   36: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug._FlxDebugger.GraphicFlixel\"); }\n   37  \t\tstatic hx::ObjectPtr< GraphicFlixel_obj > __new(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   38  \t\tstatic hx::ObjectPtr< GraphicFlixel_obj > __alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   ..\n   55  } // end namespace flixel\n   56  } // end namespace system\n   57: } // end namespace debug\n   58: } // end namespace _FlxDebugger\n   59  \n   60: #endif /* INCLUDED_flixel_system_debug__FlxDebugger_GraphicFlixel */ \n   61  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/_Window/GraphicWindowHandle.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug__Window_GraphicWindowHandle\n    3: #define INCLUDED_flixel_system_debug__Window_GraphicWindowHandle\n    4  \n    5  #ifndef HXCPP_H\n    .\n   10  #include <openfl/display/BitmapData.h>\n   11  #endif\n   12: HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Window,GraphicWindowHandle)\n   13  HX_DECLARE_CLASS2(openfl,display,BitmapData)\n   14  HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)\n   ..\n   16  namespace flixel{\n   17  namespace _hx_system{\n   18: namespace debug{\n   19  namespace _Window{\n   20  \n   ..\n   31  \n   32  \t\tvoid __construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   33: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug._Window.GraphicWindowHandle\")\n   34  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   35  \t\tinline void *operator new(size_t inSize, int extra)\n   36: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug._Window.GraphicWindowHandle\"); }\n   37  \t\tstatic hx::ObjectPtr< GraphicWindowHandle_obj > __new(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   38  \t\tstatic hx::ObjectPtr< GraphicWindowHandle_obj > __alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   ..\n   55  } // end namespace flixel\n   56  } // end namespace system\n   57: } // end namespace debug\n   58  } // end namespace _Window\n   59  \n   60: #endif /* INCLUDED_flixel_system_debug__Window_GraphicWindowHandle */ \n   61  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/completion/CompletionList.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_completion_CompletionList\n    3: #define INCLUDED_flixel_system_debug_completion_CompletionList\n    4  \n    5  #ifndef HXCPP_H\n    .\n   10  #include <openfl/display/Sprite.h>\n   11  #endif\n   12: HX_DECLARE_CLASS4(flixel,_hx_system,debug,completion,CompletionList)\n   13: HX_DECLARE_CLASS4(flixel,_hx_system,debug,completion,CompletionListEntry)\n   14: HX_DECLARE_CLASS4(flixel,_hx_system,debug,completion,CompletionListScrollBar)\n   15  HX_DECLARE_CLASS2(openfl,display,DisplayObject)\n   16  HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)\n   ..\n   25  namespace flixel{\n   26  namespace _hx_system{\n   27: namespace debug{\n   28  namespace completion{\n   29  \n   ..\n   40  \n   41  \t\tvoid __construct(int capacity);\n   42: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.completion.CompletionList\")\n   43  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   44  \t\tinline void *operator new(size_t inSize, int extra)\n   45: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.completion.CompletionList\"); }\n   46  \t\tstatic hx::ObjectPtr< CompletionList_obj > __new(int capacity);\n   47  \t\tstatic hx::ObjectPtr< CompletionList_obj > __alloc(hx::Ctx *_hx_ctx,int capacity);\n   ..\n   74  \t\tint lowerVisibleIndex;\n   75  \t\tint upperVisibleIndex;\n   76: \t\t ::flixel::_hx_system::debug::completion::CompletionListScrollBar scrollBar;\n   77  \t\tint actualHeight;\n   78  \t\tvoid show(Float x,::Array< ::String > items);\n   ..\n  128  } // end namespace flixel\n  129  } // end namespace system\n  130: } // end namespace debug\n  131  } // end namespace completion\n  132  \n  133: #endif /* INCLUDED_flixel_system_debug_completion_CompletionList */ \n  134  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/completion/CompletionListEntry.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_completion_CompletionListEntry\n    3: #define INCLUDED_flixel_system_debug_completion_CompletionListEntry\n    4  \n    5  #ifndef HXCPP_H\n    .\n   10  #include <openfl/display/Sprite.h>\n   11  #endif\n   12: HX_DECLARE_CLASS4(flixel,_hx_system,debug,completion,CompletionListEntry)\n   13  HX_DECLARE_CLASS2(openfl,display,Bitmap)\n   14  HX_DECLARE_CLASS2(openfl,display,BitmapData)\n   ..\n   24  namespace flixel{\n   25  namespace _hx_system{\n   26: namespace debug{\n   27  namespace completion{\n   28  \n   ..\n   39  \n   40  \t\tvoid __construct();\n   41: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.completion.CompletionListEntry\")\n   42  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   43  \t\tinline void *operator new(size_t inSize, int extra)\n   44: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.completion.CompletionListEntry\"); }\n   45  \t\tstatic hx::ObjectPtr< CompletionListEntry_obj > __new();\n   46  \t\tstatic hx::ObjectPtr< CompletionListEntry_obj > __alloc(hx::Ctx *_hx_ctx);\n   ..\n   86  } // end namespace flixel\n   87  } // end namespace system\n   88: } // end namespace debug\n   89  } // end namespace completion\n   90  \n   91: #endif /* INCLUDED_flixel_system_debug_completion_CompletionListEntry */ \n   92  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/completion/CompletionListScrollBar.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_completion_CompletionListScrollBar\n    3: #define INCLUDED_flixel_system_debug_completion_CompletionListScrollBar\n    4  \n    5  #ifndef HXCPP_H\n    .\n   10  #include <openfl/display/Sprite.h>\n   11  #endif\n   12: HX_DECLARE_CLASS4(flixel,_hx_system,debug,completion,CompletionListScrollBar)\n   13  HX_DECLARE_CLASS2(openfl,display,Bitmap)\n   14  HX_DECLARE_CLASS2(openfl,display,DisplayObject)\n   ..\n   22  namespace flixel{\n   23  namespace _hx_system{\n   24: namespace debug{\n   25  namespace completion{\n   26  \n   ..\n   37  \n   38  \t\tvoid __construct(int x,int y,int width,int height);\n   39: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.completion.CompletionListScrollBar\")\n   40  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   41  \t\tinline void *operator new(size_t inSize, int extra)\n   42: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.completion.CompletionListScrollBar\"); }\n   43  \t\tstatic hx::ObjectPtr< CompletionListScrollBar_obj > __new(int x,int y,int width,int height);\n   44  \t\tstatic hx::ObjectPtr< CompletionListScrollBar_obj > __alloc(hx::Ctx *_hx_ctx,int x,int y,int width,int height);\n   ..\n   69  } // end namespace flixel\n   70  } // end namespace system\n   71: } // end namespace debug\n   72  } // end namespace completion\n   73  \n   74: #endif /* INCLUDED_flixel_system_debug_completion_CompletionListScrollBar */ \n   75  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/console/ConsoleUtil.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_console_ConsoleUtil\n    3: #define INCLUDED_flixel_system_debug_console_ConsoleUtil\n    4  \n    5  #ifndef HXCPP_H\n    .\n    7  #endif\n    8  \n    9: HX_DECLARE_CLASS4(flixel,_hx_system,debug,console,ConsoleUtil)\n   10: HX_DECLARE_CLASS5(flixel,_hx_system,debug,console,_ConsoleUtil,Interp)\n   11  HX_DECLARE_CLASS1(hscript,Expr)\n   12  HX_DECLARE_CLASS1(hscript,Interp)\n   ..\n   15  namespace flixel{\n   16  namespace _hx_system{\n   17: namespace debug{\n   18  namespace console{\n   19  \n   ..\n   30  \n   31  \t\tvoid __construct();\n   32: \t\tinline void *operator new(size_t inSize, bool inContainer=false,const char *inName=\"flixel.system.debug.console.ConsoleUtil\")\n   33  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   34  \t\tinline void *operator new(size_t inSize, int extra)\n   35: \t\t\t{ return hx::Object::operator new(inSize+extra,false,\"flixel.system.debug.console.ConsoleUtil\"); }\n   36  \n   37  \t\thx::ObjectPtr< ConsoleUtil_obj > __new() {\n   ..\n   42  \n   43  \t\tstatic hx::ObjectPtr< ConsoleUtil_obj > __alloc(hx::Ctx *_hx_ctx) {\n   44: \t\t\tConsoleUtil_obj *__this = (ConsoleUtil_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ConsoleUtil_obj), false, \"flixel.system.debug.console.ConsoleUtil\"));\n   45  \t\t\t*(void **)__this = ConsoleUtil_obj::_hx_vtable;\n   46  \t\t\treturn __this;\n   ..\n   60  \n   61  \t\tstatic  ::hscript::Parser parser;\n   62: \t\tstatic  ::flixel::_hx_system::debug::console::_ConsoleUtil::Interp interp;\n   63  \t\tstatic void init();\n   64  \t\tstatic ::Dynamic init_dyn();\n   ..\n   92  } // end namespace flixel\n   93  } // end namespace system\n   94: } // end namespace debug\n   95  } // end namespace console\n   96  \n   97: #endif /* INCLUDED_flixel_system_debug_console_ConsoleUtil */ \n   98  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/console/_ConsoleUtil/Interp.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_console__ConsoleUtil_Interp\n    3: #define INCLUDED_flixel_system_debug_console__ConsoleUtil_Interp\n    4  \n    5  #ifndef HXCPP_H\n    .\n   10  #include <hscript/Interp.h>\n   11  #endif\n   12: HX_DECLARE_CLASS5(flixel,_hx_system,debug,console,_ConsoleUtil,Interp)\n   13  HX_DECLARE_CLASS1(hscript,Interp)\n   14  \n   15  namespace flixel{\n   16  namespace _hx_system{\n   17: namespace debug{\n   18  namespace console{\n   19  namespace _ConsoleUtil{\n   ..\n   31  \n   32  \t\tvoid __construct();\n   33: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.console._ConsoleUtil.Interp\")\n   34  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   35  \t\tinline void *operator new(size_t inSize, int extra)\n   36: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.console._ConsoleUtil.Interp\"); }\n   37  \t\tstatic hx::ObjectPtr< Interp_obj > __new();\n   38  \t\tstatic hx::ObjectPtr< Interp_obj > __alloc(hx::Ctx *_hx_ctx);\n   ..\n   62  } // end namespace flixel\n   63  } // end namespace system\n   64: } // end namespace debug\n   65  } // end namespace console\n   66  } // end namespace _ConsoleUtil\n   67  \n   68: #endif /* INCLUDED_flixel_system_debug_console__ConsoleUtil_Interp */ \n   69  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/interaction/Interaction.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_interaction_Interaction\n    3: #define INCLUDED_flixel_system_debug_interaction_Interaction\n    4  \n    5  #ifndef HXCPP_H\n    .\n    7  #endif\n    8  \n    9: #ifndef INCLUDED_flixel_system_debug_Window\n   10: #include <flixel/system/debug/Window.h>\n   11  #endif\n   12  HX_DECLARE_CLASS1(flixel,FlxBasic)\n   ..\n   16  HX_DECLARE_CLASS2(flixel,math,FlxPoint)\n   17  HX_DECLARE_CLASS2(flixel,math,FlxRect)\n   18: HX_DECLARE_CLASS3(flixel,_hx_system,debug,Window)\n   19: HX_DECLARE_CLASS4(flixel,_hx_system,debug,interaction,Interaction)\n   20: HX_DECLARE_CLASS5(flixel,_hx_system,debug,interaction,tools,Tool)\n   21  HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)\n   22  HX_DECLARE_CLASS2(flixel,util,IFlxPooled)\n   ..\n   38  namespace flixel{\n   39  namespace _hx_system{\n   40: namespace debug{\n   41  namespace interaction{\n   42  \n   43  \n   44: class HXCPP_CLASS_ATTRIBUTES Interaction_obj : public  ::flixel::_hx_system::debug::Window_obj\n   45  {\n   46  \tpublic:\n   47: \t\ttypedef  ::flixel::_hx_system::debug::Window_obj super;\n   48  \t\ttypedef Interaction_obj OBJ_;\n   49  \t\tInteraction_obj();\n   ..\n   53  \n   54  \t\tvoid __construct( ::openfl::display::Sprite container);\n   55: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.interaction.Interaction\")\n   56  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   57  \t\tinline void *operator new(size_t inSize, int extra)\n   58: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.interaction.Interaction\"); }\n   59  \t\tstatic hx::ObjectPtr< Interaction_obj > __new( ::openfl::display::Sprite container);\n   60  \t\tstatic hx::ObjectPtr< Interaction_obj > __alloc(hx::Ctx *_hx_ctx, ::openfl::display::Sprite container);\n   ..\n   74  \t\t::String __ToString() const { return HX_HCSTRING(\"Interaction\",\"\\xb2\",\"\\xcf\",\"\\x8b\",\"\\x20\"); }\n   75  \n   76: \t\t ::flixel::_hx_system::debug::interaction::tools::Tool activeTool;\n   77  \t\t ::flixel::group::FlxTypedGroup selectedItems;\n   78  \t\t ::flixel::math::FlxPoint flixelPointer;\n   ..\n   88  \t\tbool _wasMouseVisible;\n   89  \t\tbool _wasUsingSystemCursor;\n   90: \t\tbool _debuggerInteraction;\n   91  \t\t ::flixel::input::FlxPointer _flixelPointer;\n   92: \t\tvoid handleDebuggerVisibilityChanged();\n   93: \t\t::Dynamic handleDebuggerVisibilityChanged_dyn();\n   94  \n   95  \t\tvoid updateMouse( ::openfl::events::MouseEvent event);\n   ..\n   99  \t\t::Dynamic handleMouseClick_dyn();\n  100  \n  101: \t\tbool belongsToDebugger( ::openfl::display::DisplayObject object);\n  102: \t\t::Dynamic belongsToDebugger_dyn();\n  103  \n  104: \t\tvoid handleMouseInDebugger( ::openfl::events::MouseEvent event);\n  105: \t\t::Dynamic handleMouseInDebugger_dyn();\n  106  \n  107  \t\tvoid handleKeyEvent( ::openfl::events::KeyboardEvent event);\n  108  \t\t::Dynamic handleKeyEvent_dyn();\n  109  \n  110: \t\tvoid addTool( ::flixel::_hx_system::debug::interaction::tools::Tool tool);\n  111  \t\t::Dynamic addTool_dyn();\n  112  \n  ...\n  121  \t\t::Dynamic postDraw_dyn();\n  122  \n  123: \t\t ::openfl::display::Graphics getDebugGraphics();\n  124: \t\t::Dynamic getDebugGraphics_dyn();\n  125  \n  126  \t\tvoid drawItemsSelection();\n  127  \t\t::Dynamic drawItemsSelection_dyn();\n  128  \n  129: \t\t ::flixel::_hx_system::debug::interaction::tools::Tool getTool(hx::Class className);\n  130  \t\t::Dynamic getTool_dyn();\n  131  \n  ...\n  144  \t\t::Dynamic restoreSystemCursor_dyn();\n  145  \n  146: \t\tvoid setActiveTool( ::flixel::_hx_system::debug::interaction::tools::Tool value);\n  147  \t\t::Dynamic setActiveTool_dyn();\n  148  \n  ...\n  172  } // end namespace flixel\n  173  } // end namespace system\n  174: } // end namespace debug\n  175  } // end namespace interaction\n  176  \n  177: #endif /* INCLUDED_flixel_system_debug_interaction_Interaction */ \n  178  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/interaction/tools/Eraser.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_interaction_tools_Eraser\n    3: #define INCLUDED_flixel_system_debug_interaction_tools_Eraser\n    4  \n    5  #ifndef HXCPP_H\n    .\n    7  #endif\n    8  \n    9: #ifndef INCLUDED_flixel_system_debug_interaction_tools_Tool\n   10: #include <flixel/system/debug/interaction/tools/Tool.h>\n   11  #endif\n   12  HX_DECLARE_CLASS1(flixel,FlxBasic)\n   13  HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)\n   14: HX_DECLARE_CLASS3(flixel,_hx_system,debug,Window)\n   15: HX_DECLARE_CLASS4(flixel,_hx_system,debug,interaction,Interaction)\n   16: HX_DECLARE_CLASS5(flixel,_hx_system,debug,interaction,tools,Eraser)\n   17: HX_DECLARE_CLASS5(flixel,_hx_system,debug,interaction,tools,Tool)\n   18  HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)\n   19  HX_DECLARE_CLASS2(openfl,display,DisplayObject)\n   ..\n   27  namespace flixel{\n   28  namespace _hx_system{\n   29: namespace debug{\n   30  namespace interaction{\n   31  namespace tools{\n   32  \n   33  \n   34: class HXCPP_CLASS_ATTRIBUTES Eraser_obj : public  ::flixel::_hx_system::debug::interaction::tools::Tool_obj\n   35  {\n   36  \tpublic:\n   37: \t\ttypedef  ::flixel::_hx_system::debug::interaction::tools::Tool_obj super;\n   38  \t\ttypedef Eraser_obj OBJ_;\n   39  \t\tEraser_obj();\n   ..\n   43  \n   44  \t\tvoid __construct();\n   45: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.interaction.tools.Eraser\")\n   46  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   47  \t\tinline void *operator new(size_t inSize, int extra)\n   48: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.interaction.tools.Eraser\"); }\n   49  \t\tstatic hx::ObjectPtr< Eraser_obj > __new();\n   50  \t\tstatic hx::ObjectPtr< Eraser_obj > __alloc(hx::Ctx *_hx_ctx);\n   ..\n   60  \t\t::String __ToString() const { return HX_HCSTRING(\"Eraser\",\"\\xec\",\"\\x54\",\"\\xc3\",\"\\x7a\"); }\n   61  \n   62: \t\t ::flixel::_hx_system::debug::interaction::tools::Tool init( ::flixel::_hx_system::debug::interaction::Interaction Brain);\n   63  \n   64  \t\tvoid update();\n   ..\n   79  } // end namespace flixel\n   80  } // end namespace system\n   81: } // end namespace debug\n   82  } // end namespace interaction\n   83  } // end namespace tools\n   84  \n   85: #endif /* INCLUDED_flixel_system_debug_interaction_tools_Eraser */ \n   86  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/interaction/tools/GraphicCursorCross.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_interaction_tools_GraphicCursorCross\n    3: #define INCLUDED_flixel_system_debug_interaction_tools_GraphicCursorCross\n    4  \n    5  #ifndef HXCPP_H\n    .\n   10  #include <openfl/display/BitmapData.h>\n   11  #endif\n   12: HX_DECLARE_CLASS5(flixel,_hx_system,debug,interaction,tools,GraphicCursorCross)\n   13  HX_DECLARE_CLASS2(openfl,display,BitmapData)\n   14  HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)\n   ..\n   16  namespace flixel{\n   17  namespace _hx_system{\n   18: namespace debug{\n   19  namespace interaction{\n   20  namespace tools{\n   ..\n   32  \n   33  \t\tvoid __construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   34: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.interaction.tools.GraphicCursorCross\")\n   35  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   36  \t\tinline void *operator new(size_t inSize, int extra)\n   37: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.interaction.tools.GraphicCursorCross\"); }\n   38  \t\tstatic hx::ObjectPtr< GraphicCursorCross_obj > __new(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   39  \t\tstatic hx::ObjectPtr< GraphicCursorCross_obj > __alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   ..\n   56  } // end namespace flixel\n   57  } // end namespace system\n   58: } // end namespace debug\n   59  } // end namespace interaction\n   60  } // end namespace tools\n   61  \n   62: #endif /* INCLUDED_flixel_system_debug_interaction_tools_GraphicCursorCross */ \n   63  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/interaction/tools/GraphicEraserTool.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_interaction_tools_GraphicEraserTool\n    3: #define INCLUDED_flixel_system_debug_interaction_tools_GraphicEraserTool\n    4  \n    5  #ifndef HXCPP_H\n    .\n   10  #include <openfl/display/BitmapData.h>\n   11  #endif\n   12: HX_DECLARE_CLASS5(flixel,_hx_system,debug,interaction,tools,GraphicEraserTool)\n   13  HX_DECLARE_CLASS2(openfl,display,BitmapData)\n   14  HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)\n   ..\n   16  namespace flixel{\n   17  namespace _hx_system{\n   18: namespace debug{\n   19  namespace interaction{\n   20  namespace tools{\n   ..\n   32  \n   33  \t\tvoid __construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   34: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.interaction.tools.GraphicEraserTool\")\n   35  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   36  \t\tinline void *operator new(size_t inSize, int extra)\n   37: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.interaction.tools.GraphicEraserTool\"); }\n   38  \t\tstatic hx::ObjectPtr< GraphicEraserTool_obj > __new(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   39  \t\tstatic hx::ObjectPtr< GraphicEraserTool_obj > __alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   ..\n   56  } // end namespace flixel\n   57  } // end namespace system\n   58: } // end namespace debug\n   59  } // end namespace interaction\n   60  } // end namespace tools\n   61  \n   62: #endif /* INCLUDED_flixel_system_debug_interaction_tools_GraphicEraserTool */ \n   63  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/interaction/tools/GraphicMoverTool.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_interaction_tools_GraphicMoverTool\n    3: #define INCLUDED_flixel_system_debug_interaction_tools_GraphicMoverTool\n    4  \n    5  #ifndef HXCPP_H\n    .\n   10  #include <openfl/display/BitmapData.h>\n   11  #endif\n   12: HX_DECLARE_CLASS5(flixel,_hx_system,debug,interaction,tools,GraphicMoverTool)\n   13  HX_DECLARE_CLASS2(openfl,display,BitmapData)\n   14  HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)\n   ..\n   16  namespace flixel{\n   17  namespace _hx_system{\n   18: namespace debug{\n   19  namespace interaction{\n   20  namespace tools{\n   ..\n   32  \n   33  \t\tvoid __construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   34: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.interaction.tools.GraphicMoverTool\")\n   35  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   36  \t\tinline void *operator new(size_t inSize, int extra)\n   37: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.interaction.tools.GraphicMoverTool\"); }\n   38  \t\tstatic hx::ObjectPtr< GraphicMoverTool_obj > __new(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   39  \t\tstatic hx::ObjectPtr< GraphicMoverTool_obj > __alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   ..\n   56  } // end namespace flixel\n   57  } // end namespace system\n   58: } // end namespace debug\n   59  } // end namespace interaction\n   60  } // end namespace tools\n   61  \n   62: #endif /* INCLUDED_flixel_system_debug_interaction_tools_GraphicMoverTool */ \n   63  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/interaction/tools/Mover.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_interaction_tools_Mover\n    3: #define INCLUDED_flixel_system_debug_interaction_tools_Mover\n    4  \n    5  #ifndef HXCPP_H\n    .\n    7  #endif\n    8  \n    9: #ifndef INCLUDED_flixel_system_debug_interaction_tools_Tool\n   10: #include <flixel/system/debug/interaction/tools/Tool.h>\n   11  #endif\n   12  HX_DECLARE_CLASS2(flixel,math,FlxPoint)\n   13: HX_DECLARE_CLASS3(flixel,_hx_system,debug,Window)\n   14: HX_DECLARE_CLASS4(flixel,_hx_system,debug,interaction,Interaction)\n   15: HX_DECLARE_CLASS5(flixel,_hx_system,debug,interaction,tools,Mover)\n   16: HX_DECLARE_CLASS5(flixel,_hx_system,debug,interaction,tools,Tool)\n   17  HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)\n   18  HX_DECLARE_CLASS2(flixel,util,IFlxPooled)\n   ..\n   27  namespace flixel{\n   28  namespace _hx_system{\n   29: namespace debug{\n   30  namespace interaction{\n   31  namespace tools{\n   32  \n   33  \n   34: class HXCPP_CLASS_ATTRIBUTES Mover_obj : public  ::flixel::_hx_system::debug::interaction::tools::Tool_obj\n   35  {\n   36  \tpublic:\n   37: \t\ttypedef  ::flixel::_hx_system::debug::interaction::tools::Tool_obj super;\n   38  \t\ttypedef Mover_obj OBJ_;\n   39  \t\tMover_obj();\n   ..\n   43  \n   44  \t\tvoid __construct();\n   45: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.interaction.tools.Mover\")\n   46  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   47  \t\tinline void *operator new(size_t inSize, int extra)\n   48: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.interaction.tools.Mover\"); }\n   49  \t\tstatic hx::ObjectPtr< Mover_obj > __new();\n   50  \t\tstatic hx::ObjectPtr< Mover_obj > __alloc(hx::Ctx *_hx_ctx);\n   ..\n   66  \t\tbool _dragging;\n   67  \t\t ::flixel::math::FlxPoint _lastCursorPosition;\n   68: \t\t ::flixel::_hx_system::debug::interaction::tools::Tool init( ::flixel::_hx_system::debug::interaction::Interaction brain);\n   69  \n   70  \t\tvoid update();\n   ..\n   83  } // end namespace flixel\n   84  } // end namespace system\n   85: } // end namespace debug\n   86  } // end namespace interaction\n   87  } // end namespace tools\n   88  \n   89: #endif /* INCLUDED_flixel_system_debug_interaction_tools_Mover */ \n   90  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/interaction/tools/Pointer.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_interaction_tools_Pointer\n    3: #define INCLUDED_flixel_system_debug_interaction_tools_Pointer\n    4  \n    5  #ifndef HXCPP_H\n    .\n    7  #endif\n    8  \n    9: #ifndef INCLUDED_flixel_system_debug_interaction_tools_Tool\n   10: #include <flixel/system/debug/interaction/tools/Tool.h>\n   11  #endif\n   12  HX_DECLARE_CLASS1(flixel,FlxBasic)\n   13  HX_DECLARE_CLASS2(flixel,math,FlxPoint)\n   14  HX_DECLARE_CLASS2(flixel,math,FlxRect)\n   15: HX_DECLARE_CLASS3(flixel,_hx_system,debug,Window)\n   16: HX_DECLARE_CLASS4(flixel,_hx_system,debug,interaction,Interaction)\n   17: HX_DECLARE_CLASS5(flixel,_hx_system,debug,interaction,tools,Pointer)\n   18: HX_DECLARE_CLASS5(flixel,_hx_system,debug,interaction,tools,Tool)\n   19  HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)\n   20  HX_DECLARE_CLASS2(flixel,util,IFlxPooled)\n   ..\n   29  namespace flixel{\n   30  namespace _hx_system{\n   31: namespace debug{\n   32  namespace interaction{\n   33  namespace tools{\n   34  \n   35  \n   36: class HXCPP_CLASS_ATTRIBUTES Pointer_obj : public  ::flixel::_hx_system::debug::interaction::tools::Tool_obj\n   37  {\n   38  \tpublic:\n   39: \t\ttypedef  ::flixel::_hx_system::debug::interaction::tools::Tool_obj super;\n   40  \t\ttypedef Pointer_obj OBJ_;\n   41  \t\tPointer_obj();\n   ..\n   45  \n   46  \t\tvoid __construct();\n   47: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.interaction.tools.Pointer\")\n   48  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   49  \t\tinline void *operator new(size_t inSize, int extra)\n   50: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.interaction.tools.Pointer\"); }\n   51  \t\tstatic hx::ObjectPtr< Pointer_obj > __new();\n   52  \t\tstatic hx::ObjectPtr< Pointer_obj > __alloc(hx::Ctx *_hx_ctx);\n   ..\n   72  \t\t ::flixel::math::FlxRect _selectionArea;\n   73  \t\t::Array< ::Dynamic> _itemsInSelectionArea;\n   74: \t\t ::flixel::_hx_system::debug::interaction::tools::Tool init( ::flixel::_hx_system::debug::interaction::Interaction brain);\n   75  \n   76  \t\tvoid update();\n   ..\n  100  } // end namespace flixel\n  101  } // end namespace system\n  102: } // end namespace debug\n  103  } // end namespace interaction\n  104  } // end namespace tools\n  105  \n  106: #endif /* INCLUDED_flixel_system_debug_interaction_tools_Pointer */ \n  107  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/interaction/tools/Tool.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_interaction_tools_Tool\n    3: #define INCLUDED_flixel_system_debug_interaction_tools_Tool\n    4  \n    5  #ifndef HXCPP_H\n    .\n   13  #include <flixel/util/IFlxDestroyable.h>\n   14  #endif\n   15: HX_DECLARE_CLASS3(flixel,_hx_system,debug,Window)\n   16: HX_DECLARE_CLASS4(flixel,_hx_system,debug,interaction,Interaction)\n   17: HX_DECLARE_CLASS5(flixel,_hx_system,debug,interaction,tools,Tool)\n   18  HX_DECLARE_CLASS3(flixel,_hx_system,ui,FlxSystemButton)\n   19  HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)\n   ..\n   29  namespace flixel{\n   30  namespace _hx_system{\n   31: namespace debug{\n   32  namespace interaction{\n   33  namespace tools{\n   ..\n   45  \n   46  \t\tvoid __construct();\n   47: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.interaction.tools.Tool\")\n   48  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   49  \t\tinline void *operator new(size_t inSize, int extra)\n   50: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.interaction.tools.Tool\"); }\n   51  \t\tstatic hx::ObjectPtr< Tool_obj > __new();\n   52  \t\tstatic hx::ObjectPtr< Tool_obj > __alloc(hx::Ctx *_hx_ctx);\n   ..\n   71  \t\t::String _name;\n   72  \t\t::String _shortcut;\n   73: \t\t ::flixel::_hx_system::debug::interaction::Interaction _brain;\n   74: \t\tvirtual  ::flixel::_hx_system::debug::interaction::tools::Tool init( ::flixel::_hx_system::debug::interaction::Interaction brain);\n   75  \t\t::Dynamic init_dyn();\n   76  \n   ..\n  109  } // end namespace flixel\n  110  } // end namespace system\n  111: } // end namespace debug\n  112  } // end namespace interaction\n  113  } // end namespace tools\n  114  \n  115: #endif /* INCLUDED_flixel_system_debug_interaction_tools_Tool */ \n  116  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/log/LogStyle.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_log_LogStyle\n    3: #define INCLUDED_flixel_system_debug_log_LogStyle\n    4  \n    5  #ifndef HXCPP_H\n    .\n    8  \n    9  HX_DECLARE_STACK_FRAME(_hx_pos_4946e010770d7497_52_new)\n   10: HX_DECLARE_CLASS4(flixel,_hx_system,debug,log,LogStyle)\n   11  \n   12  namespace flixel{\n   13  namespace _hx_system{\n   14: namespace debug{\n   15  namespace log{\n   16  \n   ..\n   27  \n   28  \t\tvoid __construct(::String __o_Prefix,::String __o_Color,hx::Null< int >  __o_Size,hx::Null< bool >  __o_Bold,hx::Null< bool >  __o_Italic,hx::Null< bool >  __o_Underlined,::String ErrorSound,hx::Null< bool >  __o_OpenConsole, ::Dynamic CallbackFunction);\n   29: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.log.LogStyle\")\n   30  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   31  \t\tinline void *operator new(size_t inSize, int extra)\n   32: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.log.LogStyle\"); }\n   33  \n   34  \t\thx::ObjectPtr< LogStyle_obj > __new(::String __o_Prefix,::String __o_Color,hx::Null< int >  __o_Size,hx::Null< bool >  __o_Bold,hx::Null< bool >  __o_Italic,hx::Null< bool >  __o_Underlined,::String ErrorSound,hx::Null< bool >  __o_OpenConsole, ::Dynamic CallbackFunction) {\n   ..\n   39  \n   40  \t\tstatic hx::ObjectPtr< LogStyle_obj > __alloc(hx::Ctx *_hx_ctx,::String __o_Prefix,::String __o_Color,hx::Null< int >  __o_Size,hx::Null< bool >  __o_Bold,hx::Null< bool >  __o_Italic,hx::Null< bool >  __o_Underlined,::String ErrorSound,hx::Null< bool >  __o_OpenConsole, ::Dynamic CallbackFunction) {\n   41: \t\t\tLogStyle_obj *__this = (LogStyle_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(LogStyle_obj), true, \"flixel.system.debug.log.LogStyle\"));\n   42  \t\t\t*(void **)__this = LogStyle_obj::_hx_vtable;\n   43  {\n   ..\n   50  bool OpenConsole = __o_OpenConsole.Default(false);\n   51              \tHX_STACKFRAME(&_hx_pos_4946e010770d7497_52_new)\n   52: HXLINE(  53)\t\t( ( ::flixel::_hx_system::debug::log::LogStyle)(__this) )->prefix = Prefix;\n   53: HXLINE(  54)\t\t( ( ::flixel::_hx_system::debug::log::LogStyle)(__this) )->color = Color;\n   54: HXLINE(  55)\t\t( ( ::flixel::_hx_system::debug::log::LogStyle)(__this) )->size = Size;\n   55: HXLINE(  56)\t\t( ( ::flixel::_hx_system::debug::log::LogStyle)(__this) )->bold = Bold;\n   56: HXLINE(  57)\t\t( ( ::flixel::_hx_system::debug::log::LogStyle)(__this) )->italic = Italic;\n   57: HXLINE(  58)\t\t( ( ::flixel::_hx_system::debug::log::LogStyle)(__this) )->underlined = Underlined;\n   58: HXLINE(  59)\t\t( ( ::flixel::_hx_system::debug::log::LogStyle)(__this) )->errorSound = ErrorSound;\n   59: HXLINE(  60)\t\t( ( ::flixel::_hx_system::debug::log::LogStyle)(__this) )->openConsole = OpenConsole;\n   60: HXLINE(  61)\t\t( ( ::flixel::_hx_system::debug::log::LogStyle)(__this) )->callbackFunction = CallbackFunction;\n   61              \t}\n   62  \t\t\n   ..\n   82  \n   83  \t\tstatic void __boot();\n   84: \t\tstatic  ::flixel::_hx_system::debug::log::LogStyle NORMAL;\n   85: \t\tstatic  ::flixel::_hx_system::debug::log::LogStyle WARNING;\n   86: \t\tstatic  ::flixel::_hx_system::debug::log::LogStyle ERROR;\n   87: \t\tstatic  ::flixel::_hx_system::debug::log::LogStyle NOTICE;\n   88: \t\tstatic  ::flixel::_hx_system::debug::log::LogStyle CONSOLE;\n   89  \t\t::String prefix;\n   90  \t\t::String color;\n   ..\n  101  } // end namespace flixel\n  102  } // end namespace system\n  103: } // end namespace debug\n  104  } // end namespace log\n  105  \n  106: #endif /* INCLUDED_flixel_system_debug_log_LogStyle */ \n  107  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/stats/_Stats/GraphicMaximizeButton.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_stats__Stats_GraphicMaximizeButton\n    3: #define INCLUDED_flixel_system_debug_stats__Stats_GraphicMaximizeButton\n    4  \n    5  #ifndef HXCPP_H\n    .\n   10  #include <openfl/display/BitmapData.h>\n   11  #endif\n   12: HX_DECLARE_CLASS5(flixel,_hx_system,debug,stats,_Stats,GraphicMaximizeButton)\n   13  HX_DECLARE_CLASS2(openfl,display,BitmapData)\n   14  HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)\n   ..\n   16  namespace flixel{\n   17  namespace _hx_system{\n   18: namespace debug{\n   19  namespace stats{\n   20  namespace _Stats{\n   ..\n   32  \n   33  \t\tvoid __construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   34: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.stats._Stats.GraphicMaximizeButton\")\n   35  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   36  \t\tinline void *operator new(size_t inSize, int extra)\n   37: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.stats._Stats.GraphicMaximizeButton\"); }\n   38  \t\tstatic hx::ObjectPtr< GraphicMaximizeButton_obj > __new(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   39  \t\tstatic hx::ObjectPtr< GraphicMaximizeButton_obj > __alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   ..\n   56  } // end namespace flixel\n   57  } // end namespace system\n   58: } // end namespace debug\n   59  } // end namespace stats\n   60  } // end namespace _Stats\n   61  \n   62: #endif /* INCLUDED_flixel_system_debug_stats__Stats_GraphicMaximizeButton */ \n   63  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/stats/_Stats/GraphicMinimizeButton.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_stats__Stats_GraphicMinimizeButton\n    3: #define INCLUDED_flixel_system_debug_stats__Stats_GraphicMinimizeButton\n    4  \n    5  #ifndef HXCPP_H\n    .\n   10  #include <openfl/display/BitmapData.h>\n   11  #endif\n   12: HX_DECLARE_CLASS5(flixel,_hx_system,debug,stats,_Stats,GraphicMinimizeButton)\n   13  HX_DECLARE_CLASS2(openfl,display,BitmapData)\n   14  HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)\n   ..\n   16  namespace flixel{\n   17  namespace _hx_system{\n   18: namespace debug{\n   19  namespace stats{\n   20  namespace _Stats{\n   ..\n   32  \n   33  \t\tvoid __construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   34: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.stats._Stats.GraphicMinimizeButton\")\n   35  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   36  \t\tinline void *operator new(size_t inSize, int extra)\n   37: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.stats._Stats.GraphicMinimizeButton\"); }\n   38  \t\tstatic hx::ObjectPtr< GraphicMinimizeButton_obj > __new(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   39  \t\tstatic hx::ObjectPtr< GraphicMinimizeButton_obj > __alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA);\n   ..\n   56  } // end namespace flixel\n   57  } // end namespace system\n   58: } // end namespace debug\n   59  } // end namespace stats\n   60  } // end namespace _Stats\n   61  \n   62: #endif /* INCLUDED_flixel_system_debug_stats__Stats_GraphicMinimizeButton */ \n   63  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/watch/Tracker.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_watch_Tracker\n    3: #define INCLUDED_flixel_system_debug_watch_Tracker\n    4  \n    5  #ifndef HXCPP_H\n    .\n    7  #endif\n    8  \n    9: #ifndef INCLUDED_flixel_system_debug_watch_Watch\n   10: #include <flixel/system/debug/watch/Watch.h>\n   11  #endif\n   12: HX_DECLARE_CLASS3(flixel,_hx_system,debug,Window)\n   13: HX_DECLARE_CLASS4(flixel,_hx_system,debug,watch,Tracker)\n   14: HX_DECLARE_CLASS4(flixel,_hx_system,debug,watch,Watch)\n   15  HX_DECLARE_CLASS2(openfl,display,BitmapData)\n   16  HX_DECLARE_CLASS2(openfl,display,DisplayObject)\n   ..\n   25  namespace flixel{\n   26  namespace _hx_system{\n   27: namespace debug{\n   28  namespace watch{\n   29  \n   30  \n   31: class HXCPP_CLASS_ATTRIBUTES Tracker_obj : public  ::flixel::_hx_system::debug::watch::Watch_obj\n   32  {\n   33  \tpublic:\n   34: \t\ttypedef  ::flixel::_hx_system::debug::watch::Watch_obj super;\n   35  \t\ttypedef Tracker_obj OBJ_;\n   36  \t\tTracker_obj();\n   ..\n   40  \n   41  \t\tvoid __construct(::String Title, ::openfl::display::BitmapData Icon, ::Dynamic Width, ::Dynamic Height, ::Dynamic Resizable, ::openfl::geom::Rectangle Bounds, ::Dynamic Closable);\n   42: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.watch.Tracker\")\n   43  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   44  \t\tinline void *operator new(size_t inSize, int extra)\n   45: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.watch.Tracker\"); }\n   46  \t\tstatic hx::ObjectPtr< Tracker_obj > __new(::String Title, ::openfl::display::BitmapData Icon, ::Dynamic Width, ::Dynamic Height, ::Dynamic Resizable, ::openfl::geom::Rectangle Bounds, ::Dynamic Closable);\n   47  \t\tstatic hx::ObjectPtr< Tracker_obj > __alloc(hx::Ctx *_hx_ctx,::String Title, ::openfl::display::BitmapData Icon, ::Dynamic Width, ::Dynamic Height, ::Dynamic Resizable, ::openfl::geom::Rectangle Bounds, ::Dynamic Closable);\n   ..\n   60  } // end namespace flixel\n   61  } // end namespace system\n   62: } // end namespace debug\n   63  } // end namespace watch\n   64  \n   65: #endif /* INCLUDED_flixel_system_debug_watch_Tracker */ \n   66  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/watch/TrackerProfile.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_watch_TrackerProfile\n    3: #define INCLUDED_flixel_system_debug_watch_TrackerProfile\n    4  \n    5  #ifndef HXCPP_H\n    .\n    7  #endif\n    8  \n    9: HX_DECLARE_CLASS4(flixel,_hx_system,debug,watch,TrackerProfile)\n   10  \n   11  namespace flixel{\n   12  namespace _hx_system{\n   13: namespace debug{\n   14  namespace watch{\n   15  \n   ..\n   26  \n   27  \t\tvoid __construct(hx::Class ObjectClass,::Array< ::String > Variables,::Array< ::Dynamic> Extensions);\n   28: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.watch.TrackerProfile\")\n   29  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   30  \t\tinline void *operator new(size_t inSize, int extra)\n   31: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.watch.TrackerProfile\"); }\n   32  \t\tstatic hx::ObjectPtr< TrackerProfile_obj > __new(hx::Class ObjectClass,::Array< ::String > Variables,::Array< ::Dynamic> Extensions);\n   33  \t\tstatic hx::ObjectPtr< TrackerProfile_obj > __alloc(hx::Ctx *_hx_ctx,hx::Class ObjectClass,::Array< ::String > Variables,::Array< ::Dynamic> Extensions);\n   ..\n   57  } // end namespace flixel\n   58  } // end namespace system\n   59: } // end namespace debug\n   60  } // end namespace watch\n   61  \n   62: #endif /* INCLUDED_flixel_system_debug_watch_TrackerProfile */ \n   63  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/debug/watch/Watch.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_debug_watch_Watch\n    3: #define INCLUDED_flixel_system_debug_watch_Watch\n    4  \n    5  #ifndef HXCPP_H\n    .\n    7  #endif\n    8  \n    9: #ifndef INCLUDED_flixel_system_debug_Window\n   10: #include <flixel/system/debug/Window.h>\n   11  #endif\n   12: HX_DECLARE_CLASS3(flixel,_hx_system,debug,Window)\n   13: HX_DECLARE_CLASS4(flixel,_hx_system,debug,watch,Watch)\n   14  HX_DECLARE_CLASS2(openfl,display,BitmapData)\n   15  HX_DECLARE_CLASS2(openfl,display,DisplayObject)\n   ..\n   24  namespace flixel{\n   25  namespace _hx_system{\n   26: namespace debug{\n   27  namespace watch{\n   28  \n   29  \n   30: class HXCPP_CLASS_ATTRIBUTES Watch_obj : public  ::flixel::_hx_system::debug::Window_obj\n   31  {\n   32  \tpublic:\n   33: \t\ttypedef  ::flixel::_hx_system::debug::Window_obj super;\n   34  \t\ttypedef Watch_obj OBJ_;\n   35  \t\tWatch_obj();\n   ..\n   39  \n   40  \t\tvoid __construct(::String Title, ::openfl::display::BitmapData Icon, ::Dynamic Width, ::Dynamic Height, ::Dynamic Resizable, ::openfl::geom::Rectangle Bounds, ::Dynamic Closable);\n   41: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.debug.watch.Watch\")\n   42  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   43  \t\tinline void *operator new(size_t inSize, int extra)\n   44: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.debug.watch.Watch\"); }\n   45  \t\tstatic hx::ObjectPtr< Watch_obj > __new(::String Title, ::openfl::display::BitmapData Icon, ::Dynamic Width, ::Dynamic Height, ::Dynamic Resizable, ::openfl::geom::Rectangle Bounds, ::Dynamic Closable);\n   46  \t\tstatic hx::ObjectPtr< Watch_obj > __alloc(hx::Ctx *_hx_ctx,::String Title, ::openfl::display::BitmapData Icon, ::Dynamic Width, ::Dynamic Height, ::Dynamic Resizable, ::openfl::geom::Rectangle Bounds, ::Dynamic Closable);\n   ..\n   59  } // end namespace flixel\n   60  } // end namespace system\n   61: } // end namespace debug\n   62  } // end namespace watch\n   63  \n   64: #endif /* INCLUDED_flixel_system_debug_watch_Watch */ \n   65  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/frontEnds/DebuggerFrontEnd.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd\n    3: #define INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd\n    4  \n    5  #ifndef HXCPP_H\n    .\n    7  #endif\n    8  \n    9: HX_DECLARE_CLASS3(flixel,_hx_system,debug,FlxDebuggerLayout)\n   10: HX_DECLARE_CLASS3(flixel,_hx_system,debug,Window)\n   11: HX_DECLARE_CLASS4(flixel,_hx_system,debug,watch,TrackerProfile)\n   12: HX_DECLARE_CLASS3(flixel,_hx_system,frontEnds,DebuggerFrontEnd)\n   13  HX_DECLARE_CLASS3(flixel,_hx_system,ui,FlxSystemButton)\n   14  HX_DECLARE_CLASS2(flixel,util,FlxHorizontalAlign)\n   ..\n   31  \n   32  \n   33: class HXCPP_CLASS_ATTRIBUTES DebuggerFrontEnd_obj : public hx::Object\n   34  {\n   35  \tpublic:\n   36  \t\ttypedef hx::Object super;\n   37: \t\ttypedef DebuggerFrontEnd_obj OBJ_;\n   38: \t\tDebuggerFrontEnd_obj();\n   39  \n   40  \tpublic:\n   ..\n   42  \n   43  \t\tvoid __construct();\n   44: \t\tinline void *operator new(size_t inSize, bool inContainer=true,const char *inName=\"flixel.system.frontEnds.DebuggerFrontEnd\")\n   45  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   46  \t\tinline void *operator new(size_t inSize, int extra)\n   47: \t\t\t{ return hx::Object::operator new(inSize+extra,true,\"flixel.system.frontEnds.DebuggerFrontEnd\"); }\n   48: \t\tstatic hx::ObjectPtr< DebuggerFrontEnd_obj > __new();\n   49: \t\tstatic hx::ObjectPtr< DebuggerFrontEnd_obj > __alloc(hx::Ctx *_hx_ctx);\n   50  \t\tstatic void * _hx_vtable;\n   51  \t\tstatic Dynamic __CreateEmpty();\n   52  \t\tstatic Dynamic __Create(hx::DynamicArray inArgs);\n   53: \t\t//~DebuggerFrontEnd_obj();\n   54  \n   55  \t\tHX_DO_RTTI_ALL;\n   ..\n   61  \t\tvoid __Visit(HX_VISIT_PARAMS);\n   62  \t\tbool _hx_isInstanceOf(int inClassId);\n   63: \t\t::String __ToString() const { return HX_HCSTRING(\"DebuggerFrontEnd\",\"\\x13\",\"\\xf8\",\"\\xb4\",\"\\x5e\"); }\n   64  \n   65  \t\tint precision;\n   66  \t\t::Array< int > toggleKeys;\n   67: \t\tbool drawDebug;\n   68: \t\t ::flixel::util::_FlxSignal::FlxSignal0 drawDebugChanged;\n   69  \t\t ::flixel::util::_FlxSignal::FlxSignal0 visibilityChanged;\n   70  \t\tbool visible;\n   71: \t\tvoid setLayout( ::flixel::_hx_system::debug::FlxDebuggerLayout Layout);\n   72  \t\t::Dynamic setLayout_dyn();\n   73  \n   ..\n   78  \t\t::Dynamic addButton_dyn();\n   79  \n   80: \t\t ::flixel::_hx_system::debug::Window track( ::Dynamic ObjectOrClass,::String WindowTitle);\n   81  \t\t::Dynamic track_dyn();\n   82  \n   83: \t\tvoid addTrackerProfile( ::flixel::_hx_system::debug::watch::TrackerProfile Profile);\n   84  \t\t::Dynamic addTrackerProfile_dyn();\n   85  \n   ..\n   87  \t\t::Dynamic removeButton_dyn();\n   88  \n   89: \t\tbool set_drawDebug(bool Value);\n   90: \t\t::Dynamic set_drawDebug_dyn();\n   91  \n   92  \t\tbool set_visible(bool Value);\n   ..\n   99  } // end namespace frontEnds\n  100  \n  101: #endif /* INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd */ \n  102  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/system/frontEnds/LogFrontEnd.h:\n    7  #endif\n    8  \n    9: HX_DECLARE_CLASS4(flixel,_hx_system,debug,log,LogStyle)\n   10  HX_DECLARE_CLASS3(flixel,_hx_system,frontEnds,LogFrontEnd)\n   11  \n   ..\n   61  \t\t::Dynamic notice_dyn();\n   62  \n   63: \t\tvoid advanced( ::Dynamic Data, ::flixel::_hx_system::debug::log::LogStyle Style,hx::Null< bool >  FireOnce);\n   64  \t\t::Dynamic advanced_dyn();\n   65  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/flixel/util/FlxStringUtil.h:\n  115  \t\tstatic ::Dynamic imageToCSV_dyn();\n  116  \n  117: \t\tstatic ::String getDebugString(::Array< ::Dynamic> LabelValuePairs);\n  118: \t\tstatic ::Dynamic getDebugString_dyn();\n  119  \n  120  \t\tstatic bool contains(::String s,::String str);\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/lime/graphics/opengl/ext/EXT_debug_label.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_lime_graphics_opengl_ext_EXT_debug_label\n    3: #define INCLUDED_lime_graphics_opengl_ext_EXT_debug_label\n    4  \n    5  #ifndef HXCPP_H\n    .\n    8  \n    9  HX_DECLARE_STACK_FRAME(_hx_pos_7a3489e7f3921050_6_new)\n   10: HX_DECLARE_CLASS4(lime,graphics,opengl,ext,EXT_debug_label)\n   11  \n   12  namespace lime{\n   ..\n   16  \n   17  \n   18: class HXCPP_CLASS_ATTRIBUTES EXT_debug_label_obj : public hx::Object\n   19  {\n   20  \tpublic:\n   21  \t\ttypedef hx::Object super;\n   22: \t\ttypedef EXT_debug_label_obj OBJ_;\n   23: \t\tEXT_debug_label_obj();\n   24  \n   25  \tpublic:\n   ..\n   27  \n   28  \t\tvoid __construct();\n   29: \t\tinline void *operator new(size_t inSize, bool inContainer=false,const char *inName=\"lime.graphics.opengl.ext.EXT_debug_label\")\n   30  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   31  \t\tinline void *operator new(size_t inSize, int extra)\n   32: \t\t\t{ return hx::Object::operator new(inSize+extra,false,\"lime.graphics.opengl.ext.EXT_debug_label\"); }\n   33  \n   34: \t\thx::ObjectPtr< EXT_debug_label_obj > __new() {\n   35: \t\t\thx::ObjectPtr< EXT_debug_label_obj > __this = new EXT_debug_label_obj();\n   36  \t\t\t__this->__construct();\n   37  \t\t\treturn __this;\n   38  \t\t}\n   39  \n   40: \t\tstatic hx::ObjectPtr< EXT_debug_label_obj > __alloc(hx::Ctx *_hx_ctx) {\n   41: \t\t\tEXT_debug_label_obj *__this = (EXT_debug_label_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(EXT_debug_label_obj), false, \"lime.graphics.opengl.ext.EXT_debug_label\"));\n   42: \t\t\t*(void **)__this = EXT_debug_label_obj::_hx_vtable;\n   43  {\n   44              \tHX_STACKFRAME(&_hx_pos_7a3489e7f3921050_6_new)\n   45: HXLINE(  14)\t\t( ( ::lime::graphics::opengl::ext::EXT_debug_label)(__this) )->VERTEX_ARRAY_OBJECT_EXT = (int)37204;\n   46: HXLINE(  13)\t\t( ( ::lime::graphics::opengl::ext::EXT_debug_label)(__this) )->QUERY_OBJECT_EXT = (int)37203;\n   47: HXLINE(  12)\t\t( ( ::lime::graphics::opengl::ext::EXT_debug_label)(__this) )->BUFFER_OBJECT_EXT = (int)37201;\n   48: HXLINE(  11)\t\t( ( ::lime::graphics::opengl::ext::EXT_debug_label)(__this) )->SHADER_OBJECT_EXT = (int)35656;\n   49: HXLINE(  10)\t\t( ( ::lime::graphics::opengl::ext::EXT_debug_label)(__this) )->PROGRAM_OBJECT_EXT = (int)35648;\n   50: HXLINE(   9)\t\t( ( ::lime::graphics::opengl::ext::EXT_debug_label)(__this) )->PROGRAM_PIPELINE_OBJECT_EXT = (int)35407;\n   51              \t}\n   52  \t\t\n   ..\n   57  \t\tstatic Dynamic __CreateEmpty();\n   58  \t\tstatic Dynamic __Create(hx::DynamicArray inArgs);\n   59: \t\t//~EXT_debug_label_obj();\n   60  \n   61  \t\tHX_DO_RTTI_ALL;\n   ..\n   65  \t\tstatic void __register();\n   66  \t\tbool _hx_isInstanceOf(int inClassId);\n   67: \t\t::String __ToString() const { return HX_HCSTRING(\"EXT_debug_label\",\"\\xca\",\"\\x3b\",\"\\x0e\",\"\\x9c\"); }\n   68  \n   69  \t\tint PROGRAM_PIPELINE_OBJECT_EXT;\n   ..\n   80  } // end namespace ext\n   81  \n   82: #endif /* INCLUDED_lime_graphics_opengl_ext_EXT_debug_label */ \n   83  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/lime/graphics/opengl/ext/EXT_debug_marker.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_lime_graphics_opengl_ext_EXT_debug_marker\n    3: #define INCLUDED_lime_graphics_opengl_ext_EXT_debug_marker\n    4  \n    5  #ifndef HXCPP_H\n    .\n    8  \n    9  HX_DECLARE_STACK_FRAME(_hx_pos_2d4093c89e1674d3_7_new)\n   10: HX_DECLARE_CLASS4(lime,graphics,opengl,ext,EXT_debug_marker)\n   11  \n   12  namespace lime{\n   ..\n   16  \n   17  \n   18: class HXCPP_CLASS_ATTRIBUTES EXT_debug_marker_obj : public hx::Object\n   19  {\n   20  \tpublic:\n   21  \t\ttypedef hx::Object super;\n   22: \t\ttypedef EXT_debug_marker_obj OBJ_;\n   23: \t\tEXT_debug_marker_obj();\n   24  \n   25  \tpublic:\n   ..\n   27  \n   28  \t\tvoid __construct();\n   29: \t\tinline void *operator new(size_t inSize, bool inContainer=false,const char *inName=\"lime.graphics.opengl.ext.EXT_debug_marker\")\n   30  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   31  \t\tinline void *operator new(size_t inSize, int extra)\n   32: \t\t\t{ return hx::Object::operator new(inSize+extra,false,\"lime.graphics.opengl.ext.EXT_debug_marker\"); }\n   33  \n   34: \t\thx::ObjectPtr< EXT_debug_marker_obj > __new() {\n   35: \t\t\thx::ObjectPtr< EXT_debug_marker_obj > __this = new EXT_debug_marker_obj();\n   36  \t\t\t__this->__construct();\n   37  \t\t\treturn __this;\n   38  \t\t}\n   39  \n   40: \t\tstatic hx::ObjectPtr< EXT_debug_marker_obj > __alloc(hx::Ctx *_hx_ctx) {\n   41: \t\t\tEXT_debug_marker_obj *__this = (EXT_debug_marker_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(EXT_debug_marker_obj), false, \"lime.graphics.opengl.ext.EXT_debug_marker\"));\n   42: \t\t\t*(void **)__this = EXT_debug_marker_obj::_hx_vtable;\n   43  {\n   44              \tHX_STACKFRAME(&_hx_pos_2d4093c89e1674d3_7_new)\n   ..\n   51  \t\tstatic Dynamic __CreateEmpty();\n   52  \t\tstatic Dynamic __Create(hx::DynamicArray inArgs);\n   53: \t\t//~EXT_debug_marker_obj();\n   54  \n   55  \t\tHX_DO_RTTI_ALL;\n   56  \t\tstatic void __register();\n   57  \t\tbool _hx_isInstanceOf(int inClassId);\n   58: \t\t::String __ToString() const { return HX_HCSTRING(\"EXT_debug_marker\",\"\\x24\",\"\\x63\",\"\\x59\",\"\\x61\"); }\n   59  \n   60  };\n   ..\n   65  } // end namespace ext\n   66  \n   67: #endif /* INCLUDED_lime_graphics_opengl_ext_EXT_debug_marker */ \n   68  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/lime/graphics/opengl/ext/KHR_debug.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_lime_graphics_opengl_ext_KHR_debug\n    3: #define INCLUDED_lime_graphics_opengl_ext_KHR_debug\n    4  \n    5  #ifndef HXCPP_H\n    .\n    8  \n    9  HX_DECLARE_STACK_FRAME(_hx_pos_e7ead9e1a8712dad_6_new)\n   10: HX_DECLARE_CLASS4(lime,graphics,opengl,ext,KHR_debug)\n   11  \n   12  namespace lime{\n   ..\n   16  \n   17  \n   18: class HXCPP_CLASS_ATTRIBUTES KHR_debug_obj : public hx::Object\n   19  {\n   20  \tpublic:\n   21  \t\ttypedef hx::Object super;\n   22: \t\ttypedef KHR_debug_obj OBJ_;\n   23: \t\tKHR_debug_obj();\n   24  \n   25  \tpublic:\n   ..\n   27  \n   28  \t\tvoid __construct();\n   29: \t\tinline void *operator new(size_t inSize, bool inContainer=false,const char *inName=\"lime.graphics.opengl.ext.KHR_debug\")\n   30  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   31  \t\tinline void *operator new(size_t inSize, int extra)\n   32: \t\t\t{ return hx::Object::operator new(inSize+extra,false,\"lime.graphics.opengl.ext.KHR_debug\"); }\n   33  \n   34: \t\thx::ObjectPtr< KHR_debug_obj > __new() {\n   35: \t\t\thx::ObjectPtr< KHR_debug_obj > __this = new KHR_debug_obj();\n   36  \t\t\t__this->__construct();\n   37  \t\t\treturn __this;\n   38  \t\t}\n   39  \n   40: \t\tstatic hx::ObjectPtr< KHR_debug_obj > __alloc(hx::Ctx *_hx_ctx) {\n   41: \t\t\tKHR_debug_obj *__this = (KHR_debug_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(KHR_debug_obj), false, \"lime.graphics.opengl.ext.KHR_debug\"));\n   42: \t\t\t*(void **)__this = KHR_debug_obj::_hx_vtable;\n   43  {\n   44              \tHX_STACKFRAME(&_hx_pos_e7ead9e1a8712dad_6_new)\n   45: HXLINE(  46)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->STACK_UNDERFLOW = (int)1284;\n   46: HXLINE(  45)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->STACK_OVERFLOW = (int)1283;\n   47: HXLINE(  44)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->CONTEXT_FLAG_DEBUG_BIT = (int)2;\n   48: HXLINE(  43)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_OUTPUT = (int)37600;\n   49: HXLINE(  42)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_SEVERITY_LOW = (int)37192;\n   50: HXLINE(  41)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_SEVERITY_MEDIUM = (int)37191;\n   51: HXLINE(  40)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_SEVERITY_HIGH = (int)37190;\n   52: HXLINE(  39)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_LOGGED_MESSAGES = (int)37189;\n   53: HXLINE(  38)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->MAX_DEBUG_LOGGED_MESSAGES = (int)37188;\n   54: HXLINE(  37)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->MAX_DEBUG_MESSAGE_LENGTH = (int)37187;\n   55: HXLINE(  36)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->MAX_LABEL_LENGTH = (int)33512;\n   56: HXLINE(  35)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->SAMPLER = (int)33510;\n   57: HXLINE(  34)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->QUERY = (int)33507;\n   58: HXLINE(  33)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->PROGRAM = (int)33506;\n   59: HXLINE(  32)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->SHADER = (int)33505;\n   60: HXLINE(  31)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->BUFFER = (int)33504;\n   61: HXLINE(  30)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_GROUP_STACK_DEPTH = (int)33389;\n   62: HXLINE(  29)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->MAX_DEBUG_GROUP_STACK_DEPTH = (int)33388;\n   63: HXLINE(  28)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_SEVERITY_NOTIFICATION = (int)33387;\n   64: HXLINE(  27)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_TYPE_POP_GROUP = (int)33386;\n   65: HXLINE(  26)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_TYPE_PUSH_GROUP = (int)33385;\n   66: HXLINE(  25)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_TYPE_MARKER = (int)33384;\n   67: HXLINE(  24)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_TYPE_OTHER = (int)33361;\n   68: HXLINE(  23)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_TYPE_PERFORMANCE = (int)33360;\n   69: HXLINE(  22)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_TYPE_PORTABILITY = (int)33359;\n   70: HXLINE(  21)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_TYPE_UNDEFINED_BEHAVIOR = (int)33358;\n   71: HXLINE(  20)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_TYPE_DEPRECATED_BEHAVIOR = (int)33357;\n   72: HXLINE(  19)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_TYPE_ERROR = (int)33356;\n   73: HXLINE(  18)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_SOURCE_OTHER = (int)33355;\n   74: HXLINE(  17)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_SOURCE_APPLICATION = (int)33354;\n   75: HXLINE(  16)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_SOURCE_THIRD_PARTY = (int)33353;\n   76: HXLINE(  15)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_SOURCE_SHADER_COMPILER = (int)33352;\n   77: HXLINE(  14)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_SOURCE_WINDOW_SYSTEM = (int)33351;\n   78: HXLINE(  13)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_SOURCE_API = (int)33350;\n   79: HXLINE(  12)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_CALLBACK_USER_PARAM = (int)33349;\n   80: HXLINE(  11)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_CALLBACK_FUNCTION = (int)33348;\n   81: HXLINE(  10)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = (int)33347;\n   82: HXLINE(   9)\t\t( ( ::lime::graphics::opengl::ext::KHR_debug)(__this) )->DEBUG_OUTPUT_SYNCHRONOUS = (int)33346;\n   83              \t}\n   84  \t\t\n   ..\n   89  \t\tstatic Dynamic __CreateEmpty();\n   90  \t\tstatic Dynamic __Create(hx::DynamicArray inArgs);\n   91: \t\t//~KHR_debug_obj();\n   92  \n   93  \t\tHX_DO_RTTI_ALL;\n   ..\n   97  \t\tstatic void __register();\n   98  \t\tbool _hx_isInstanceOf(int inClassId);\n   99: \t\t::String __ToString() const { return HX_HCSTRING(\"KHR_debug\",\"\\x69\",\"\\x7f\",\"\\xd0\",\"\\x07\"); }\n  100  \n  101: \t\tint DEBUG_OUTPUT_SYNCHRONOUS;\n  102: \t\tint DEBUG_NEXT_LOGGED_MESSAGE_LENGTH;\n  103: \t\tint DEBUG_CALLBACK_FUNCTION;\n  104: \t\tint DEBUG_CALLBACK_USER_PARAM;\n  105: \t\tint DEBUG_SOURCE_API;\n  106: \t\tint DEBUG_SOURCE_WINDOW_SYSTEM;\n  107: \t\tint DEBUG_SOURCE_SHADER_COMPILER;\n  108: \t\tint DEBUG_SOURCE_THIRD_PARTY;\n  109: \t\tint DEBUG_SOURCE_APPLICATION;\n  110: \t\tint DEBUG_SOURCE_OTHER;\n  111: \t\tint DEBUG_TYPE_ERROR;\n  112: \t\tint DEBUG_TYPE_DEPRECATED_BEHAVIOR;\n  113: \t\tint DEBUG_TYPE_UNDEFINED_BEHAVIOR;\n  114: \t\tint DEBUG_TYPE_PORTABILITY;\n  115: \t\tint DEBUG_TYPE_PERFORMANCE;\n  116: \t\tint DEBUG_TYPE_OTHER;\n  117: \t\tint DEBUG_TYPE_MARKER;\n  118: \t\tint DEBUG_TYPE_PUSH_GROUP;\n  119: \t\tint DEBUG_TYPE_POP_GROUP;\n  120: \t\tint DEBUG_SEVERITY_NOTIFICATION;\n  121: \t\tint MAX_DEBUG_GROUP_STACK_DEPTH;\n  122: \t\tint DEBUG_GROUP_STACK_DEPTH;\n  123  \t\tint BUFFER;\n  124  \t\tint SHADER;\n  ...\n  127  \t\tint SAMPLER;\n  128  \t\tint MAX_LABEL_LENGTH;\n  129: \t\tint MAX_DEBUG_MESSAGE_LENGTH;\n  130: \t\tint MAX_DEBUG_LOGGED_MESSAGES;\n  131: \t\tint DEBUG_LOGGED_MESSAGES;\n  132: \t\tint DEBUG_SEVERITY_HIGH;\n  133: \t\tint DEBUG_SEVERITY_MEDIUM;\n  134: \t\tint DEBUG_SEVERITY_LOW;\n  135: \t\tint DEBUG_OUTPUT;\n  136: \t\tint CONTEXT_FLAG_DEBUG_BIT;\n  137  \t\tint STACK_OVERFLOW;\n  138  \t\tint STACK_UNDERFLOW;\n  ...\n  144  } // end namespace ext\n  145  \n  146: #endif /* INCLUDED_lime_graphics_opengl_ext_KHR_debug */ \n  147  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/lime/utils/Log.h:\n   59  \t\tstatic int level;\n   60  \t\tstatic bool throwErrors;\n   61: \t\tstatic void debug(::String message, ::Dynamic info);\n   62: \t\tstatic ::Dynamic debug_dyn();\n   63  \n   64  \t\tstatic void error(::String message, ::Dynamic info);\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/lime/utils/_Log/LogLevel_Impl_.h:\n   58  \t\tstatic int WARN;\n   59  \t\tstatic int INFO;\n   60: \t\tstatic int DEBUG;\n   61  \t\tstatic int VERBOSE;\n   62  \t\tstatic bool gt(int a,int b);\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/mphx/utils/Log.h:\n   54  \n   55  \t\tstatic void __boot();\n   56: \t\tstatic int debugLevel;\n   57  \t\tstatic bool usePrintLn;\n   58  \t\tstatic bool printLevel;\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/mphx/utils/_Log/DebugLevel_Impl_.h:\n    1  // Generated by Haxe 3.4.7\n    2: #ifndef INCLUDED_mphx_utils__Log_DebugLevel_Impl_\n    3: #define INCLUDED_mphx_utils__Log_DebugLevel_Impl_\n    4  \n    5  #ifndef HXCPP_H\n    .\n    7  #endif\n    8  \n    9: HX_DECLARE_CLASS3(mphx,utils,_Log,DebugLevel_Impl_)\n   10  \n   11  namespace mphx{\n   ..\n   14  \n   15  \n   16: class HXCPP_CLASS_ATTRIBUTES DebugLevel_Impl__obj : public hx::Object\n   17  {\n   18  \tpublic:\n   19  \t\ttypedef hx::Object super;\n   20: \t\ttypedef DebugLevel_Impl__obj OBJ_;\n   21: \t\tDebugLevel_Impl__obj();\n   22  \n   23  \tpublic:\n   ..\n   25  \n   26  \t\tvoid __construct();\n   27: \t\tinline void *operator new(size_t inSize, bool inContainer=false,const char *inName=\"mphx.utils._Log.DebugLevel_Impl_\")\n   28  \t\t\t{ return hx::Object::operator new(inSize,inContainer,inName); }\n   29  \t\tinline void *operator new(size_t inSize, int extra)\n   30: \t\t\t{ return hx::Object::operator new(inSize+extra,false,\"mphx.utils._Log.DebugLevel_Impl_\"); }\n   31  \n   32: \t\thx::ObjectPtr< DebugLevel_Impl__obj > __new() {\n   33: \t\t\thx::ObjectPtr< DebugLevel_Impl__obj > __this = new DebugLevel_Impl__obj();\n   34  \t\t\t__this->__construct();\n   35  \t\t\treturn __this;\n   36  \t\t}\n   37  \n   38: \t\tstatic hx::ObjectPtr< DebugLevel_Impl__obj > __alloc(hx::Ctx *_hx_ctx) {\n   39: \t\t\tDebugLevel_Impl__obj *__this = (DebugLevel_Impl__obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DebugLevel_Impl__obj), false, \"mphx.utils._Log.DebugLevel_Impl_\"));\n   40: \t\t\t*(void **)__this = DebugLevel_Impl__obj::_hx_vtable;\n   41  \t\t\treturn __this;\n   42  \t\t}\n   ..\n   45  \t\tstatic Dynamic __CreateEmpty();\n   46  \t\tstatic Dynamic __Create(hx::DynamicArray inArgs);\n   47: \t\t//~DebugLevel_Impl__obj();\n   48  \n   49  \t\tHX_DO_RTTI_ALL;\n   ..\n   51  \t\tstatic void __register();\n   52  \t\tbool _hx_isInstanceOf(int inClassId);\n   53: \t\t::String __ToString() const { return HX_HCSTRING(\"DebugLevel_Impl_\",\"\\xb1\",\"\\x39\",\"\\x97\",\"\\x4e\"); }\n   54  \n   55  \t\tstatic void __boot();\n   ..\n   68  } // end namespace _Log\n   69  \n   70: #endif /* INCLUDED_mphx_utils__Log_DebugLevel_Impl_ */ \n   71  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/include/openfl/_internal/stage3D/GLUtils.h:\n   55  \n   56  \t\tstatic void __boot();\n   57: \t\tstatic bool debug;\n   58  \t\tstatic void CheckGLError();\n   59  \t\tstatic ::Dynamic CheckGLError_dyn();\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/obj/linux64/all_objs:\n  281  \"obj/linux64/cea7cec0_ClientEventManager.o\"\n  282  \"obj/linux64/6ecb2fd6_Log.o\"\n  283: \"obj/linux64/af5babcb_DebugLevel_Impl_.o\"\n  284  \"obj/linux64/6ecb2fd6_ServerError.o\"\n  285  \"obj/linux64/6ecb2fd6_ClientError.o\"\n  ...\n  457  \"obj/linux64/49d10c9b_NV_coverage_sample.o\"\n  458  \"obj/linux64/49d10c9b_KHR_texture_compression_astc_ldr.o\"\n  459: \"obj/linux64/49d10c9b_KHR_debug.o\"\n  460  \"obj/linux64/49d10c9b_IMG_texture_compression_pvrtc.o\"\n  461  \"obj/linux64/49d10c9b_IMG_shader_binary.o\"\n  ...\n  486  \"obj/linux64/49d10c9b_EXT_map_buffer_range.o\"\n  487  \"obj/linux64/49d10c9b_EXT_discard_framebuffer.o\"\n  488: \"obj/linux64/49d10c9b_EXT_debug_marker.o\"\n  489: \"obj/linux64/49d10c9b_EXT_debug_label.o\"\n  490  \"obj/linux64/49d10c9b_EXT_color_buffer_half_float.o\"\n  491  \"obj/linux64/49d10c9b_EXT_color_buffer_float.o\"\n  ...\n  776  \"obj/linux64/cad8af8f_TooltipOverlay.o\"\n  777  \"obj/linux64/cad8af8f_Tooltip.o\"\n  778: \"obj/linux64/cad8af8f_FlxDebuggerLayout.o\"\n  779: \"obj/linux64/cad8af8f_FlxDebugger.o\"\n  780  \"obj/linux64/cad8af8f_GraphicInteractive.o\"\n  781  \"obj/linux64/cad8af8f_GraphicCloseButton.o\"\n  ...\n  787  \"obj/linux64/cad8af8f_GraphicStats.o\"\n  788  \"obj/linux64/cad8af8f_GraphicLog.o\"\n  789: \"obj/linux64/3dcbe745_GraphicDrawDebug.o\"\n  790  \"obj/linux64/3dcbe745_GraphicFlixel.o\"\n  791: \"obj/linux64/cad8af8f_DebuggerUtil.o\"\n  792  \"obj/linux64/d739dbf7_FlxSplash.o\"\n  793  \"obj/linux64/d739dbf7_FlxSoundGroup.o\"\n  ...\n  993  \"obj/linux64/fad53dd3_LogFrontEnd.o\"\n  994  \"obj/linux64/fad53dd3_InputFrontEnd.o\"\n  995: \"obj/linux64/fad53dd3_DebuggerFrontEnd.o\"\n  996  \"obj/linux64/fad53dd3_ConsoleFrontEnd.o\"\n  997  \"obj/linux64/fad53dd3_CameraFrontEnd.o\"\n  ...\n 1190  \"obj/linux64/767bee8c_Object.o\"\n 1191  \"obj/linux64/767bee8c_StdLibs.o\"\n 1192: \"obj/linux64/767bee8c_Debug.o\"\n 1193  \"obj/linux64/767bee8c_Thread.o\"\n 1194  \"obj/linux64/31e88aa9_Array.o\"\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/obj/linux64/__pch/haxe/hxcpp.h.gch:\n    <binary>\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/obj/linux64/__pch/runtime/hxcpp.h.gch:\n    <binary>\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/__boot__.cpp:\n  131  #include <flixel/text/FlxTextBorderStyle.h>\n  132  #endif\n  133: #ifndef INCLUDED_flixel_system_debug_FlxDebuggerLayout\n  134: #include <flixel/system/debug/FlxDebuggerLayout.h>\n  135  #endif\n  136  #ifndef INCLUDED_flixel_input_gamepad_mappings_Manufacturer\n  ...\n  491  #include <mphx/utils/Log.h>\n  492  #endif\n  493: #ifndef INCLUDED_mphx_utils__Log_DebugLevel_Impl_\n  494: #include <mphx/utils/_Log/DebugLevel_Impl_.h>\n  495  #endif\n  496  #ifndef INCLUDED_lime_utils__UInt8ClampedArray_UInt8ClampedArray_Impl_\n  ...\n  683  #include <flixel/text/_FlxText/FlxTextAlign_Impl_.h>\n  684  #endif\n  685: #ifndef INCLUDED_flixel_system_debug_stats__Stats_GraphicMaximizeButton\n  686: #include <flixel/system/debug/stats/_Stats/GraphicMaximizeButton.h>\n  687  #endif\n  688: #ifndef INCLUDED_flixel_system_debug_stats__Stats_GraphicMinimizeButton\n  689: #include <flixel/system/debug/stats/_Stats/GraphicMinimizeButton.h>\n  690  #endif\n  691: #ifndef INCLUDED_flixel_system_debug_log_LogStyle\n  692: #include <flixel/system/debug/log/LogStyle.h>\n  693  #endif\n  694: #ifndef INCLUDED_flixel_system_debug_interaction_tools_GraphicCursorCross\n  695: #include <flixel/system/debug/interaction/tools/GraphicCursorCross.h>\n  696  #endif\n  697: #ifndef INCLUDED_flixel_system_debug_interaction_tools_GraphicMoverTool\n  698: #include <flixel/system/debug/interaction/tools/GraphicMoverTool.h>\n  699  #endif\n  700: #ifndef INCLUDED_flixel_system_debug_interaction_tools_GraphicEraserTool\n  701: #include <flixel/system/debug/interaction/tools/GraphicEraserTool.h>\n  702  #endif\n  703: #ifndef INCLUDED_flixel_system_debug_completion_CompletionListScrollBar\n  704: #include <flixel/system/debug/completion/CompletionListScrollBar.h>\n  705  #endif\n  706: #ifndef INCLUDED_flixel_system_debug_completion_CompletionListEntry\n  707: #include <flixel/system/debug/completion/CompletionListEntry.h>\n  708  #endif\n  709: #ifndef INCLUDED_flixel_system_debug_Window\n  710: #include <flixel/system/debug/Window.h>\n  711  #endif\n  712: #ifndef INCLUDED_flixel_system_debug__Window_GraphicWindowHandle\n  713: #include <flixel/system/debug/_Window/GraphicWindowHandle.h>\n  714  #endif\n  715: #ifndef INCLUDED_flixel_system_debug_TooltipOverlay\n  716: #include <flixel/system/debug/TooltipOverlay.h>\n  717  #endif\n  718: #ifndef INCLUDED_flixel_system_debug_Tooltip\n  719: #include <flixel/system/debug/Tooltip.h>\n  720  #endif\n  721: #ifndef INCLUDED_flixel_system_debug_GraphicInteractive\n  722: #include <flixel/system/debug/GraphicInteractive.h>\n  723  #endif\n  724: #ifndef INCLUDED_flixel_system_debug_GraphicCloseButton\n  725: #include <flixel/system/debug/GraphicCloseButton.h>\n  726  #endif\n  727: #ifndef INCLUDED_flixel_system_debug_GraphicArrowRight\n  728: #include <flixel/system/debug/GraphicArrowRight.h>\n  729  #endif\n  730: #ifndef INCLUDED_flixel_system_debug_GraphicArrowLeft\n  731: #include <flixel/system/debug/GraphicArrowLeft.h>\n  732  #endif\n  733: #ifndef INCLUDED_flixel_system_debug_GraphicConsole\n  734: #include <flixel/system/debug/GraphicConsole.h>\n  735  #endif\n  736: #ifndef INCLUDED_flixel_system_debug_GraphicBitmapLog\n  737: #include <flixel/system/debug/GraphicBitmapLog.h>\n  738  #endif\n  739: #ifndef INCLUDED_flixel_system_debug_GraphicWatch\n  740: #include <flixel/system/debug/GraphicWatch.h>\n  741  #endif\n  742: #ifndef INCLUDED_flixel_system_debug_GraphicStats\n  743: #include <flixel/system/debug/GraphicStats.h>\n  744  #endif\n  745: #ifndef INCLUDED_flixel_system_debug_GraphicLog\n  746: #include <flixel/system/debug/GraphicLog.h>\n  747  #endif\n  748: #ifndef INCLUDED_flixel_system_debug__FlxDebugger_GraphicDrawDebug\n  749: #include <flixel/system/debug/_FlxDebugger/GraphicDrawDebug.h>\n  750  #endif\n  751: #ifndef INCLUDED_flixel_system_debug__FlxDebugger_GraphicFlixel\n  752: #include <flixel/system/debug/_FlxDebugger/GraphicFlixel.h>\n  753  #endif\n  754  #ifndef INCLUDED_flixel_system_FlxQuadTree\n  ...\n 2021  #include <lime/graphics/opengl/ext/KHR_texture_compression_astc_ldr.h>\n 2022  #endif\n 2023: #ifndef INCLUDED_lime_graphics_opengl_ext_KHR_debug\n 2024: #include <lime/graphics/opengl/ext/KHR_debug.h>\n 2025  #endif\n 2026  #ifndef INCLUDED_lime_graphics_opengl_ext_IMG_texture_compression_pvrtc\n ....\n 2108  #include <lime/graphics/opengl/ext/EXT_discard_framebuffer.h>\n 2109  #endif\n 2110: #ifndef INCLUDED_lime_graphics_opengl_ext_EXT_debug_marker\n 2111: #include <lime/graphics/opengl/ext/EXT_debug_marker.h>\n 2112  #endif\n 2113: #ifndef INCLUDED_lime_graphics_opengl_ext_EXT_debug_label\n 2114: #include <lime/graphics/opengl/ext/EXT_debug_label.h>\n 2115  #endif\n 2116  #ifndef INCLUDED_lime_graphics_opengl_ext_EXT_color_buffer_half_float\n ....\n 2741  #include <flixel/system/frontEnds/PluginFrontEnd.h>\n 2742  #endif\n 2743: #ifndef INCLUDED_flixel_system_debug_watch_TrackerProfile\n 2744: #include <flixel/system/debug/watch/TrackerProfile.h>\n 2745  #endif\n 2746: #ifndef INCLUDED_flixel_system_debug_watch_Tracker\n 2747: #include <flixel/system/debug/watch/Tracker.h>\n 2748  #endif\n 2749: #ifndef INCLUDED_flixel_system_debug_watch_Watch\n 2750: #include <flixel/system/debug/watch/Watch.h>\n 2751  #endif\n 2752: #ifndef INCLUDED_flixel_system_debug_interaction_tools_Pointer\n 2753: #include <flixel/system/debug/interaction/tools/Pointer.h>\n 2754  #endif\n 2755: #ifndef INCLUDED_flixel_system_debug_interaction_tools_Mover\n 2756: #include <flixel/system/debug/interaction/tools/Mover.h>\n 2757  #endif\n 2758: #ifndef INCLUDED_flixel_system_debug_interaction_tools_Eraser\n 2759: #include <flixel/system/debug/interaction/tools/Eraser.h>\n 2760  #endif\n 2761: #ifndef INCLUDED_flixel_system_debug_interaction_tools_Tool\n 2762: #include <flixel/system/debug/interaction/tools/Tool.h>\n 2763  #endif\n 2764: #ifndef INCLUDED_flixel_system_debug_interaction_Interaction\n 2765: #include <flixel/system/debug/interaction/Interaction.h>\n 2766  #endif\n 2767: #ifndef INCLUDED_flixel_system_debug_console__ConsoleUtil_Interp\n 2768: #include <flixel/system/debug/console/_ConsoleUtil/Interp.h>\n 2769  #endif\n 2770  #ifndef INCLUDED_hscript_Interp\n 2771  #include <hscript/Interp.h>\n 2772  #endif\n 2773: #ifndef INCLUDED_flixel_system_debug_console_ConsoleUtil\n 2774: #include <flixel/system/debug/console/ConsoleUtil.h>\n 2775  #endif\n 2776: #ifndef INCLUDED_flixel_system_debug_completion_CompletionList\n 2777: #include <flixel/system/debug/completion/CompletionList.h>\n 2778  #endif\n 2779: #ifndef INCLUDED_flixel_system_debug_FlxDebugger\n 2780: #include <flixel/system/debug/FlxDebugger.h>\n 2781  #endif\n 2782: #ifndef INCLUDED_flixel_system_debug_DebuggerUtil\n 2783: #include <flixel/system/debug/DebuggerUtil.h>\n 2784  #endif\n 2785  #ifndef INCLUDED_flixel_system_FlxSplash\n ....\n 3155  #include <flixel/system/frontEnds/InputFrontEnd.h>\n 3156  #endif\n 3157: #ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd\n 3158: #include <flixel/system/frontEnds/DebuggerFrontEnd.h>\n 3159  #endif\n 3160  #ifndef INCLUDED_flixel_system_frontEnds_ConsoleFrontEnd\n ....\n 3382  ::flixel::tile::FlxTilemapAutoTiling_obj::__register();\n 3383  ::flixel::text::FlxTextBorderStyle_obj::__register();\n 3384: ::flixel::_hx_system::debug::FlxDebuggerLayout_obj::__register();\n 3385  ::flixel::input::gamepad::mappings::Manufacturer_obj::__register();\n 3386  ::flixel::input::gamepad::FlxAnalogToDigitalMode_obj::__register();\n ....\n 3502  ::openfl::Lib_obj::__register();\n 3503  ::mphx::utils::Log_obj::__register();\n 3504: ::mphx::utils::_Log::DebugLevel_Impl__obj::__register();\n 3505  ::lime::utils::_UInt8ClampedArray::UInt8ClampedArray_Impl__obj::__register();\n 3506  ::lime::utils::_UInt8Array::UInt8Array_Impl__obj::__register();\n ....\n 3566  ::flixel::tile::GraphicAuto_obj::__register();\n 3567  ::flixel::text::_FlxText::FlxTextAlign_Impl__obj::__register();\n 3568: ::flixel::_hx_system::debug::stats::_Stats::GraphicMaximizeButton_obj::__register();\n 3569: ::flixel::_hx_system::debug::stats::_Stats::GraphicMinimizeButton_obj::__register();\n 3570: ::flixel::_hx_system::debug::log::LogStyle_obj::__register();\n 3571: ::flixel::_hx_system::debug::interaction::tools::GraphicCursorCross_obj::__register();\n 3572: ::flixel::_hx_system::debug::interaction::tools::GraphicMoverTool_obj::__register();\n 3573: ::flixel::_hx_system::debug::interaction::tools::GraphicEraserTool_obj::__register();\n 3574: ::flixel::_hx_system::debug::completion::CompletionListScrollBar_obj::__register();\n 3575: ::flixel::_hx_system::debug::completion::CompletionListEntry_obj::__register();\n 3576: ::flixel::_hx_system::debug::Window_obj::__register();\n 3577: ::flixel::_hx_system::debug::_Window::GraphicWindowHandle_obj::__register();\n 3578: ::flixel::_hx_system::debug::TooltipOverlay_obj::__register();\n 3579: ::flixel::_hx_system::debug::Tooltip_obj::__register();\n 3580: ::flixel::_hx_system::debug::GraphicInteractive_obj::__register();\n 3581: ::flixel::_hx_system::debug::GraphicCloseButton_obj::__register();\n 3582: ::flixel::_hx_system::debug::GraphicArrowRight_obj::__register();\n 3583: ::flixel::_hx_system::debug::GraphicArrowLeft_obj::__register();\n 3584: ::flixel::_hx_system::debug::GraphicConsole_obj::__register();\n 3585: ::flixel::_hx_system::debug::GraphicBitmapLog_obj::__register();\n 3586: ::flixel::_hx_system::debug::GraphicWatch_obj::__register();\n 3587: ::flixel::_hx_system::debug::GraphicStats_obj::__register();\n 3588: ::flixel::_hx_system::debug::GraphicLog_obj::__register();\n 3589: ::flixel::_hx_system::debug::_FlxDebugger::GraphicDrawDebug_obj::__register();\n 3590: ::flixel::_hx_system::debug::_FlxDebugger::GraphicFlixel_obj::__register();\n 3591  ::flixel::_hx_system::FlxQuadTree_obj::__register();\n 3592  ::flixel::_hx_system::_FlxPreloader::GraphicLogoCorners_obj::__register();\n ....\n 4012  ::lime::graphics::opengl::ext::NV_coverage_sample_obj::__register();\n 4013  ::lime::graphics::opengl::ext::KHR_texture_compression_astc_ldr_obj::__register();\n 4014: ::lime::graphics::opengl::ext::KHR_debug_obj::__register();\n 4015  ::lime::graphics::opengl::ext::IMG_texture_compression_pvrtc_obj::__register();\n 4016  ::lime::graphics::opengl::ext::IMG_shader_binary_obj::__register();\n ....\n 4041  ::lime::graphics::opengl::ext::EXT_map_buffer_range_obj::__register();\n 4042  ::lime::graphics::opengl::ext::EXT_discard_framebuffer_obj::__register();\n 4043: ::lime::graphics::opengl::ext::EXT_debug_marker_obj::__register();\n 4044: ::lime::graphics::opengl::ext::EXT_debug_label_obj::__register();\n 4045  ::lime::graphics::opengl::ext::EXT_color_buffer_half_float_obj::__register();\n 4046  ::lime::graphics::opengl::ext::EXT_color_buffer_float_obj::__register();\n ....\n 4252  ::flixel::_hx_system::frontEnds::SoundFrontEnd_obj::__register();\n 4253  ::flixel::_hx_system::frontEnds::PluginFrontEnd_obj::__register();\n 4254: ::flixel::_hx_system::debug::watch::TrackerProfile_obj::__register();\n 4255: ::flixel::_hx_system::debug::watch::Tracker_obj::__register();\n 4256: ::flixel::_hx_system::debug::watch::Watch_obj::__register();\n 4257: ::flixel::_hx_system::debug::interaction::tools::Pointer_obj::__register();\n 4258: ::flixel::_hx_system::debug::interaction::tools::Mover_obj::__register();\n 4259: ::flixel::_hx_system::debug::interaction::tools::Eraser_obj::__register();\n 4260: ::flixel::_hx_system::debug::interaction::tools::Tool_obj::__register();\n 4261: ::flixel::_hx_system::debug::interaction::Interaction_obj::__register();\n 4262: ::flixel::_hx_system::debug::console::_ConsoleUtil::Interp_obj::__register();\n 4263  ::hscript::Interp_obj::__register();\n 4264: ::flixel::_hx_system::debug::console::ConsoleUtil_obj::__register();\n 4265: ::flixel::_hx_system::debug::completion::CompletionList_obj::__register();\n 4266: ::flixel::_hx_system::debug::FlxDebugger_obj::__register();\n 4267: ::flixel::_hx_system::debug::DebuggerUtil_obj::__register();\n 4268  ::flixel::_hx_system::FlxSplash_obj::__register();\n 4269  ::flixel::_hx_system::FlxSoundGroup_obj::__register();\n ....\n 4390  ::flixel::_hx_system::frontEnds::LogFrontEnd_obj::__register();\n 4391  ::flixel::_hx_system::frontEnds::InputFrontEnd_obj::__register();\n 4392: ::flixel::_hx_system::frontEnds::DebuggerFrontEnd_obj::__register();\n 4393  ::flixel::_hx_system::frontEnds::ConsoleFrontEnd_obj::__register();\n 4394  ::flixel::_hx_system::frontEnds::CameraFrontEnd_obj::__register();\n ....\n 4492  ::flixel::tile::FlxTilemapAutoTiling_obj::__boot();\n 4493  ::flixel::text::FlxTextBorderStyle_obj::__boot();\n 4494: ::flixel::_hx_system::debug::FlxDebuggerLayout_obj::__boot();\n 4495  ::flixel::input::gamepad::mappings::Manufacturer_obj::__boot();\n 4496  ::flixel::input::gamepad::FlxAnalogToDigitalMode_obj::__boot();\n ....\n 4636  ::flixel::_hx_system::_FlxPreloader::GraphicLogoCorners_obj::__boot();\n 4637  ::flixel::_hx_system::FlxQuadTree_obj::__boot();\n 4638: ::flixel::_hx_system::debug::_FlxDebugger::GraphicFlixel_obj::__boot();\n 4639: ::flixel::_hx_system::debug::_FlxDebugger::GraphicDrawDebug_obj::__boot();\n 4640: ::flixel::_hx_system::debug::GraphicLog_obj::__boot();\n 4641: ::flixel::_hx_system::debug::GraphicStats_obj::__boot();\n 4642: ::flixel::_hx_system::debug::GraphicWatch_obj::__boot();\n 4643: ::flixel::_hx_system::debug::GraphicBitmapLog_obj::__boot();\n 4644: ::flixel::_hx_system::debug::GraphicConsole_obj::__boot();\n 4645: ::flixel::_hx_system::debug::GraphicArrowLeft_obj::__boot();\n 4646: ::flixel::_hx_system::debug::GraphicArrowRight_obj::__boot();\n 4647: ::flixel::_hx_system::debug::GraphicCloseButton_obj::__boot();\n 4648: ::flixel::_hx_system::debug::GraphicInteractive_obj::__boot();\n 4649: ::flixel::_hx_system::debug::Tooltip_obj::__boot();\n 4650: ::flixel::_hx_system::debug::TooltipOverlay_obj::__boot();\n 4651: ::flixel::_hx_system::debug::_Window::GraphicWindowHandle_obj::__boot();\n 4652: ::flixel::_hx_system::debug::Window_obj::__boot();\n 4653: ::flixel::_hx_system::debug::completion::CompletionListEntry_obj::__boot();\n 4654: ::flixel::_hx_system::debug::completion::CompletionListScrollBar_obj::__boot();\n 4655: ::flixel::_hx_system::debug::interaction::tools::GraphicEraserTool_obj::__boot();\n 4656: ::flixel::_hx_system::debug::interaction::tools::GraphicMoverTool_obj::__boot();\n 4657: ::flixel::_hx_system::debug::interaction::tools::GraphicCursorCross_obj::__boot();\n 4658: ::flixel::_hx_system::debug::log::LogStyle_obj::__boot();\n 4659: ::flixel::_hx_system::debug::stats::_Stats::GraphicMinimizeButton_obj::__boot();\n 4660: ::flixel::_hx_system::debug::stats::_Stats::GraphicMaximizeButton_obj::__boot();\n 4661  ::flixel::text::_FlxText::FlxTextAlign_Impl__obj::__boot();\n 4662  ::flixel::tile::GraphicAuto_obj::__boot();\n ....\n 4722  ::lime::utils::_UInt8Array::UInt8Array_Impl__obj::__boot();\n 4723  ::lime::utils::_UInt8ClampedArray::UInt8ClampedArray_Impl__obj::__boot();\n 4724: ::mphx::utils::_Log::DebugLevel_Impl__obj::__boot();\n 4725  ::mphx::utils::Log_obj::__boot();\n 4726  ::openfl::Lib_obj::__boot();\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/__files__.cpp:\n    4  namespace hx {\n    5  const char *__hxcpp_all_files[] = {\n    6: #ifdef HXCPP_DEBUGGER\n    7  \"/usr/share/haxe/std/IntIterator.hx\",\n    8  \"/usr/share/haxe/std/Lambda.hx\",\n    .\n  208  \"flixel/system/FlxSplash.hx\",\n  209  \"flixel/system/FlxVersion.hx\",\n  210: \"flixel/system/debug/DebuggerUtil.hx\",\n  211: \"flixel/system/debug/FlxDebugger.hx\",\n  212: \"flixel/system/debug/Tooltip.hx\",\n  213: \"flixel/system/debug/Window.hx\",\n  214: \"flixel/system/debug/completion/CompletionList.hx\",\n  215: \"flixel/system/debug/completion/CompletionListEntry.hx\",\n  216: \"flixel/system/debug/completion/CompletionListScrollBar.hx\",\n  217: \"flixel/system/debug/console/ConsoleUtil.hx\",\n  218: \"flixel/system/debug/interaction/Interaction.hx\",\n  219: \"flixel/system/debug/interaction/tools/Eraser.hx\",\n  220: \"flixel/system/debug/interaction/tools/Mover.hx\",\n  221: \"flixel/system/debug/interaction/tools/Pointer.hx\",\n  222: \"flixel/system/debug/interaction/tools/Tool.hx\",\n  223: \"flixel/system/debug/log/LogStyle.hx\",\n  224: \"flixel/system/debug/watch/Tracker.hx\",\n  225: \"flixel/system/debug/watch/Watch.hx\",\n  226  \"flixel/system/frontEnds/BitmapFrontEnd.hx\",\n  227  \"flixel/system/frontEnds/BitmapLogFrontEnd.hx\",\n  228  \"flixel/system/frontEnds/CameraFrontEnd.hx\",\n  229  \"flixel/system/frontEnds/ConsoleFrontEnd.hx\",\n  230: \"flixel/system/frontEnds/DebuggerFrontEnd.hx\",\n  231  \"flixel/system/frontEnds/InputFrontEnd.hx\",\n  232  \"flixel/system/frontEnds/LogFrontEnd.hx\",\n  ...\n  373  \"lime/graphics/opengl/ext/EXT_color_buffer_float.hx\",\n  374  \"lime/graphics/opengl/ext/EXT_color_buffer_half_float.hx\",\n  375: \"lime/graphics/opengl/ext/EXT_debug_label.hx\",\n  376: \"lime/graphics/opengl/ext/EXT_debug_marker.hx\",\n  377  \"lime/graphics/opengl/ext/EXT_discard_framebuffer.hx\",\n  378  \"lime/graphics/opengl/ext/EXT_map_buffer_range.hx\",\n  ...\n  403  \"lime/graphics/opengl/ext/IMG_shader_binary.hx\",\n  404  \"lime/graphics/opengl/ext/IMG_texture_compression_pvrtc.hx\",\n  405: \"lime/graphics/opengl/ext/KHR_debug.hx\",\n  406  \"lime/graphics/opengl/ext/KHR_texture_compression_astc_ldr.hx\",\n  407  \"lime/graphics/opengl/ext/NV_coverage_sample.hx\",\n  ...\n  778  \n  779  const char *__hxcpp_all_files_fullpath[] = {\n  780: #ifdef HXCPP_DEBUGGER\n  781  \"/usr/share/haxe/std/IntIterator.hx\",\n  782  \"/usr/share/haxe/std/Lambda.hx\",\n  ...\n  982  \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/FlxSplash.hx\",\n  983  \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/FlxVersion.hx\",\n  984: \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/DebuggerUtil.hx\",\n  985: \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/FlxDebugger.hx\",\n  986: \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/Tooltip.hx\",\n  987: \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/Window.hx\",\n  988: \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/completion/CompletionList.hx\",\n  989: \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/completion/CompletionListEntry.hx\",\n  990: \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/completion/CompletionListScrollBar.hx\",\n  991: \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/console/ConsoleUtil.hx\",\n  992: \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/interaction/Interaction.hx\",\n  993: \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/interaction/tools/Eraser.hx\",\n  994: \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/interaction/tools/Mover.hx\",\n  995: \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/interaction/tools/Pointer.hx\",\n  996: \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/interaction/tools/Tool.hx\",\n  997: \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/log/LogStyle.hx\",\n  998: \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/watch/Tracker.hx\",\n  999: \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/watch/Watch.hx\",\n 1000  \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/frontEnds/BitmapFrontEnd.hx\",\n 1001  \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/frontEnds/BitmapLogFrontEnd.hx\",\n 1002  \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/frontEnds/CameraFrontEnd.hx\",\n 1003  \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/frontEnds/ConsoleFrontEnd.hx\",\n 1004: \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/frontEnds/DebuggerFrontEnd.hx\",\n 1005  \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/frontEnds/InputFrontEnd.hx\",\n 1006  \"/home/e1sif/haxelib/flixel/4,4,2/flixel/system/frontEnds/LogFrontEnd.hx\",\n ....\n 1147  \"/home/e1sif/haxelib/lime/6,4,0/lime/graphics/opengl/ext/EXT_color_buffer_float.hx\",\n 1148  \"/home/e1sif/haxelib/lime/6,4,0/lime/graphics/opengl/ext/EXT_color_buffer_half_float.hx\",\n 1149: \"/home/e1sif/haxelib/lime/6,4,0/lime/graphics/opengl/ext/EXT_debug_label.hx\",\n 1150: \"/home/e1sif/haxelib/lime/6,4,0/lime/graphics/opengl/ext/EXT_debug_marker.hx\",\n 1151  \"/home/e1sif/haxelib/lime/6,4,0/lime/graphics/opengl/ext/EXT_discard_framebuffer.hx\",\n 1152  \"/home/e1sif/haxelib/lime/6,4,0/lime/graphics/opengl/ext/EXT_map_buffer_range.hx\",\n ....\n 1177  \"/home/e1sif/haxelib/lime/6,4,0/lime/graphics/opengl/ext/IMG_shader_binary.hx\",\n 1178  \"/home/e1sif/haxelib/lime/6,4,0/lime/graphics/opengl/ext/IMG_texture_compression_pvrtc.hx\",\n 1179: \"/home/e1sif/haxelib/lime/6,4,0/lime/graphics/opengl/ext/KHR_debug.hx\",\n 1180  \"/home/e1sif/haxelib/lime/6,4,0/lime/graphics/opengl/ext/KHR_texture_compression_astc_ldr.hx\",\n 1181  \"/home/e1sif/haxelib/lime/6,4,0/lime/graphics/opengl/ext/NV_coverage_sample.hx\",\n ....\n 1552  \n 1553  const char *__hxcpp_all_classes[] = {\n 1554: #ifdef HXCPP_DEBUGGER\n 1555  \"lime.app.Module\",\n 1556  \"cpp.Prime\",\n ....\n 1656  \"flixel.system.frontEnds.CameraFrontEnd\",\n 1657  \"flixel.system.frontEnds.ConsoleFrontEnd\",\n 1658: \"flixel.system.frontEnds.DebuggerFrontEnd\",\n 1659  \"flixel.system.frontEnds.InputFrontEnd\",\n 1660  \"flixel.system.frontEnds.LogFrontEnd\",\n ....\n 1832  \"flixel.system.FlxSoundGroup\",\n 1833  \"flixel.system.FlxSplash\",\n 1834: \"flixel.system.debug.DebuggerUtil\",\n 1835: \"flixel.system.debug._FlxDebugger.GraphicFlixel\",\n 1836: \"flixel.system.debug._FlxDebugger.GraphicDrawDebug\",\n 1837: \"flixel.system.debug.GraphicLog\",\n 1838: \"flixel.system.debug.GraphicStats\",\n 1839: \"flixel.system.debug.GraphicWatch\",\n 1840: \"flixel.system.debug.GraphicBitmapLog\",\n 1841: \"flixel.system.debug.GraphicConsole\",\n 1842: \"flixel.system.debug.GraphicArrowLeft\",\n 1843: \"flixel.system.debug.GraphicArrowRight\",\n 1844: \"flixel.system.debug.GraphicCloseButton\",\n 1845: \"flixel.system.debug.GraphicInteractive\",\n 1846: \"flixel.system.debug.FlxDebugger\",\n 1847: \"flixel.system.debug.Tooltip\",\n 1848: \"flixel.system.debug.TooltipOverlay\",\n 1849: \"flixel.system.debug._Window.GraphicWindowHandle\",\n 1850: \"flixel.system.debug.Window\",\n 1851: \"flixel.system.debug.completion.CompletionList\",\n 1852: \"flixel.system.debug.completion.CompletionListEntry\",\n 1853: \"flixel.system.debug.completion.CompletionListScrollBar\",\n 1854: \"flixel.system.debug.console.ConsoleUtil\",\n 1855  \"hscript.Interp\",\n 1856: \"flixel.system.debug.console._ConsoleUtil.Interp\",\n 1857: \"flixel.system.debug.interaction.Interaction\",\n 1858: \"flixel.system.debug.interaction.tools.GraphicEraserTool\",\n 1859: \"flixel.system.debug.interaction.tools.Tool\",\n 1860: \"flixel.system.debug.interaction.tools.Eraser\",\n 1861: \"flixel.system.debug.interaction.tools.GraphicMoverTool\",\n 1862: \"flixel.system.debug.interaction.tools.Mover\",\n 1863: \"flixel.system.debug.interaction.tools.GraphicCursorCross\",\n 1864: \"flixel.system.debug.interaction.tools.Pointer\",\n 1865: \"flixel.system.debug.log.LogStyle\",\n 1866: \"flixel.system.debug.stats._Stats.GraphicMinimizeButton\",\n 1867: \"flixel.system.debug.stats._Stats.GraphicMaximizeButton\",\n 1868: \"flixel.system.debug.watch.Watch\",\n 1869: \"flixel.system.debug.watch.Tracker\",\n 1870: \"flixel.system.debug.watch.TrackerProfile\",\n 1871  \"flixel.system.frontEnds.PluginFrontEnd\",\n 1872  \"flixel.system.frontEnds.SoundFrontEnd\",\n ....\n 2103  \"lime.graphics.opengl.ext.EXT_color_buffer_float\",\n 2104  \"lime.graphics.opengl.ext.EXT_color_buffer_half_float\",\n 2105: \"lime.graphics.opengl.ext.EXT_debug_label\",\n 2106: \"lime.graphics.opengl.ext.EXT_debug_marker\",\n 2107  \"lime.graphics.opengl.ext.EXT_discard_framebuffer\",\n 2108  \"lime.graphics.opengl.ext.EXT_map_buffer_range\",\n ....\n 2133  \"lime.graphics.opengl.ext.IMG_shader_binary\",\n 2134  \"lime.graphics.opengl.ext.IMG_texture_compression_pvrtc\",\n 2135: \"lime.graphics.opengl.ext.KHR_debug\",\n 2136  \"lime.graphics.opengl.ext.KHR_texture_compression_astc_ldr\",\n 2137  \"lime.graphics.opengl.ext.NV_coverage_sample\",\n ....\n 2298  \"mphx.connection.NetSock\",\n 2299  \"mphx.serialization.impl.HaxeSerializer\",\n 2300: \"mphx.utils._Log.DebugLevel_Impl_\",\n 2301  \"mphx.utils.Log\",\n 2302  \"mphx.utils.event.impl.ClientEventManager\",\n ....\n 2568   0 };\n 2569  } // namespace hx\n 2570: void __files__boot() { __hxcpp_set_debugger_info(hx::__hxcpp_all_classes, hx::__hxcpp_all_files_fullpath); }\n 2571  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/__resources__.cpp:\n   77  \t{ HX_HCSTRING(\"__ASSET__:image___ASSET__flixel_flixel_ui_img_swatch_png\",\"\\xcb\",\"\\x3b\",\"\\x87\",\"\\x68\"),185,hx::__res_4 + 4 },\n   78  \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_tile_GraphicAuto\",\"\\x23\",\"\\xe3\",\"\\xb5\",\"\\xf1\"),3677,hx::__res_5 + 4 },\n   79: \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_system_debug__FlxDebugger_GraphicFlixel\",\"\\xd8\",\"\\xaf\",\"\\xbc\",\"\\x0c\"),3105,hx::__res_6 + 4 },\n   80  \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_addons_transition_GraphicTransTileCircle\",\"\\x79\",\"\\x9b\",\"\\x85\",\"\\x6a\"),16201,hx::__res_7 + 4 },\n   81  \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_system__FlxPreloader_GraphicLogoCorners\",\"\\xda\",\"\\x69\",\"\\x74\",\"\\xee\"),1515,hx::__res_8 + 4 },\n   ..\n   84  \t{ HX_HCSTRING(\"__ASSET__:image___ASSET__flixel_images_logo_default_png\",\"\\x5d\",\"\\xc4\",\"\\x77\",\"\\x3f\"),3280,hx::__res_11 + 4 },\n   85  \t{ HX_HCSTRING(\"__ASSET__:image___ASSET__flixel_flixel_ui_img_button_arrow_up_png\",\"\\x63\",\"\\x22\",\"\\x63\",\"\\xa8\"),493,hx::__res_12 + 4 },\n   86: \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_system_debug__Window_GraphicWindowHandle\",\"\\xb1\",\"\\x52\",\"\\xa1\",\"\\x65\"),174,hx::__res_13 + 4 },\n   87  \t{ HX_HCSTRING(\"__ASSET__:image___ASSET__flixel_flixel_ui_img_button_arrow_down_png\",\"\\x6a\",\"\\x37\",\"\\x2c\",\"\\x53\"),446,hx::__res_14 + 4 },\n   88  \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_system_GraphicVirtualInput\",\"\\x34\",\"\\xa9\",\"\\x10\",\"\\xf7\"),36963,hx::__res_15 + 4 },\n   89: \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_system_debug_interaction_tools_GraphicMoverTool\",\"\\x81\",\"\\xa4\",\"\\xf3\",\"\\x1e\"),47775,hx::__res_16 + 4 },\n   90: \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_system_debug_GraphicInteractive\",\"\\x39\",\"\\x22\",\"\\x20\",\"\\x19\"),246,hx::__res_17 + 4 },\n   91  \t{ HX_HCSTRING(\"__ASSET__:image___ASSET__flixel_flixel_ui_img_minus_mark_png\",\"\\xcb\",\"\\x22\",\"\\xec\",\"\\x26\"),136,hx::__res_18 + 4 },\n   92  \t{ HX_HCSTRING(\"__ASSET__:image___ASSET__flixel_flixel_ui_img_tab_back_png\",\"\\x20\",\"\\xf0\",\"\\x05\",\"\\xf9\"),210,hx::__res_19 + 4 },\n   93  \t{ HX_HCSTRING(\"__ASSET__:image___ASSET__flixel_flixel_ui_img_tooltip_arrow_png\",\"\\xf2\",\"\\x65\",\"\\xb0\",\"\\x31\"),18509,hx::__res_20 + 4 },\n   94: \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_system_debug_GraphicArrowRight\",\"\\xdc\",\"\\x1c\",\"\\xad\",\"\\x91\"),156,hx::__res_21 + 4 },\n   95  \t{ HX_HCSTRING(\"__ASSET__:image___ASSET__flixel_flixel_ui_img_tab_png\",\"\\x3a\",\"\\xba\",\"\\x84\",\"\\x7e\"),201,hx::__res_22 + 4 },\n   96  \t{ HX_HCSTRING(\"__ASSET__:file___ASSET__flixel_flixel_ui_xml_default_loading_screen_xml\",\"\\x61\",\"\\x22\",\"\\xd8\",\"\\xfd\"),1953,hx::__res_23 + 4 },\n   97: \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_system_debug__FlxDebugger_GraphicDrawDebug\",\"\\xb3\",\"\\xaf\",\"\\x96\",\"\\xc5\"),173,hx::__res_24 + 4 },\n   98: \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_system_debug_interaction_tools_GraphicEraserTool\",\"\\xfc\",\"\\xe0\",\"\\x4e\",\"\\x03\"),48233,hx::__res_25 + 4 },\n   99: \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_system_debug_GraphicConsole\",\"\\x2e\",\"\\x18\",\"\\xf0\",\"\\xf3\"),206,hx::__res_26 + 4 },\n  100  \t{ HX_HCSTRING(\"__ASSET__:image___ASSET__flixel_flixel_ui_img_chrome_inset_png\",\"\\xa7\",\"\\xe3\",\"\\x97\",\"\\x7f\"),192,hx::__res_27 + 4 },\n  101  \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_input_mouse__FlxMouse_GraphicCursor\",\"\\xc5\",\"\\x22\",\"\\xe3\",\"\\x93\"),706,hx::__res_28 + 4 },\n  102  \t{ HX_HCSTRING(\"__ASSET__:file___ASSET__flixel_flixel_ui_xml_defaults_xml\",\"\\x66\",\"\\x61\",\"\\x52\",\"\\x48\"),1263,hx::__res_29 + 4 },\n  103: \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_system_debug_GraphicBitmapLog\",\"\\x6c\",\"\\xac\",\"\\x7b\",\"\\x3e\"),180,hx::__res_30 + 4 },\n  104: \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_system_debug_GraphicCloseButton\",\"\\x21\",\"\\x6c\",\"\\xf7\",\"\\x70\"),258,hx::__res_31 + 4 },\n  105  \t{ HX_HCSTRING(\"__ASSET__:file___ASSET__flixel_sounds_beep_ogg\",\"\\x6d\",\"\\x0a\",\"\\x6e\",\"\\x70\"),5794,hx::__res_32 + 4 },\n  106  \t{ HX_HCSTRING(\"__ASSET__:image___ASSET__flixel_flixel_ui_img_button_arrow_left_png\",\"\\x8f\",\"\\x7d\",\"\\x3f\",\"\\x25\"),459,hx::__res_33 + 4 },\n  ...\n  114  \t{ HX_HCSTRING(\"__ASSET__:image___ASSET__flixel_flixel_ui_img_button_toggle_png\",\"\\x26\",\"\\xef\",\"\\xa6\",\"\\x83\"),534,hx::__res_41 + 4 },\n  115  \t{ HX_HCSTRING(\"__ASSET__:image___ASSET__flixel_flixel_ui_img_invis_png\",\"\\xc0\",\"\\x26\",\"\\x93\",\"\\x7b\"),128,hx::__res_42 + 4 },\n  116: \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_system_debug_GraphicLog\",\"\\xdb\",\"\\x89\",\"\\x51\",\"\\x9b\"),158,hx::__res_43 + 4 },\n  117  \t{ HX_HCSTRING(\"__ASSET__:file___ASSET__flixel_flixel_ui_xml_default_popup_xml\",\"\\x4a\",\"\\xb4\",\"\\x43\",\"\\x80\"),1848,hx::__res_44 + 4 },\n  118: \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_system_debug_GraphicArrowLeft\",\"\\x07\",\"\\x17\",\"\\xf4\",\"\\x7a\"),179,hx::__res_45 + 4 },\n  119: \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_system_debug_interaction_tools_GraphicCursorCross\",\"\\x12\",\"\\xf7\",\"\\xe2\",\"\\xfa\"),214,hx::__res_46 + 4 },\n  120: \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_system_debug_GraphicWatch\",\"\\x66\",\"\\x8f\",\"\\x5d\",\"\\x86\"),342,hx::__res_47 + 4 },\n  121  \t{ HX_HCSTRING(\"__ASSET__:image___ASSET__flixel_flixel_ui_img_button_thin_png\",\"\\x6b\",\"\\x32\",\"\\x6e\",\"\\x23\"),247,hx::__res_48 + 4 },\n  122  \t{ HX_HCSTRING(\"__ASSET__:file___ASSET__flixel_sounds_flixel_ogg\",\"\\x9b\",\"\\xa0\",\"\\xbd\",\"\\x8d\"),33629,hx::__res_49 + 4 },\n  123  \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_system__FlxPreloader_GraphicLogoLight\",\"\\xb2\",\"\\xb0\",\"\\xe9\",\"\\xd2\"),1804,hx::__res_50 + 4 },\n  124: \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_system_debug_stats__Stats_GraphicMinimizeButton\",\"\\x38\",\"\\x20\",\"\\x46\",\"\\x56\"),178,hx::__res_51 + 4 },\n  125  \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_addons_transition_GraphicTransTileSquare\",\"\\x06\",\"\\x2a\",\"\\x6a\",\"\\x6d\"),15583,hx::__res_52 + 4 },\n  126  \t{ HX_HCSTRING(\"__ASSET__:image___ASSET__flixel_flixel_ui_img_hilight_png\",\"\\x9a\",\"\\x7b\",\"\\xe5\",\"\\x4d\"),129,hx::__res_53 + 4 },\n  127  \t{ HX_HCSTRING(\"__ASSET__:image___ASSET__flixel_flixel_ui_img_finger_big_png\",\"\\x39\",\"\\xe2\",\"\\xdf\",\"\\x0d\"),1724,hx::__res_54 + 4 },\n  128  \t{ HX_HCSTRING(\"__ASSET__:image___ASSET__flixel_flixel_ui_img_radio_dot_png\",\"\\x2a\",\"\\x28\",\"\\x60\",\"\\xf8\"),153,hx::__res_55 + 4 },\n  129: \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_system_debug_GraphicStats\",\"\\x36\",\"\\xef\",\"\\x43\",\"\\x45\"),171,hx::__res_56 + 4 },\n  130  \t{ HX_HCSTRING(\"__ASSET__:image___ASSET__flixel_flixel_ui_img_chrome_png\",\"\\x49\",\"\\xb7\",\"\\x86\",\"\\x49\"),253,hx::__res_57 + 4 },\n  131  \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_tile_GraphicAutoAlt\",\"\\xc6\",\"\\x25\",\"\\x2e\",\"\\x70\"),3686,hx::__res_58 + 4 },\n  ...\n  135  \t{ HX_HCSTRING(\"__ASSET__:image___ASSET__flixel_flixel_ui_img_button_png\",\"\\xc1\",\"\\xbb\",\"\\x20\",\"\\x7d\"),433,hx::__res_62 + 4 },\n  136  \t{ HX_HCSTRING(\"__ASSET__:image___ASSET__flixel_flixel_ui_img_check_box_png\",\"\\x79\",\"\\x29\",\"\\x1e\",\"\\x5c\"),922,hx::__res_63 + 4 },\n  137: \t{ HX_HCSTRING(\"__ASSET__:bitmap_flixel_system_debug_stats__Stats_GraphicMaximizeButton\",\"\\x66\",\"\\x7c\",\"\\xbc\",\"\\xb9\"),194,hx::__res_64 + 4 },\n  138  \t{ ::String(null()),0,0 }\n  139  };\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/PlayState.cpp:\n  138  #include <flixel/system/FlxSoundGroup.h>\n  139  #endif\n  140: #ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd\n  141: #include <flixel/system/frontEnds/DebuggerFrontEnd.h>\n  142  #endif\n  143  #ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd\n  ...\n  366  HXLINE(  66)\t\t ::PlayState _gthis = hx::ObjectPtr<OBJ_>(this);\n  367  HXLINE(  68)\t\tthis->super::create();\n  368: HXLINE(  70)\t\t::flixel::FlxG_obj::debugger->set_drawDebug(true);\n  369  HXLINE(  72)\t\t{\n  370  HXLINE(  72)\t\t\t ::flixel::math::FlxRect _this = ::flixel::FlxG_obj::worldBounds;\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/FlxBasic.cpp:\n  143  HXDLIN( 132)\t\t_this3->label = HX_(\"exists\",dc,1d,e0,bf);\n  144  HXDLIN( 132)\t\t_this3->value = value3;\n  145: HXLINE( 128)\t\treturn ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(4)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,_this3));\n  146              \t}\n  147  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/FlxG.cpp:\n   90  #include <flixel/system/frontEnds/ConsoleFrontEnd.h>\n   91  #endif\n   92: #ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd\n   93: #include <flixel/system/frontEnds/DebuggerFrontEnd.h>\n   94  #endif\n   95  #ifndef INCLUDED_flixel_system_frontEnds_InputFrontEnd\n   ..\n  317   ::flixel::_hx_system::frontEnds::WatchFrontEnd FlxG_obj::watch;\n  318  \n  319:  ::flixel::_hx_system::frontEnds::DebuggerFrontEnd FlxG_obj::debugger;\n  320  \n  321   ::flixel::_hx_system::frontEnds::VCRFrontEnd FlxG_obj::vcr;\n  ...\n  749  \t\tif (HX_FIELD_EQ(inName,\"onMobile\") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_onMobile() ); return true; } }\n  750  \t\tif (HX_FIELD_EQ(inName,\"gamepads\") ) { outValue = ( gamepads ); return true; }\n  751: \t\tif (HX_FIELD_EQ(inName,\"debugger\") ) { outValue = ( debugger ); return true; }\n  752  \t\tbreak;\n  753  \tcase 9:\n  ...\n  845  \tcase 8:\n  846  \t\tif (HX_FIELD_EQ(inName,\"gamepads\") ) { gamepads=ioValue.Cast<  ::flixel::input::gamepad::FlxGamepadManager >(); return true; }\n  847: \t\tif (HX_FIELD_EQ(inName,\"debugger\") ) { debugger=ioValue.Cast<  ::flixel::_hx_system::frontEnds::DebuggerFrontEnd >(); return true; }\n  848  \t\tbreak;\n  849  \tcase 9:\n  ...\n  913  \t{hx::fsObject /*::flixel::_hx_system::frontEnds::BitmapLogFrontEnd*/ ,(void *) &FlxG_obj::bitmapLog,HX_HCSTRING(\"bitmapLog\",\"\\xd5\",\"\\x5b\",\"\\xdb\",\"\\xc6\")},\n  914  \t{hx::fsObject /*::flixel::_hx_system::frontEnds::WatchFrontEnd*/ ,(void *) &FlxG_obj::watch,HX_HCSTRING(\"watch\",\"\\x4f\",\"\\x16\",\"\\x25\",\"\\xc5\")},\n  915: \t{hx::fsObject /*::flixel::_hx_system::frontEnds::DebuggerFrontEnd*/ ,(void *) &FlxG_obj::debugger,HX_HCSTRING(\"debugger\",\"\\x21\",\"\\x24\",\"\\xeb\",\"\\x90\")},\n  916  \t{hx::fsObject /*::flixel::_hx_system::frontEnds::VCRFrontEnd*/ ,(void *) &FlxG_obj::vcr,HX_HCSTRING(\"vcr\",\"\\xa5\",\"\\xe0\",\"\\x59\",\"\\x00\")},\n  917  \t{hx::fsObject /*::flixel::_hx_system::frontEnds::BitmapFrontEnd*/ ,(void *) &FlxG_obj::bitmap,HX_HCSTRING(\"bitmap\",\"\\xef\",\"\\x0f\",\"\\x0c\",\"\\xf1\")},\n  ...\n  958  \tHX_MARK_MEMBER_NAME(FlxG_obj::bitmapLog,\"bitmapLog\");\n  959  \tHX_MARK_MEMBER_NAME(FlxG_obj::watch,\"watch\");\n  960: \tHX_MARK_MEMBER_NAME(FlxG_obj::debugger,\"debugger\");\n  961  \tHX_MARK_MEMBER_NAME(FlxG_obj::vcr,\"vcr\");\n  962  \tHX_MARK_MEMBER_NAME(FlxG_obj::bitmap,\"bitmap\");\n  ...\n 1002  \tHX_VISIT_MEMBER_NAME(FlxG_obj::bitmapLog,\"bitmapLog\");\n 1003  \tHX_VISIT_MEMBER_NAME(FlxG_obj::watch,\"watch\");\n 1004: \tHX_VISIT_MEMBER_NAME(FlxG_obj::debugger,\"debugger\");\n 1005  \tHX_VISIT_MEMBER_NAME(FlxG_obj::vcr,\"vcr\");\n 1006  \tHX_VISIT_MEMBER_NAME(FlxG_obj::bitmap,\"bitmap\");\n ....\n 1048  \tHX_HCSTRING(\"bitmapLog\",\"\\xd5\",\"\\x5b\",\"\\xdb\",\"\\xc6\"),\n 1049  \tHX_HCSTRING(\"watch\",\"\\x4f\",\"\\x16\",\"\\x25\",\"\\xc5\"),\n 1050: \tHX_HCSTRING(\"debugger\",\"\\x21\",\"\\x24\",\"\\xeb\",\"\\x90\"),\n 1051  \tHX_HCSTRING(\"vcr\",\"\\xa5\",\"\\xe0\",\"\\x59\",\"\\x00\"),\n 1052  \tHX_HCSTRING(\"bitmap\",\"\\xef\",\"\\x0f\",\"\\x0c\",\"\\xf1\"),\n ....\n 1197  {\n 1198              \tHX_GC_STACKFRAME(&_hx_pos_5f7463bd5b510fa4_271_boot)\n 1199: HXDLIN( 271)\t\tdebugger =  ::flixel::_hx_system::frontEnds::DebuggerFrontEnd_obj::__alloc( HX_CTX );\n 1200              \t}\n 1201  {\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/FlxObject.cpp:\n  890  HXDLIN(1147)\t\t_this5->label = HX_(\"velocity\",1d,02,fe,1e);\n  891  HXDLIN(1147)\t\t_this5->value = value5;\n  892: HXLINE(1141)\t\treturn ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(6)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,_hx_tmp3)->init(4,_hx_tmp4)->init(5,_this5));\n  893              \t}\n  894  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/FlxSprite.cpp:\n  463  HXDLIN( 471)\t\t\t_this4->label = HX_(\"h\",68,00,00,00);\n  464  HXDLIN( 471)\t\t\t_this4->value = value3;\n  465: HXDLIN( 471)\t\t\tkey = (key + (HX_(\":\",3a,00,00,00) + ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(4)->init(0,key1)->init(1,key2)->init(2,key3)->init(3,_this4))));\n  466              \t\t}\n  467  HXLINE( 473)\t\t ::flixel::graphics::FlxGraphic graphic = ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,key)) );\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/addons/ui/FlxUI9SliceSprite.cpp:\n  764  HXDLIN( 384)\t\t_this3->label = HX_(\"h\",68,00,00,00);\n  765  HXDLIN( 384)\t\t_this3->value = value3;\n  766: HXDLIN( 384)\t\treturn (_hx_tmp + ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(4)->init(0,_hx_tmp1)->init(1,_hx_tmp2)->init(2,_hx_tmp3)->init(3,_this3)));\n  767              \t}\n  768  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/addons/ui/StrNameLabel.cpp:\n   72  HXDLIN(  36)\t\t_this1->label = HX_(\"label\",f4,0d,af,6f);\n   73  HXDLIN(  36)\t\t_this1->value = value1;\n   74: HXLINE(  34)\t\treturn ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp)->init(1,_this1));\n   75              \t}\n   76  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/graphics/FlxGraphic.cpp:\n  606  HXDLIN( 153)\t\t\t_this4->label = HX_(\"h\",68,00,00,00);\n  607  HXDLIN( 153)\t\t\t_this4->value = value3;\n  608: HXDLIN( 153)\t\t\tkey = ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(4)->init(0,key1)->init(1,key2)->init(2,key3)->init(3,_this4));\n  609              \t\t}\n  610  HXLINE( 154)\t\tkey = ((Source->parent->key + HX_(\":\",3a,00,00,00)) + key);\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/graphics/frames/FlxFrame.cpp:\n 1257  HXDLIN( 665)\t\t_this->label = HX_(\"name\",4b,72,ff,48);\n 1258  HXDLIN( 665)\t\t_this->value = value;\n 1259: HXLINE( 664)\t\treturn ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(1)->init(0,_this));\n 1260              \t}\n 1261  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/graphics/frames/FlxFramesCollection.cpp:\n  404  HXDLIN( 249)\t\t_this1->label = HX_(\"type\",ba,f2,08,4d);\n  405  HXDLIN( 249)\t\t_this1->value = value1;\n  406: HXLINE( 247)\t\treturn ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp)->init(1,_this1));\n  407              \t}\n  408  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/input/FlxPointer.cpp:\n  216  HXDLIN( 155)\t\t_this1->label = HX_(\"y\",79,00,00,00);\n  217  HXDLIN( 155)\t\t_this1->value = value1;\n  218: HXLINE( 153)\t\treturn ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp)->init(1,_this1));\n  219              \t}\n  220  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/input/FlxSwipe.cpp:\n  123  HXDLIN(  45)\t\t_this5->label = HX_(\"duration\",54,0f,8e,14);\n  124  HXDLIN(  45)\t\t_this5->value = value5;\n  125: HXLINE(  39)\t\treturn ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(6)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,_hx_tmp3)->init(4,_hx_tmp4)->init(5,_this5));\n  126              \t}\n  127  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/input/gamepad/FlxGamepad.cpp:\n 1178  HXDLIN( 856)\t\t_this2->label = HX_(\"deadZone\",f0,3e,2e,58);\n 1179  HXDLIN( 856)\t\t_this2->value = value2;\n 1180: HXLINE( 853)\t\treturn ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(3)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_this2));\n 1181              \t}\n 1182  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/input/gamepad/FlxGamepadAnalogStick.cpp:\n  149  HXDLIN(  63)\t\t_this7->label = HX_(\"mode\",63,d3,60,48);\n  150  HXDLIN(  63)\t\t_this7->value = value7;\n  151: HXLINE(  55)\t\treturn ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(8)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,_hx_tmp3)->init(4,_hx_tmp4)->init(5,_hx_tmp5)->init(6,_hx_tmp6)->init(7,_this7));\n  152              \t}\n  153  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/math/FlxPoint.cpp:\n  553  HXDLIN( 438)\t\t_this1->label = HX_(\"y\",79,00,00,00);\n  554  HXDLIN( 438)\t\t_this1->value = value1;\n  555: HXLINE( 436)\t\treturn ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp)->init(1,_this1));\n  556              \t}\n  557  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/math/FlxRect.cpp:\n  563  HXDLIN( 404)\t\t_this3->label = HX_(\"h\",68,00,00,00);\n  564  HXDLIN( 404)\t\t_this3->value = value3;\n  565: HXLINE( 400)\t\treturn ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(4)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,_this3));\n  566              \t}\n  567  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/FlxAssets.cpp:\n  103  ::String FlxAssets_obj::FONT_DEFAULT;\n  104  \n  105: ::String FlxAssets_obj::FONT_DEBUGGER;\n  106  \n  107  void FlxAssets_obj::drawLogo( ::openfl::display::Graphics graph){\n  ...\n  267  \t\tbreak;\n  268  \tcase 13:\n  269: \t\tif (HX_FIELD_EQ(inName,\"FONT_DEBUGGER\") ) { outValue = ( FONT_DEBUGGER ); return true; }\n  270  \t\tif (HX_FIELD_EQ(inName,\"getBitmapData\") ) { outValue = getBitmapData_dyn(); return true; }\n  271  \t\tbreak;\n  ...\n  289  \t\tbreak;\n  290  \tcase 13:\n  291: \t\tif (HX_FIELD_EQ(inName,\"FONT_DEBUGGER\") ) { FONT_DEBUGGER=ioValue.Cast< ::String >(); return true; }\n  292  \t}\n  293  \treturn false;\n  ...\n  298  static hx::StaticInfo FlxAssets_obj_sStaticStorageInfo[] = {\n  299  \t{hx::fsString,(void *) &FlxAssets_obj::FONT_DEFAULT,HX_HCSTRING(\"FONT_DEFAULT\",\"\\xf1\",\"\\x12\",\"\\x32\",\"\\xe2\")},\n  300: \t{hx::fsString,(void *) &FlxAssets_obj::FONT_DEBUGGER,HX_HCSTRING(\"FONT_DEBUGGER\",\"\\xd1\",\"\\xd3\",\"\\xef\",\"\\xea\")},\n  301  \t{ hx::fsUnknown, 0, null()}\n  302  };\n  ...\n  306  \tHX_MARK_MEMBER_NAME(FlxAssets_obj::__mClass,\"__mClass\");\n  307  \tHX_MARK_MEMBER_NAME(FlxAssets_obj::FONT_DEFAULT,\"FONT_DEFAULT\");\n  308: \tHX_MARK_MEMBER_NAME(FlxAssets_obj::FONT_DEBUGGER,\"FONT_DEBUGGER\");\n  309  };\n  310  \n  ...\n  313  \tHX_VISIT_MEMBER_NAME(FlxAssets_obj::__mClass,\"__mClass\");\n  314  \tHX_VISIT_MEMBER_NAME(FlxAssets_obj::FONT_DEFAULT,\"FONT_DEFAULT\");\n  315: \tHX_VISIT_MEMBER_NAME(FlxAssets_obj::FONT_DEBUGGER,\"FONT_DEBUGGER\");\n  316  };\n  317  \n  ...\n  322  static ::String FlxAssets_obj_sStaticFields[] = {\n  323  \tHX_HCSTRING(\"FONT_DEFAULT\",\"\\xf1\",\"\\x12\",\"\\x32\",\"\\xe2\"),\n  324: \tHX_HCSTRING(\"FONT_DEBUGGER\",\"\\xd1\",\"\\xd3\",\"\\xef\",\"\\xea\"),\n  325  \tHX_HCSTRING(\"drawLogo\",\"\\x8f\",\"\\x49\",\"\\x21\",\"\\x5c\"),\n  326  \tHX_HCSTRING(\"getBitmapData\",\"\\xef\",\"\\x11\",\"\\x33\",\"\\x90\"),\n  ...\n  368  {\n  369              \tHX_STACKFRAME(&_hx_pos_a4ce3a91bdd58bc5_79_boot)\n  370: HXDLIN(  79)\t\tFONT_DEBUGGER = HX_(\"Monsterrat\",2b,92,73,63);\n  371              \t}\n  372  }\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/FlxSound.cpp:\n  743  HXDLIN( 744)\t\t_this3->label = HX_(\"volume\",da,29,53,5f);\n  744  HXDLIN( 744)\t\t_this3->value = value3;\n  745: HXLINE( 740)\t\treturn ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(4)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,_this3));\n  746              \t}\n  747  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/DebuggerUtil.cpp:\n    5  #include <flixel/system/FlxAssets.h>\n    6  #endif\n    7: #ifndef INCLUDED_flixel_system_debug_DebuggerUtil\n    8: #include <flixel/system/debug/DebuggerUtil.h>\n    9  #endif\n   10  #ifndef INCLUDED_openfl_display_BitmapData\n   ..\n   33  #endif\n   34  \n   35: HX_LOCAL_STACK_FRAME(_hx_pos_137a9380b585812a_19_createTextField,\"flixel.system.debug.DebuggerUtil\",\"createTextField\",0x34b9b52e,\"flixel.system.debug.DebuggerUtil.createTextField\",\"flixel/system/debug/DebuggerUtil.hx\",19,0x13434d32)\n   36: HX_LOCAL_STACK_FRAME(_hx_pos_137a9380b585812a_23_initTextField,\"flixel.system.debug.DebuggerUtil\",\"initTextField\",0x9a50155a,\"flixel.system.debug.DebuggerUtil.initTextField\",\"flixel/system/debug/DebuggerUtil.hx\",23,0x13434d32)\n   37: HX_LOCAL_STACK_FRAME(_hx_pos_137a9380b585812a_48_fixSize,\"flixel.system.debug.DebuggerUtil\",\"fixSize\",0xaffeaf33,\"flixel.system.debug.DebuggerUtil.fixSize\",\"flixel/system/debug/DebuggerUtil.hx\",48,0x13434d32)\n   38  namespace flixel{\n   39  namespace _hx_system{\n   40: namespace debug{\n   41  \n   42: void DebuggerUtil_obj::__construct() { }\n   43  \n   44: Dynamic DebuggerUtil_obj::__CreateEmpty() { return new DebuggerUtil_obj; }\n   45  \n   46: void *DebuggerUtil_obj::_hx_vtable = 0;\n   47  \n   48: Dynamic DebuggerUtil_obj::__Create(hx::DynamicArray inArgs)\n   49  {\n   50: \thx::ObjectPtr< DebuggerUtil_obj > _hx_result = new DebuggerUtil_obj();\n   51  \t_hx_result->__construct();\n   52  \treturn _hx_result;\n   53  }\n   54  \n   55: bool DebuggerUtil_obj::_hx_isInstanceOf(int inClassId) {\n   56  \treturn inClassId==(int)0x00000001 || inClassId==(int)0x02a0688b;\n   57  }\n   58  \n   59:  ::openfl::text::TextField DebuggerUtil_obj::createTextField(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< int >  __o_Color,hx::Null< int >  __o_Size){\n   60  Float X = __o_X.Default(0);\n   61  Float Y = __o_Y.Default(0);\n   ..\n   63  int Size = __o_Size.Default(12);\n   64              \tHX_GC_STACKFRAME(&_hx_pos_137a9380b585812a_19_createTextField)\n   65: HXDLIN(  19)\t\treturn ( ( ::openfl::text::TextField)(::flixel::_hx_system::debug::DebuggerUtil_obj::initTextField( ::openfl::text::TextField_obj::__alloc( HX_CTX ),X,Y,Color,Size)) );\n   66              \t}\n   67  \n   68  \n   69: STATIC_HX_DEFINE_DYNAMIC_FUNC4(DebuggerUtil_obj,createTextField,return )\n   70  \n   71:  ::Dynamic DebuggerUtil_obj::initTextField( ::Dynamic tf,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< int >  __o_Color,hx::Null< int >  __o_Size){\n   72  Float X = __o_X.Default(0);\n   73  Float Y = __o_Y.Default(0);\n   ..\n   81  HXLINE(  28)\t\t( ( ::openfl::text::TextField)(tf) )->set_embedFonts(true);\n   82  HXLINE(  29)\t\t( ( ::openfl::text::TextField)(tf) )->set_selectable(false);\n   83: HXLINE(  34)\t\t( ( ::openfl::text::TextField)(tf) )->set_defaultTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,::flixel::_hx_system::FlxAssets_obj::FONT_DEBUGGER,Size,((int)Color & (int)(int)16777215),null(),null(),null(),null(),null(),null(),null(),null(),null(),null()));\n   84  HXLINE(  35)\t\t( ( ::openfl::display::DisplayObject)(tf) )->set_alpha(((Float)((int)((int)Color >> (int)(int)24) & (int)(int)255) / (Float)(int)255));\n   85  HXLINE(  36)\t\t( ( ::openfl::text::TextField)(tf) )->set_autoSize((int)1);\n   ..\n   88  \n   89  \n   90: STATIC_HX_DEFINE_DYNAMIC_FUNC5(DebuggerUtil_obj,initTextField,return )\n   91  \n   92:  ::openfl::display::BitmapData DebuggerUtil_obj::fixSize( ::openfl::display::BitmapData bitmapData){\n   93              \tHX_STACKFRAME(&_hx_pos_137a9380b585812a_48_fixSize)\n   94  HXDLIN(  48)\t\treturn bitmapData;\n   ..\n   96  \n   97  \n   98: STATIC_HX_DEFINE_DYNAMIC_FUNC1(DebuggerUtil_obj,fixSize,return )\n   99  \n  100  \n  101: DebuggerUtil_obj::DebuggerUtil_obj()\n  102  {\n  103  }\n  104  \n  105: bool DebuggerUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)\n  106  {\n  107  \tswitch(inName.length) {\n  ...\n  119  \n  120  #if HXCPP_SCRIPTABLE\n  121: static hx::StorageInfo *DebuggerUtil_obj_sMemberStorageInfo = 0;\n  122: static hx::StaticInfo *DebuggerUtil_obj_sStaticStorageInfo = 0;\n  123  #endif\n  124  \n  125: static void DebuggerUtil_obj_sMarkStatics(HX_MARK_PARAMS) {\n  126: \tHX_MARK_MEMBER_NAME(DebuggerUtil_obj::__mClass,\"__mClass\");\n  127  };\n  128  \n  129  #ifdef HXCPP_VISIT_ALLOCS\n  130: static void DebuggerUtil_obj_sVisitStatics(HX_VISIT_PARAMS) {\n  131: \tHX_VISIT_MEMBER_NAME(DebuggerUtil_obj::__mClass,\"__mClass\");\n  132  };\n  133  \n  134  #endif\n  135  \n  136: hx::Class DebuggerUtil_obj::__mClass;\n  137  \n  138: static ::String DebuggerUtil_obj_sStaticFields[] = {\n  139  \tHX_HCSTRING(\"createTextField\",\"\\x31\",\"\\xde\",\"\\x75\",\"\\x3a\"),\n  140  \tHX_HCSTRING(\"initTextField\",\"\\x9d\",\"\\xe7\",\"\\x80\",\"\\x14\"),\n  ...\n  143  };\n  144  \n  145: void DebuggerUtil_obj::__register()\n  146  {\n  147: \thx::Object *dummy = new DebuggerUtil_obj;\n  148: \tDebuggerUtil_obj::_hx_vtable = *(void **)dummy;\n  149  \thx::Static(__mClass) = new hx::Class_obj();\n  150: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.DebuggerUtil\",\"\\x6b\",\"\\xad\",\"\\xc9\",\"\\xcc\");\n  151  \t__mClass->mSuper = &super::__SGetClass();\n  152  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  153  \t__mClass->mConstructArgs = &__Create;\n  154: \t__mClass->mGetStaticField = &DebuggerUtil_obj::__GetStatic;\n  155  \t__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;\n  156: \t__mClass->mMarkFunc = DebuggerUtil_obj_sMarkStatics;\n  157: \t__mClass->mStatics = hx::Class_obj::dupFunctions(DebuggerUtil_obj_sStaticFields);\n  158  \t__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);\n  159: \t__mClass->mCanCast = hx::TCanCast< DebuggerUtil_obj >;\n  160  #ifdef HXCPP_VISIT_ALLOCS\n  161: \t__mClass->mVisitFunc = DebuggerUtil_obj_sVisitStatics;\n  162  #endif\n  163  #ifdef HXCPP_SCRIPTABLE\n  164: \t__mClass->mMemberStorageInfo = DebuggerUtil_obj_sMemberStorageInfo;\n  165  #endif\n  166  #ifdef HXCPP_SCRIPTABLE\n  167: \t__mClass->mStaticStorageInfo = DebuggerUtil_obj_sStaticStorageInfo;\n  168  #endif\n  169  \thx::_hx_RegisterClass(__mClass->mName, __mClass);\n  ...\n  172  } // end namespace flixel\n  173  } // end namespace system\n  174: } // end namespace debug\n  175  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/FlxDebugger.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_FlxDebugger\n    5: #include <flixel/system/debug/FlxDebugger.h>\n    6  #endif\n    7  #ifndef INCLUDED_openfl_display_DisplayObject\n    .\n   27  #endif\n   28  \n   29: HX_DEFINE_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_63_new,\"flixel.system.debug.FlxDebugger\",\"new\",0x06ebd57d,\"flixel.system.debug.FlxDebugger.new\",\"flixel/system/debug/FlxDebugger.hx\",63,0xd9fc0a74)\n   30  namespace flixel{\n   31  namespace _hx_system{\n   32: namespace debug{\n   33  \n   34: void FlxDebugger_obj::__construct(){\n   35              \tHX_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_63_new)\n   36  HXDLIN(  63)\t\tsuper::__construct();\n   37              \t}\n   38  \n   39: Dynamic FlxDebugger_obj::__CreateEmpty() { return new FlxDebugger_obj; }\n   40  \n   41: void *FlxDebugger_obj::_hx_vtable = 0;\n   42  \n   43: Dynamic FlxDebugger_obj::__Create(hx::DynamicArray inArgs)\n   44  {\n   45: \thx::ObjectPtr< FlxDebugger_obj > _hx_result = new FlxDebugger_obj();\n   46  \t_hx_result->__construct();\n   47  \treturn _hx_result;\n   48  }\n   49  \n   50: bool FlxDebugger_obj::_hx_isInstanceOf(int inClassId) {\n   51  \tif (inClassId<=(int)0x19c29573) {\n   52  \t\tif (inClassId<=(int)0x17120186) {\n   ..\n   69  \n   70  \n   71: hx::ObjectPtr< FlxDebugger_obj > FlxDebugger_obj::__new() {\n   72: \thx::ObjectPtr< FlxDebugger_obj > __this = new FlxDebugger_obj();\n   73  \t__this->__construct();\n   74  \treturn __this;\n   75  }\n   76  \n   77: hx::ObjectPtr< FlxDebugger_obj > FlxDebugger_obj::__alloc(hx::Ctx *_hx_ctx) {\n   78: \tFlxDebugger_obj *__this = (FlxDebugger_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxDebugger_obj), true, \"flixel.system.debug.FlxDebugger\"));\n   79: \t*(void **)__this = FlxDebugger_obj::_hx_vtable;\n   80  \t__this->__construct();\n   81  \treturn __this;\n   82  }\n   83  \n   84: FlxDebugger_obj::FlxDebugger_obj()\n   85  {\n   86  }\n   87  \n   88  #if HXCPP_SCRIPTABLE\n   89: static hx::StorageInfo *FlxDebugger_obj_sMemberStorageInfo = 0;\n   90: static hx::StaticInfo *FlxDebugger_obj_sStaticStorageInfo = 0;\n   91  #endif\n   92  \n   93: static void FlxDebugger_obj_sMarkStatics(HX_MARK_PARAMS) {\n   94: \tHX_MARK_MEMBER_NAME(FlxDebugger_obj::__mClass,\"__mClass\");\n   95  };\n   96  \n   97  #ifdef HXCPP_VISIT_ALLOCS\n   98: static void FlxDebugger_obj_sVisitStatics(HX_VISIT_PARAMS) {\n   99: \tHX_VISIT_MEMBER_NAME(FlxDebugger_obj::__mClass,\"__mClass\");\n  100  };\n  101  \n  102  #endif\n  103  \n  104: hx::Class FlxDebugger_obj::__mClass;\n  105  \n  106: void FlxDebugger_obj::__register()\n  107  {\n  108: \thx::Object *dummy = new FlxDebugger_obj;\n  109: \tFlxDebugger_obj::_hx_vtable = *(void **)dummy;\n  110  \thx::Static(__mClass) = new hx::Class_obj();\n  111: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.FlxDebugger\",\"\\x0b\",\"\\x53\",\"\\xa2\",\"\\xd7\");\n  112  \t__mClass->mSuper = &super::__SGetClass();\n  113  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  115  \t__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;\n  116  \t__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;\n  117: \t__mClass->mMarkFunc = FlxDebugger_obj_sMarkStatics;\n  118  \t__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);\n  119  \t__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);\n  120: \t__mClass->mCanCast = hx::TCanCast< FlxDebugger_obj >;\n  121  #ifdef HXCPP_VISIT_ALLOCS\n  122: \t__mClass->mVisitFunc = FlxDebugger_obj_sVisitStatics;\n  123  #endif\n  124  #ifdef HXCPP_SCRIPTABLE\n  125: \t__mClass->mMemberStorageInfo = FlxDebugger_obj_sMemberStorageInfo;\n  126  #endif\n  127  #ifdef HXCPP_SCRIPTABLE\n  128: \t__mClass->mStaticStorageInfo = FlxDebugger_obj_sStaticStorageInfo;\n  129  #endif\n  130  \thx::_hx_RegisterClass(__mClass->mName, __mClass);\n  ...\n  133  } // end namespace flixel\n  134  } // end namespace system\n  135: } // end namespace debug\n  136  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/FlxDebuggerLayout.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_FlxDebuggerLayout\n    5: #include <flixel/system/debug/FlxDebuggerLayout.h>\n    6  #endif\n    7  namespace flixel{\n    8  namespace _hx_system{\n    9: namespace debug{\n   10  \n   11: ::flixel::_hx_system::debug::FlxDebuggerLayout FlxDebuggerLayout_obj::BIG;\n   12  \n   13: ::flixel::_hx_system::debug::FlxDebuggerLayout FlxDebuggerLayout_obj::LEFT;\n   14  \n   15: ::flixel::_hx_system::debug::FlxDebuggerLayout FlxDebuggerLayout_obj::MICRO;\n   16  \n   17: ::flixel::_hx_system::debug::FlxDebuggerLayout FlxDebuggerLayout_obj::RIGHT;\n   18  \n   19: ::flixel::_hx_system::debug::FlxDebuggerLayout FlxDebuggerLayout_obj::STANDARD;\n   20  \n   21: ::flixel::_hx_system::debug::FlxDebuggerLayout FlxDebuggerLayout_obj::TOP;\n   22  \n   23: bool FlxDebuggerLayout_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)\n   24  {\n   25: \tif (inName==HX_(\"BIG\",a0,54,32,00)) { outValue = FlxDebuggerLayout_obj::BIG; return true; }\n   26: \tif (inName==HX_(\"LEFT\",07,d0,70,32)) { outValue = FlxDebuggerLayout_obj::LEFT; return true; }\n   27: \tif (inName==HX_(\"MICRO\",e4,5c,4e,86)) { outValue = FlxDebuggerLayout_obj::MICRO; return true; }\n   28: \tif (inName==HX_(\"RIGHT\",bc,43,52,67)) { outValue = FlxDebuggerLayout_obj::RIGHT; return true; }\n   29: \tif (inName==HX_(\"STANDARD\",3d,c7,fd,43)) { outValue = FlxDebuggerLayout_obj::STANDARD; return true; }\n   30: \tif (inName==HX_(\"TOP\",75,02,40,00)) { outValue = FlxDebuggerLayout_obj::TOP; return true; }\n   31  \treturn super::__GetStatic(inName, outValue, inCallProp);\n   32  }\n   33  \n   34: HX_DEFINE_CREATE_ENUM(FlxDebuggerLayout_obj)\n   35  \n   36: int FlxDebuggerLayout_obj::__FindIndex(::String inName)\n   37  {\n   38  \tif (inName==HX_(\"BIG\",a0,54,32,00)) return 2;\n   ..\n   45  }\n   46  \n   47: int FlxDebuggerLayout_obj::__FindArgCount(::String inName)\n   48  {\n   49  \tif (inName==HX_(\"BIG\",a0,54,32,00)) return 0;\n   ..\n   56  }\n   57  \n   58: hx::Val FlxDebuggerLayout_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)\n   59  {\n   60  \tif (inName==HX_(\"BIG\",a0,54,32,00)) return BIG;\n   ..\n   67  }\n   68  \n   69: static ::String FlxDebuggerLayout_obj_sStaticFields[] = {\n   70  \tHX_(\"STANDARD\",3d,c7,fd,43),\n   71  \tHX_(\"MICRO\",e4,5c,4e,86),\n   ..\n   77  };\n   78  \n   79: static void FlxDebuggerLayout_obj_sMarkStatics(HX_MARK_PARAMS) {\n   80: \tHX_MARK_MEMBER_NAME(FlxDebuggerLayout_obj::BIG,\"BIG\");\n   81: \tHX_MARK_MEMBER_NAME(FlxDebuggerLayout_obj::LEFT,\"LEFT\");\n   82: \tHX_MARK_MEMBER_NAME(FlxDebuggerLayout_obj::MICRO,\"MICRO\");\n   83: \tHX_MARK_MEMBER_NAME(FlxDebuggerLayout_obj::RIGHT,\"RIGHT\");\n   84: \tHX_MARK_MEMBER_NAME(FlxDebuggerLayout_obj::STANDARD,\"STANDARD\");\n   85: \tHX_MARK_MEMBER_NAME(FlxDebuggerLayout_obj::TOP,\"TOP\");\n   86  };\n   87  \n   88  #ifdef HXCPP_VISIT_ALLOCS\n   89: static void FlxDebuggerLayout_obj_sVisitStatic(HX_VISIT_PARAMS) {\n   90: \tHX_VISIT_MEMBER_NAME(FlxDebuggerLayout_obj::__mClass,\"__mClass\");\n   91: \tHX_VISIT_MEMBER_NAME(FlxDebuggerLayout_obj::BIG,\"BIG\");\n   92: \tHX_VISIT_MEMBER_NAME(FlxDebuggerLayout_obj::LEFT,\"LEFT\");\n   93: \tHX_VISIT_MEMBER_NAME(FlxDebuggerLayout_obj::MICRO,\"MICRO\");\n   94: \tHX_VISIT_MEMBER_NAME(FlxDebuggerLayout_obj::RIGHT,\"RIGHT\");\n   95: \tHX_VISIT_MEMBER_NAME(FlxDebuggerLayout_obj::STANDARD,\"STANDARD\");\n   96: \tHX_VISIT_MEMBER_NAME(FlxDebuggerLayout_obj::TOP,\"TOP\");\n   97  };\n   98  #endif\n   99  \n  100: hx::Class FlxDebuggerLayout_obj::__mClass;\n  101  \n  102: Dynamic __Create_FlxDebuggerLayout_obj() { return new FlxDebuggerLayout_obj; }\n  103  \n  104: void FlxDebuggerLayout_obj::__register()\n  105  {\n  106  \n  107: hx::Static(__mClass) = hx::_hx_RegisterClass(HX_HCSTRING(\"flixel.system.debug.FlxDebuggerLayout\",\"\\x15\",\"\\xd0\",\"\\x5b\",\"\\x09\"), hx::TCanCast< FlxDebuggerLayout_obj >,FlxDebuggerLayout_obj_sStaticFields,0,\n  108: \t&__Create_FlxDebuggerLayout_obj, &__Create,\n  109: \t&super::__SGetClass(), &CreateFlxDebuggerLayout_obj, FlxDebuggerLayout_obj_sMarkStatics\n  110  #ifdef HXCPP_VISIT_ALLOCS\n  111:     , FlxDebuggerLayout_obj_sVisitStatic\n  112  #endif\n  113  #ifdef HXCPP_SCRIPTABLE\n  ...\n  115  #endif\n  116  );\n  117: \t__mClass->mGetStaticField = &FlxDebuggerLayout_obj::__GetStatic;\n  118  }\n  119  \n  120: void FlxDebuggerLayout_obj::__boot()\n  121  {\n  122: BIG = hx::CreateEnum< FlxDebuggerLayout_obj >(HX_HCSTRING(\"BIG\",\"\\xa0\",\"\\x54\",\"\\x32\",\"\\x00\"),2,0);\n  123: LEFT = hx::CreateEnum< FlxDebuggerLayout_obj >(HX_HCSTRING(\"LEFT\",\"\\x07\",\"\\xd0\",\"\\x70\",\"\\x32\"),4,0);\n  124: MICRO = hx::CreateEnum< FlxDebuggerLayout_obj >(HX_HCSTRING(\"MICRO\",\"\\xe4\",\"\\x5c\",\"\\x4e\",\"\\x86\"),1,0);\n  125: RIGHT = hx::CreateEnum< FlxDebuggerLayout_obj >(HX_HCSTRING(\"RIGHT\",\"\\xbc\",\"\\x43\",\"\\x52\",\"\\x67\"),5,0);\n  126: STANDARD = hx::CreateEnum< FlxDebuggerLayout_obj >(HX_HCSTRING(\"STANDARD\",\"\\x3d\",\"\\xc7\",\"\\xfd\",\"\\x43\"),0,0);\n  127: TOP = hx::CreateEnum< FlxDebuggerLayout_obj >(HX_HCSTRING(\"TOP\",\"\\x75\",\"\\x02\",\"\\x40\",\"\\x00\"),3,0);\n  128  }\n  129  \n  ...\n  131  } // end namespace flixel\n  132  } // end namespace system\n  133: } // end namespace debug\n  134  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/GraphicArrowLeft.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_GraphicArrowLeft\n    5: #include <flixel/system/debug/GraphicArrowLeft.h>\n    6  #endif\n    7  #ifndef INCLUDED_haxe_Resource\n    .\n   33  #endif\n   34  \n   35: HX_DEFINE_STACK_FRAME(_hx_pos_cebfdffe604a0e95_51_new,\"flixel.system.debug.GraphicArrowLeft\",\"new\",0x89eb9442,\"flixel.system.debug.GraphicArrowLeft.new\",\"openfl/_internal/macros/AssetsMacro.hx\",51,0xf7db08ab)\n   36: HX_LOCAL_STACK_FRAME(_hx_pos_6e4222c53e856503_1_boot,\"flixel.system.debug.GraphicArrowLeft\",\"boot\",0x1c4f2610,\"flixel.system.debug.GraphicArrowLeft.boot\",\"?\",1,0x0000003f)\n   37  namespace flixel{\n   38  namespace _hx_system{\n   39: namespace debug{\n   40  \n   41  void GraphicArrowLeft_obj::__construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA){\n   ..\n   44              \tHX_STACKFRAME(&_hx_pos_cebfdffe604a0e95_51_new)\n   45  HXLINE(  83)\t\tsuper::__construct((int)0,(int)0,transparent,fillRGBA);\n   46: HXLINE(  85)\t\t ::openfl::utils::ByteArrayData byteArray = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(::haxe::Resource_obj::getBytes(::flixel::_hx_system::debug::GraphicArrowLeft_obj::resourceName));\n   47  HXLINE(  86)\t\t{\n   48  HXLINE(  86)\t\t\t ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(byteArray));\n   ..\n   80  \n   81  hx::ObjectPtr< GraphicArrowLeft_obj > GraphicArrowLeft_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA) {\n   82: \tGraphicArrowLeft_obj *__this = (GraphicArrowLeft_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GraphicArrowLeft_obj), true, \"flixel.system.debug.GraphicArrowLeft\"));\n   83  \t*(void **)__this = GraphicArrowLeft_obj::_hx_vtable;\n   84  \t__this->__construct(width,height,__o_transparent,__o_fillRGBA);\n   ..\n  141  \tGraphicArrowLeft_obj::_hx_vtable = *(void **)dummy;\n  142  \thx::Static(__mClass) = new hx::Class_obj();\n  143: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.GraphicArrowLeft\",\"\\x50\",\"\\x0b\",\"\\xc0\",\"\\x92\");\n  144  \t__mClass->mSuper = &super::__SGetClass();\n  145  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  167  {\n  168              \tHX_STACKFRAME(&_hx_pos_6e4222c53e856503_1_boot)\n  169: HXDLIN(   1)\t\tresourceName = HX_(\"__ASSET__:bitmap_flixel_system_debug_GraphicArrowLeft\",07,17,f4,7a);\n  170              \t}\n  171  }\n  ...\n  173  } // end namespace flixel\n  174  } // end namespace system\n  175: } // end namespace debug\n  176  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/GraphicArrowRight.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_GraphicArrowRight\n    5: #include <flixel/system/debug/GraphicArrowRight.h>\n    6  #endif\n    7  #ifndef INCLUDED_haxe_Resource\n    .\n   33  #endif\n   34  \n   35: HX_DEFINE_STACK_FRAME(_hx_pos_934d16fc99495edc_51_new,\"flixel.system.debug.GraphicArrowRight\",\"new\",0x7bbb3ee5,\"flixel.system.debug.GraphicArrowRight.new\",\"openfl/_internal/macros/AssetsMacro.hx\",51,0xf7db08ab)\n   36: HX_LOCAL_STACK_FRAME(_hx_pos_79ee4984206c5085_1_boot,\"flixel.system.debug.GraphicArrowRight\",\"boot\",0xc034ca0d,\"flixel.system.debug.GraphicArrowRight.boot\",\"?\",1,0x0000003f)\n   37  namespace flixel{\n   38  namespace _hx_system{\n   39: namespace debug{\n   40  \n   41  void GraphicArrowRight_obj::__construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA){\n   ..\n   44              \tHX_STACKFRAME(&_hx_pos_934d16fc99495edc_51_new)\n   45  HXLINE(  83)\t\tsuper::__construct((int)0,(int)0,transparent,fillRGBA);\n   46: HXLINE(  85)\t\t ::openfl::utils::ByteArrayData byteArray = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(::haxe::Resource_obj::getBytes(::flixel::_hx_system::debug::GraphicArrowRight_obj::resourceName));\n   47  HXLINE(  86)\t\t{\n   48  HXLINE(  86)\t\t\t ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(byteArray));\n   ..\n   80  \n   81  hx::ObjectPtr< GraphicArrowRight_obj > GraphicArrowRight_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA) {\n   82: \tGraphicArrowRight_obj *__this = (GraphicArrowRight_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GraphicArrowRight_obj), true, \"flixel.system.debug.GraphicArrowRight\"));\n   83  \t*(void **)__this = GraphicArrowRight_obj::_hx_vtable;\n   84  \t__this->__construct(width,height,__o_transparent,__o_fillRGBA);\n   ..\n  141  \tGraphicArrowRight_obj::_hx_vtable = *(void **)dummy;\n  142  \thx::Static(__mClass) = new hx::Class_obj();\n  143: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.GraphicArrowRight\",\"\\x73\",\"\\xe8\",\"\\x56\",\"\\x4c\");\n  144  \t__mClass->mSuper = &super::__SGetClass();\n  145  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  167  {\n  168              \tHX_STACKFRAME(&_hx_pos_79ee4984206c5085_1_boot)\n  169: HXDLIN(   1)\t\tresourceName = HX_(\"__ASSET__:bitmap_flixel_system_debug_GraphicArrowRight\",dc,1c,ad,91);\n  170              \t}\n  171  }\n  ...\n  173  } // end namespace flixel\n  174  } // end namespace system\n  175: } // end namespace debug\n  176  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/GraphicBitmapLog.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_GraphicBitmapLog\n    5: #include <flixel/system/debug/GraphicBitmapLog.h>\n    6  #endif\n    7  #ifndef INCLUDED_haxe_Resource\n    .\n   33  #endif\n   34  \n   35: HX_DEFINE_STACK_FRAME(_hx_pos_fc7225994009fbb7_51_new,\"flixel.system.debug.GraphicBitmapLog\",\"new\",0xf8da4027,\"flixel.system.debug.GraphicBitmapLog.new\",\"openfl/_internal/macros/AssetsMacro.hx\",51,0xf7db08ab)\n   36: HX_LOCAL_STACK_FRAME(_hx_pos_58465ca8ab419233_1_boot,\"flixel.system.debug.GraphicBitmapLog\",\"boot\",0xbe36e28b,\"flixel.system.debug.GraphicBitmapLog.boot\",\"?\",1,0x0000003f)\n   37  namespace flixel{\n   38  namespace _hx_system{\n   39: namespace debug{\n   40  \n   41  void GraphicBitmapLog_obj::__construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA){\n   ..\n   44              \tHX_STACKFRAME(&_hx_pos_fc7225994009fbb7_51_new)\n   45  HXLINE(  83)\t\tsuper::__construct((int)0,(int)0,transparent,fillRGBA);\n   46: HXLINE(  85)\t\t ::openfl::utils::ByteArrayData byteArray = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(::haxe::Resource_obj::getBytes(::flixel::_hx_system::debug::GraphicBitmapLog_obj::resourceName));\n   47  HXLINE(  86)\t\t{\n   48  HXLINE(  86)\t\t\t ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(byteArray));\n   ..\n   80  \n   81  hx::ObjectPtr< GraphicBitmapLog_obj > GraphicBitmapLog_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA) {\n   82: \tGraphicBitmapLog_obj *__this = (GraphicBitmapLog_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GraphicBitmapLog_obj), true, \"flixel.system.debug.GraphicBitmapLog\"));\n   83  \t*(void **)__this = GraphicBitmapLog_obj::_hx_vtable;\n   84  \t__this->__construct(width,height,__o_transparent,__o_fillRGBA);\n   ..\n  141  \tGraphicBitmapLog_obj::_hx_vtable = *(void **)dummy;\n  142  \thx::Static(__mClass) = new hx::Class_obj();\n  143: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.GraphicBitmapLog\",\"\\xb5\",\"\\xa0\",\"\\x47\",\"\\x56\");\n  144  \t__mClass->mSuper = &super::__SGetClass();\n  145  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  167  {\n  168              \tHX_STACKFRAME(&_hx_pos_58465ca8ab419233_1_boot)\n  169: HXDLIN(   1)\t\tresourceName = HX_(\"__ASSET__:bitmap_flixel_system_debug_GraphicBitmapLog\",6c,ac,7b,3e);\n  170              \t}\n  171  }\n  ...\n  173  } // end namespace flixel\n  174  } // end namespace system\n  175: } // end namespace debug\n  176  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/GraphicCloseButton.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_GraphicCloseButton\n    5: #include <flixel/system/debug/GraphicCloseButton.h>\n    6  #endif\n    7  #ifndef INCLUDED_haxe_Resource\n    .\n   33  #endif\n   34  \n   35: HX_DEFINE_STACK_FRAME(_hx_pos_53fef0e5072e635d_51_new,\"flixel.system.debug.GraphicCloseButton\",\"new\",0xf0ec029c,\"flixel.system.debug.GraphicCloseButton.new\",\"openfl/_internal/macros/AssetsMacro.hx\",51,0xf7db08ab)\n   36: HX_LOCAL_STACK_FRAME(_hx_pos_f3bdba00b85a0c40_1_boot,\"flixel.system.debug.GraphicCloseButton\",\"boot\",0xd5af4676,\"flixel.system.debug.GraphicCloseButton.boot\",\"?\",1,0x0000003f)\n   37  namespace flixel{\n   38  namespace _hx_system{\n   39: namespace debug{\n   40  \n   41  void GraphicCloseButton_obj::__construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA){\n   ..\n   44              \tHX_STACKFRAME(&_hx_pos_53fef0e5072e635d_51_new)\n   45  HXLINE(  83)\t\tsuper::__construct((int)0,(int)0,transparent,fillRGBA);\n   46: HXLINE(  85)\t\t ::openfl::utils::ByteArrayData byteArray = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(::haxe::Resource_obj::getBytes(::flixel::_hx_system::debug::GraphicCloseButton_obj::resourceName));\n   47  HXLINE(  86)\t\t{\n   48  HXLINE(  86)\t\t\t ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(byteArray));\n   ..\n   80  \n   81  hx::ObjectPtr< GraphicCloseButton_obj > GraphicCloseButton_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA) {\n   82: \tGraphicCloseButton_obj *__this = (GraphicCloseButton_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GraphicCloseButton_obj), true, \"flixel.system.debug.GraphicCloseButton\"));\n   83  \t*(void **)__this = GraphicCloseButton_obj::_hx_vtable;\n   84  \t__this->__construct(width,height,__o_transparent,__o_fillRGBA);\n   ..\n  141  \tGraphicCloseButton_obj::_hx_vtable = *(void **)dummy;\n  142  \thx::Static(__mClass) = new hx::Class_obj();\n  143: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.GraphicCloseButton\",\"\\xaa\",\"\\xc4\",\"\\xdf\",\"\\x0a\");\n  144  \t__mClass->mSuper = &super::__SGetClass();\n  145  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  167  {\n  168              \tHX_STACKFRAME(&_hx_pos_f3bdba00b85a0c40_1_boot)\n  169: HXDLIN(   1)\t\tresourceName = HX_(\"__ASSET__:bitmap_flixel_system_debug_GraphicCloseButton\",21,6c,f7,70);\n  170              \t}\n  171  }\n  ...\n  173  } // end namespace flixel\n  174  } // end namespace system\n  175: } // end namespace debug\n  176  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/GraphicConsole.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_GraphicConsole\n    5: #include <flixel/system/debug/GraphicConsole.h>\n    6  #endif\n    7  #ifndef INCLUDED_haxe_Resource\n    .\n   33  #endif\n   34  \n   35: HX_DEFINE_STACK_FRAME(_hx_pos_eab8ba370276b5f9_51_new,\"flixel.system.debug.GraphicConsole\",\"new\",0x7eeec0a9,\"flixel.system.debug.GraphicConsole.new\",\"openfl/_internal/macros/AssetsMacro.hx\",51,0xf7db08ab)\n   36: HX_LOCAL_STACK_FRAME(_hx_pos_b02426d1b5da1b26_1_boot,\"flixel.system.debug.GraphicConsole\",\"boot\",0x8a12d3c9,\"flixel.system.debug.GraphicConsole.boot\",\"?\",1,0x0000003f)\n   37  namespace flixel{\n   38  namespace _hx_system{\n   39: namespace debug{\n   40  \n   41  void GraphicConsole_obj::__construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA){\n   ..\n   44              \tHX_STACKFRAME(&_hx_pos_eab8ba370276b5f9_51_new)\n   45  HXLINE(  83)\t\tsuper::__construct((int)0,(int)0,transparent,fillRGBA);\n   46: HXLINE(  85)\t\t ::openfl::utils::ByteArrayData byteArray = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(::haxe::Resource_obj::getBytes(::flixel::_hx_system::debug::GraphicConsole_obj::resourceName));\n   47  HXLINE(  86)\t\t{\n   48  HXLINE(  86)\t\t\t ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(byteArray));\n   ..\n   80  \n   81  hx::ObjectPtr< GraphicConsole_obj > GraphicConsole_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA) {\n   82: \tGraphicConsole_obj *__this = (GraphicConsole_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GraphicConsole_obj), true, \"flixel.system.debug.GraphicConsole\"));\n   83  \t*(void **)__this = GraphicConsole_obj::_hx_vtable;\n   84  \t__this->__construct(width,height,__o_transparent,__o_fillRGBA);\n   ..\n  141  \tGraphicConsole_obj::_hx_vtable = *(void **)dummy;\n  142  \thx::Static(__mClass) = new hx::Class_obj();\n  143: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.GraphicConsole\",\"\\x37\",\"\\x38\",\"\\x2d\",\"\\x2a\");\n  144  \t__mClass->mSuper = &super::__SGetClass();\n  145  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  167  {\n  168              \tHX_STACKFRAME(&_hx_pos_b02426d1b5da1b26_1_boot)\n  169: HXDLIN(   1)\t\tresourceName = HX_(\"__ASSET__:bitmap_flixel_system_debug_GraphicConsole\",2e,18,f0,f3);\n  170              \t}\n  171  }\n  ...\n  173  } // end namespace flixel\n  174  } // end namespace system\n  175: } // end namespace debug\n  176  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/GraphicInteractive.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_GraphicInteractive\n    5: #include <flixel/system/debug/GraphicInteractive.h>\n    6  #endif\n    7  #ifndef INCLUDED_haxe_Resource\n    .\n   33  #endif\n   34  \n   35: HX_DEFINE_STACK_FRAME(_hx_pos_01770103e533b660_51_new,\"flixel.system.debug.GraphicInteractive\",\"new\",0x8c45a4b4,\"flixel.system.debug.GraphicInteractive.new\",\"openfl/_internal/macros/AssetsMacro.hx\",51,0xf7db08ab)\n   36: HX_LOCAL_STACK_FRAME(_hx_pos_1feb984ebe451c64_1_boot,\"flixel.system.debug.GraphicInteractive\",\"boot\",0x28c3795e,\"flixel.system.debug.GraphicInteractive.boot\",\"?\",1,0x0000003f)\n   37  namespace flixel{\n   38  namespace _hx_system{\n   39: namespace debug{\n   40  \n   41  void GraphicInteractive_obj::__construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA){\n   ..\n   44              \tHX_STACKFRAME(&_hx_pos_01770103e533b660_51_new)\n   45  HXLINE(  83)\t\tsuper::__construct((int)0,(int)0,transparent,fillRGBA);\n   46: HXLINE(  85)\t\t ::openfl::utils::ByteArrayData byteArray = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(::haxe::Resource_obj::getBytes(::flixel::_hx_system::debug::GraphicInteractive_obj::resourceName));\n   47  HXLINE(  86)\t\t{\n   48  HXLINE(  86)\t\t\t ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(byteArray));\n   ..\n   80  \n   81  hx::ObjectPtr< GraphicInteractive_obj > GraphicInteractive_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA) {\n   82: \tGraphicInteractive_obj *__this = (GraphicInteractive_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GraphicInteractive_obj), true, \"flixel.system.debug.GraphicInteractive\"));\n   83  \t*(void **)__this = GraphicInteractive_obj::_hx_vtable;\n   84  \t__this->__construct(width,height,__o_transparent,__o_fillRGBA);\n   ..\n  141  \tGraphicInteractive_obj::_hx_vtable = *(void **)dummy;\n  142  \thx::Static(__mClass) = new hx::Class_obj();\n  143: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.GraphicInteractive\",\"\\xc2\",\"\\x7a\",\"\\x08\",\"\\xb3\");\n  144  \t__mClass->mSuper = &super::__SGetClass();\n  145  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  167  {\n  168              \tHX_STACKFRAME(&_hx_pos_1feb984ebe451c64_1_boot)\n  169: HXDLIN(   1)\t\tresourceName = HX_(\"__ASSET__:bitmap_flixel_system_debug_GraphicInteractive\",39,22,20,19);\n  170              \t}\n  171  }\n  ...\n  173  } // end namespace flixel\n  174  } // end namespace system\n  175: } // end namespace debug\n  176  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/GraphicLog.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_GraphicLog\n    5: #include <flixel/system/debug/GraphicLog.h>\n    6  #endif\n    7  #ifndef INCLUDED_haxe_Resource\n    .\n   33  #endif\n   34  \n   35: HX_DEFINE_STACK_FRAME(_hx_pos_5ae997da324ec5f7_51_new,\"flixel.system.debug.GraphicLog\",\"new\",0x6b03d456,\"flixel.system.debug.GraphicLog.new\",\"openfl/_internal/macros/AssetsMacro.hx\",51,0xf7db08ab)\n   36: HX_LOCAL_STACK_FRAME(_hx_pos_15b85df1e23b5223_1_boot,\"flixel.system.debug.GraphicLog\",\"boot\",0x306ef77c,\"flixel.system.debug.GraphicLog.boot\",\"?\",1,0x0000003f)\n   37  namespace flixel{\n   38  namespace _hx_system{\n   39: namespace debug{\n   40  \n   41  void GraphicLog_obj::__construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA){\n   ..\n   44              \tHX_STACKFRAME(&_hx_pos_5ae997da324ec5f7_51_new)\n   45  HXLINE(  83)\t\tsuper::__construct((int)0,(int)0,transparent,fillRGBA);\n   46: HXLINE(  85)\t\t ::openfl::utils::ByteArrayData byteArray = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(::haxe::Resource_obj::getBytes(::flixel::_hx_system::debug::GraphicLog_obj::resourceName));\n   47  HXLINE(  86)\t\t{\n   48  HXLINE(  86)\t\t\t ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(byteArray));\n   ..\n   80  \n   81  hx::ObjectPtr< GraphicLog_obj > GraphicLog_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA) {\n   82: \tGraphicLog_obj *__this = (GraphicLog_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GraphicLog_obj), true, \"flixel.system.debug.GraphicLog\"));\n   83  \t*(void **)__this = GraphicLog_obj::_hx_vtable;\n   84  \t__this->__construct(width,height,__o_transparent,__o_fillRGBA);\n   ..\n  141  \tGraphicLog_obj::_hx_vtable = *(void **)dummy;\n  142  \thx::Static(__mClass) = new hx::Class_obj();\n  143: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.GraphicLog\",\"\\x64\",\"\\xb1\",\"\\x09\",\"\\x13\");\n  144  \t__mClass->mSuper = &super::__SGetClass();\n  145  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  167  {\n  168              \tHX_STACKFRAME(&_hx_pos_15b85df1e23b5223_1_boot)\n  169: HXDLIN(   1)\t\tresourceName = HX_(\"__ASSET__:bitmap_flixel_system_debug_GraphicLog\",db,89,51,9b);\n  170              \t}\n  171  }\n  ...\n  173  } // end namespace flixel\n  174  } // end namespace system\n  175: } // end namespace debug\n  176  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/GraphicStats.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_GraphicStats\n    5: #include <flixel/system/debug/GraphicStats.h>\n    6  #endif\n    7  #ifndef INCLUDED_haxe_Resource\n    .\n   33  #endif\n   34  \n   35: HX_DEFINE_STACK_FRAME(_hx_pos_93213708f98f37de_51_new,\"flixel.system.debug.GraphicStats\",\"new\",0xb5925771,\"flixel.system.debug.GraphicStats.new\",\"openfl/_internal/macros/AssetsMacro.hx\",51,0xf7db08ab)\n   36: HX_LOCAL_STACK_FRAME(_hx_pos_f1c5fdc734e3a086_1_boot,\"flixel.system.debug.GraphicStats\",\"boot\",0x22932c01,\"flixel.system.debug.GraphicStats.boot\",\"?\",1,0x0000003f)\n   37  namespace flixel{\n   38  namespace _hx_system{\n   39: namespace debug{\n   40  \n   41  void GraphicStats_obj::__construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA){\n   ..\n   44              \tHX_STACKFRAME(&_hx_pos_93213708f98f37de_51_new)\n   45  HXLINE(  83)\t\tsuper::__construct((int)0,(int)0,transparent,fillRGBA);\n   46: HXLINE(  85)\t\t ::openfl::utils::ByteArrayData byteArray = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(::haxe::Resource_obj::getBytes(::flixel::_hx_system::debug::GraphicStats_obj::resourceName));\n   47  HXLINE(  86)\t\t{\n   48  HXLINE(  86)\t\t\t ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(byteArray));\n   ..\n   80  \n   81  hx::ObjectPtr< GraphicStats_obj > GraphicStats_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA) {\n   82: \tGraphicStats_obj *__this = (GraphicStats_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GraphicStats_obj), true, \"flixel.system.debug.GraphicStats\"));\n   83  \t*(void **)__this = GraphicStats_obj::_hx_vtable;\n   84  \t__this->__construct(width,height,__o_transparent,__o_fillRGBA);\n   ..\n  141  \tGraphicStats_obj::_hx_vtable = *(void **)dummy;\n  142  \thx::Static(__mClass) = new hx::Class_obj();\n  143: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.GraphicStats\",\"\\xff\",\"\\xca\",\"\\xfb\",\"\\x38\");\n  144  \t__mClass->mSuper = &super::__SGetClass();\n  145  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  167  {\n  168              \tHX_STACKFRAME(&_hx_pos_f1c5fdc734e3a086_1_boot)\n  169: HXDLIN(   1)\t\tresourceName = HX_(\"__ASSET__:bitmap_flixel_system_debug_GraphicStats\",36,ef,43,45);\n  170              \t}\n  171  }\n  ...\n  173  } // end namespace flixel\n  174  } // end namespace system\n  175: } // end namespace debug\n  176  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/GraphicWatch.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_GraphicWatch\n    5: #include <flixel/system/debug/GraphicWatch.h>\n    6  #endif\n    7  #ifndef INCLUDED_haxe_Resource\n    .\n   33  #endif\n   34  \n   35: HX_DEFINE_STACK_FRAME(_hx_pos_b781ad82103fce18_51_new,\"flixel.system.debug.GraphicWatch\",\"new\",0xb737cfa1,\"flixel.system.debug.GraphicWatch.new\",\"openfl/_internal/macros/AssetsMacro.hx\",51,0xf7db08ab)\n   36: HX_LOCAL_STACK_FRAME(_hx_pos_3c0477ee7bfdb1b1_1_boot,\"flixel.system.debug.GraphicWatch\",\"boot\",0x91b6ddd1,\"flixel.system.debug.GraphicWatch.boot\",\"?\",1,0x0000003f)\n   37  namespace flixel{\n   38  namespace _hx_system{\n   39: namespace debug{\n   40  \n   41  void GraphicWatch_obj::__construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA){\n   ..\n   44              \tHX_STACKFRAME(&_hx_pos_b781ad82103fce18_51_new)\n   45  HXLINE(  83)\t\tsuper::__construct((int)0,(int)0,transparent,fillRGBA);\n   46: HXLINE(  85)\t\t ::openfl::utils::ByteArrayData byteArray = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(::haxe::Resource_obj::getBytes(::flixel::_hx_system::debug::GraphicWatch_obj::resourceName));\n   47  HXLINE(  86)\t\t{\n   48  HXLINE(  86)\t\t\t ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(byteArray));\n   ..\n   80  \n   81  hx::ObjectPtr< GraphicWatch_obj > GraphicWatch_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA) {\n   82: \tGraphicWatch_obj *__this = (GraphicWatch_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GraphicWatch_obj), true, \"flixel.system.debug.GraphicWatch\"));\n   83  \t*(void **)__this = GraphicWatch_obj::_hx_vtable;\n   84  \t__this->__construct(width,height,__o_transparent,__o_fillRGBA);\n   ..\n  141  \tGraphicWatch_obj::_hx_vtable = *(void **)dummy;\n  142  \thx::Static(__mClass) = new hx::Class_obj();\n  143: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.GraphicWatch\",\"\\x2f\",\"\\x6b\",\"\\x15\",\"\\x7a\");\n  144  \t__mClass->mSuper = &super::__SGetClass();\n  145  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  167  {\n  168              \tHX_STACKFRAME(&_hx_pos_3c0477ee7bfdb1b1_1_boot)\n  169: HXDLIN(   1)\t\tresourceName = HX_(\"__ASSET__:bitmap_flixel_system_debug_GraphicWatch\",66,8f,5d,86);\n  170              \t}\n  171  }\n  ...\n  173  } // end namespace flixel\n  174  } // end namespace system\n  175: } // end namespace debug\n  176  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/Tooltip.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_Tooltip\n    5: #include <flixel/system/debug/Tooltip.h>\n    6  #endif\n    7: #ifndef INCLUDED_flixel_system_debug_TooltipOverlay\n    8: #include <flixel/system/debug/TooltipOverlay.h>\n    9  #endif\n   10  #ifndef INCLUDED_openfl_display_DisplayObject\n   ..\n   30  #endif\n   31  \n   32: HX_LOCAL_STACK_FRAME(_hx_pos_e11c5e295c1ca4dc_23_init,\"flixel.system.debug.Tooltip\",\"init\",0xd1581303,\"flixel.system.debug.Tooltip.init\",\"flixel/system/debug/Tooltip.hx\",23,0x5d425da4)\n   33: HX_LOCAL_STACK_FRAME(_hx_pos_e11c5e295c1ca4dc_27_add,\"flixel.system.debug.Tooltip\",\"add\",0xdf9f998e,\"flixel.system.debug.Tooltip.add\",\"flixel/system/debug/Tooltip.hx\",27,0x5d425da4)\n   34: HX_LOCAL_STACK_FRAME(_hx_pos_e11c5e295c1ca4dc_35_remove,\"flixel.system.debug.Tooltip\",\"remove\",0x530196f7,\"flixel.system.debug.Tooltip.remove\",\"flixel/system/debug/Tooltip.hx\",35,0x5d425da4)\n   35: HX_LOCAL_STACK_FRAME(_hx_pos_e11c5e295c1ca4dc_18_boot,\"flixel.system.debug.Tooltip\",\"boot\",0xccb85c25,\"flixel.system.debug.Tooltip.boot\",\"flixel/system/debug/Tooltip.hx\",18,0x5d425da4)\n   36  namespace flixel{\n   37  namespace _hx_system{\n   38: namespace debug{\n   39  \n   40  void Tooltip_obj::__construct() { }\n   ..\n   61  void Tooltip_obj::init( ::openfl::display::Sprite container){\n   62              \tHX_STACKFRAME(&_hx_pos_e11c5e295c1ca4dc_23_init)\n   63: HXDLIN(  23)\t\t::flixel::_hx_system::debug::Tooltip_obj::_container = container;\n   64              \t}\n   65  \n   ..\n   69  void Tooltip_obj::add( ::openfl::display::Sprite element,::String text){\n   70              \tHX_GC_STACKFRAME(&_hx_pos_e11c5e295c1ca4dc_27_add)\n   71: HXLINE(  28)\t\t ::flixel::_hx_system::debug::TooltipOverlay tooltip =  ::flixel::_hx_system::debug::TooltipOverlay_obj::__alloc( HX_CTX ,element,text,null(),null());\n   72: HXLINE(  30)\t\t::flixel::_hx_system::debug::Tooltip_obj::_container->addChild(tooltip);\n   73: HXLINE(  31)\t\t::flixel::_hx_system::debug::Tooltip_obj::_tooltips->push(tooltip);\n   74              \t}\n   75  \n   ..\n   82  HXLINE(  38)\t\t{\n   83  HXLINE(  38)\t\t\tint _g1 = (int)0;\n   84: HXDLIN(  38)\t\t\tint _g = ::flixel::_hx_system::debug::Tooltip_obj::_tooltips->length;\n   85  HXDLIN(  38)\t\t\twhile((_g1 < _g)){\n   86  HXLINE(  38)\t\t\t\t_g1 = (_g1 + (int)1);\n   87  HXDLIN(  38)\t\t\t\tint i = (_g1 - (int)1);\n   88  HXLINE(  40)\t\t\t\tbool _hx_tmp;\n   89: HXDLIN(  40)\t\t\t\tif (hx::IsNotNull( ::flixel::_hx_system::debug::Tooltip_obj::_tooltips->__get(i).StaticCast<  ::flixel::_hx_system::debug::TooltipOverlay >() )) {\n   90: HXLINE(  40)\t\t\t\t\t_hx_tmp = hx::IsEq( ::flixel::_hx_system::debug::Tooltip_obj::_tooltips->__get(i).StaticCast<  ::flixel::_hx_system::debug::TooltipOverlay >()->owner,element );\n   91              \t\t\t\t}\n   92              \t\t\t\telse {\n   ..\n   94              \t\t\t\t}\n   95  HXDLIN(  40)\t\t\t\tif (_hx_tmp) {\n   96: HXLINE(  42)\t\t\t\t\t ::flixel::_hx_system::debug::TooltipOverlay tooltip = ::flixel::_hx_system::debug::Tooltip_obj::_tooltips->splice(i,(int)1)->__get((int)0).StaticCast<  ::flixel::_hx_system::debug::TooltipOverlay >();\n   97  HXLINE(  43)\t\t\t\t\ttooltip->destroy();\n   98  HXLINE(  44)\t\t\t\t\tremoved = true;\n   ..\n  186  \tTooltip_obj::_hx_vtable = *(void **)dummy;\n  187  \thx::Static(__mClass) = new hx::Class_obj();\n  188: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.Tooltip\",\"\\x5b\",\"\\x8d\",\"\\xac\",\"\\x95\");\n  189  \t__mClass->mSuper = &super::__SGetClass();\n  190  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  218  } // end namespace flixel\n  219  } // end namespace system\n  220: } // end namespace debug\n  221  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/TooltipOverlay.cpp:\n    9  #include <Std.h>\n   10  #endif\n   11: #ifndef INCLUDED_flixel_system_debug_DebuggerUtil\n   12: #include <flixel/system/debug/DebuggerUtil.h>\n   13  #endif\n   14: #ifndef INCLUDED_flixel_system_debug_TooltipOverlay\n   15: #include <flixel/system/debug/TooltipOverlay.h>\n   16  #endif\n   17  #ifndef INCLUDED_flixel_util_FlxDestroyUtil\n   ..\n   70  #endif\n   71  \n   72: HX_DEFINE_STACK_FRAME(_hx_pos_5991393b6edf960d_114_new,\"flixel.system.debug.TooltipOverlay\",\"new\",0x36d00ee7,\"flixel.system.debug.TooltipOverlay.new\",\"flixel/system/debug/Tooltip.hx\",114,0x5d425da4)\n   73: HX_LOCAL_STACK_FRAME(_hx_pos_5991393b6edf960d_144_destroy,\"flixel.system.debug.TooltipOverlay\",\"destroy\",0xdc11bb01,\"flixel.system.debug.TooltipOverlay.destroy\",\"flixel/system/debug/Tooltip.hx\",144,0x5d425da4)\n   74: HX_LOCAL_STACK_FRAME(_hx_pos_5991393b6edf960d_162_resize,\"flixel.system.debug.TooltipOverlay\",\"resize\",0x5bf5a9cd,\"flixel.system.debug.TooltipOverlay.resize\",\"flixel/system/debug/Tooltip.hx\",162,0x5d425da4)\n   75: HX_LOCAL_STACK_FRAME(_hx_pos_5991393b6edf960d_175_reposition,\"flixel.system.debug.TooltipOverlay\",\"reposition\",0xd7a41fb5,\"flixel.system.debug.TooltipOverlay.reposition\",\"flixel/system/debug/Tooltip.hx\",175,0x5d425da4)\n   76: HX_LOCAL_STACK_FRAME(_hx_pos_5991393b6edf960d_182_setVisible,\"flixel.system.debug.TooltipOverlay\",\"setVisible\",0x28454d49,\"flixel.system.debug.TooltipOverlay.setVisible\",\"flixel/system/debug/Tooltip.hx\",182,0x5d425da4)\n   77: HX_LOCAL_STACK_FRAME(_hx_pos_5991393b6edf960d_194_toggleVisible,\"flixel.system.debug.TooltipOverlay\",\"toggleVisible\",0xd0a20885,\"flixel.system.debug.TooltipOverlay.toggleVisible\",\"flixel/system/debug/Tooltip.hx\",194,0x5d425da4)\n   78: HX_LOCAL_STACK_FRAME(_hx_pos_5991393b6edf960d_199_putOnTop,\"flixel.system.debug.TooltipOverlay\",\"putOnTop\",0x10f53180,\"flixel.system.debug.TooltipOverlay.putOnTop\",\"flixel/system/debug/Tooltip.hx\",199,0x5d425da4)\n   79: HX_LOCAL_STACK_FRAME(_hx_pos_5991393b6edf960d_202_update,\"flixel.system.debug.TooltipOverlay\",\"update\",0xda7fd5e2,\"flixel.system.debug.TooltipOverlay.update\",\"flixel/system/debug/Tooltip.hx\",202,0x5d425da4)\n   80: HX_LOCAL_STACK_FRAME(_hx_pos_5991393b6edf960d_208_updateSize,\"flixel.system.debug.TooltipOverlay\",\"updateSize\",0x374a3bc3,\"flixel.system.debug.TooltipOverlay.updateSize\",\"flixel/system/debug/Tooltip.hx\",208,0x5d425da4)\n   81: HX_LOCAL_STACK_FRAME(_hx_pos_5991393b6edf960d_219_ensureOnScreen,\"flixel.system.debug.TooltipOverlay\",\"ensureOnScreen\",0xbc6422a2,\"flixel.system.debug.TooltipOverlay.ensureOnScreen\",\"flixel/system/debug/Tooltip.hx\",219,0x5d425da4)\n   82: HX_LOCAL_STACK_FRAME(_hx_pos_5991393b6edf960d_236_handleMouseEvents,\"flixel.system.debug.TooltipOverlay\",\"handleMouseEvents\",0x22de651d,\"flixel.system.debug.TooltipOverlay.handleMouseEvents\",\"flixel/system/debug/Tooltip.hx\",236,0x5d425da4)\n   83: HX_LOCAL_STACK_FRAME(_hx_pos_5991393b6edf960d_61_boot,\"flixel.system.debug.TooltipOverlay\",\"boot\",0xb755fbcb,\"flixel.system.debug.TooltipOverlay.boot\",\"flixel/system/debug/Tooltip.hx\",61,0x5d425da4)\n   84: HX_LOCAL_STACK_FRAME(_hx_pos_5991393b6edf960d_66_boot,\"flixel.system.debug.TooltipOverlay\",\"boot\",0xb755fbcb,\"flixel.system.debug.TooltipOverlay.boot\",\"flixel/system/debug/Tooltip.hx\",66,0x5d425da4)\n   85: HX_LOCAL_STACK_FRAME(_hx_pos_5991393b6edf960d_71_boot,\"flixel.system.debug.TooltipOverlay\",\"boot\",0xb755fbcb,\"flixel.system.debug.TooltipOverlay.boot\",\"flixel/system/debug/Tooltip.hx\",71,0x5d425da4)\n   86: HX_LOCAL_STACK_FRAME(_hx_pos_5991393b6edf960d_76_boot,\"flixel.system.debug.TooltipOverlay\",\"boot\",0xb755fbcb,\"flixel.system.debug.TooltipOverlay.boot\",\"flixel/system/debug/Tooltip.hx\",76,0x5d425da4)\n   87  namespace flixel{\n   88  namespace _hx_system{\n   89: namespace debug{\n   90  \n   91  void TooltipOverlay_obj::__construct( ::openfl::display::Sprite target,::String text,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height){\n   ..\n   98  HXLINE( 121)\t\tthis->_shadow =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)1,(int)2,true,(int)-16777216),null(),null());\n   99  HXLINE( 122)\t\tthis->_background =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)1,(int)1,true,(int)-12961222),null(),null());\n  100: HXLINE( 124)\t\tthis->_text = ::flixel::_hx_system::debug::DebuggerUtil_obj::createTextField((int)2,(int)1,null(),null());\n  101  HXLINE( 125)\t\tthis->_text->set_alpha(((Float)0.8));\n  102  HXLINE( 126)\t\tthis->_text->set_text(text);\n  ...\n  280              \t\t}\n  281  HXLINE( 230)\t\t{\n  282: HXLINE( 230)\t\t\t ::flixel::_hx_system::debug::TooltipOverlay _g = hx::ObjectPtr<OBJ_>(this);\n  283  HXDLIN( 230)\t\t\t_g->set_x((_g->get_x() + offsetX));\n  284              \t\t}\n  285  HXLINE( 231)\t\t{\n  286: HXLINE( 231)\t\t\t ::flixel::_hx_system::debug::TooltipOverlay _g1 = hx::ObjectPtr<OBJ_>(this);\n  287  HXDLIN( 231)\t\t\t_g1->set_y((_g1->get_y() + offsetY));\n  288              \t\t}\n  ...\n  332  \n  333  hx::ObjectPtr< TooltipOverlay_obj > TooltipOverlay_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::Sprite target,::String text,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height) {\n  334: \tTooltipOverlay_obj *__this = (TooltipOverlay_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TooltipOverlay_obj), true, \"flixel.system.debug.TooltipOverlay\"));\n  335  \t*(void **)__this = TooltipOverlay_obj::_hx_vtable;\n  336  \t__this->__construct(target,text,__o_width,__o_height);\n  ...\n  516  \tTooltipOverlay_obj::_hx_vtable = *(void **)dummy;\n  517  \thx::Static(__mClass) = new hx::Class_obj();\n  518: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.TooltipOverlay\",\"\\x75\",\"\\x0f\",\"\\xff\",\"\\x4b\");\n  519  \t__mClass->mSuper = &super::__SGetClass();\n  520  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  560  } // end namespace flixel\n  561  } // end namespace system\n  562: } // end namespace debug\n  563  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/Window.cpp:\n   12  #include <flixel/FlxG.h>\n   13  #endif\n   14: #ifndef INCLUDED_flixel_system_debug_DebuggerUtil\n   15: #include <flixel/system/debug/DebuggerUtil.h>\n   16  #endif\n   17: #ifndef INCLUDED_flixel_system_debug_GraphicCloseButton\n   18: #include <flixel/system/debug/GraphicCloseButton.h>\n   19  #endif\n   20: #ifndef INCLUDED_flixel_system_debug_Window\n   21: #include <flixel/system/debug/Window.h>\n   22  #endif\n   23: #ifndef INCLUDED_flixel_system_debug__Window_GraphicWindowHandle\n   24: #include <flixel/system/debug/_Window/GraphicWindowHandle.h>\n   25  #endif\n   26  #ifndef INCLUDED_flixel_system_ui_FlxSystemButton\n   ..\n   91  #endif\n   92  \n   93: HX_DEFINE_STACK_FRAME(_hx_pos_4e51d5a8805713a4_97_new,\"flixel.system.debug.Window\",\"new\",0x5aefd38a,\"flixel.system.debug.Window.new\",\"flixel/system/debug/Window.hx\",97,0xb8dfd4e5)\n   94: HX_LOCAL_STACK_FRAME(_hx_pos_4e51d5a8805713a4_166_destroy,\"flixel.system.debug.Window\",\"destroy\",0x5fb40d24,\"flixel.system.debug.Window.destroy\",\"flixel/system/debug/Window.hx\",166,0xb8dfd4e5)\n   95: HX_LOCAL_STACK_FRAME(_hx_pos_4e51d5a8805713a4_220_resize,\"flixel.system.debug.Window\",\"resize\",0x4ec62d0a,\"flixel.system.debug.Window.resize\",\"flixel/system/debug/Window.hx\",220,0xb8dfd4e5)\n   96: HX_LOCAL_STACK_FRAME(_hx_pos_4e51d5a8805713a4_233_reposition,\"flixel.system.debug.Window\",\"reposition\",0x0fe38572,\"flixel.system.debug.Window.reposition\",\"flixel/system/debug/Window.hx\",233,0xb8dfd4e5)\n   97: HX_LOCAL_STACK_FRAME(_hx_pos_4e51d5a8805713a4_240_updateBounds,\"flixel.system.debug.Window\",\"updateBounds\",0x436474f4,\"flixel.system.debug.Window.updateBounds\",\"flixel/system/debug/Window.hx\",240,0xb8dfd4e5)\n   98: HX_LOCAL_STACK_FRAME(_hx_pos_4e51d5a8805713a4_253_setVisible,\"flixel.system.debug.Window\",\"setVisible\",0x6084b306,\"flixel.system.debug.Window.setVisible\",\"flixel/system/debug/Window.hx\",253,0xb8dfd4e5)\n   99: HX_LOCAL_STACK_FRAME(_hx_pos_4e51d5a8805713a4_271_toggleVisible,\"flixel.system.debug.Window\",\"toggleVisible\",0x493d16e8,\"flixel.system.debug.Window.toggleVisible\",\"flixel/system/debug/Window.hx\",271,0xb8dfd4e5)\n  100: HX_LOCAL_STACK_FRAME(_hx_pos_4e51d5a8805713a4_276_putOnTop,\"flixel.system.debug.Window\",\"putOnTop\",0xbb5abdfd,\"flixel.system.debug.Window.putOnTop\",\"flixel/system/debug/Window.hx\",276,0xb8dfd4e5)\n  101: HX_LOCAL_STACK_FRAME(_hx_pos_4e51d5a8805713a4_281_loadSaveData,\"flixel.system.debug.Window\",\"loadSaveData\",0x8d0923e3,\"flixel.system.debug.Window.loadSaveData\",\"flixel/system/debug/Window.hx\",281,0xb8dfd4e5)\n  102: HX_LOCAL_STACK_FRAME(_hx_pos_4e51d5a8805713a4_293_initSaveData,\"flixel.system.debug.Window\",\"initSaveData\",0x7856becd,\"flixel.system.debug.Window.initSaveData\",\"flixel/system/debug/Window.hx\",293,0xb8dfd4e5)\n  103: HX_LOCAL_STACK_FRAME(_hx_pos_4e51d5a8805713a4_303_update,\"flixel.system.debug.Window\",\"update\",0xcd50591f,\"flixel.system.debug.Window.update\",\"flixel/system/debug/Window.hx\",303,0xb8dfd4e5)\n  104: HX_LOCAL_STACK_FRAME(_hx_pos_4e51d5a8805713a4_311_init,\"flixel.system.debug.Window\",\"init\",0x33a1fca6,\"flixel.system.debug.Window.init\",\"flixel/system/debug/Window.hx\",311,0xb8dfd4e5)\n  105: HX_LOCAL_STACK_FRAME(_hx_pos_4e51d5a8805713a4_333_onMouseMove,\"flixel.system.debug.Window\",\"onMouseMove\",0xdd6abbe1,\"flixel.system.debug.Window.onMouseMove\",\"flixel/system/debug/Window.hx\",333,0xb8dfd4e5)\n  106: HX_LOCAL_STACK_FRAME(_hx_pos_4e51d5a8805713a4_373_onMouseDown,\"flixel.system.debug.Window\",\"onMouseDown\",0xd777d132,\"flixel.system.debug.Window.onMouseDown\",\"flixel/system/debug/Window.hx\",373,0xb8dfd4e5)\n  107: HX_LOCAL_STACK_FRAME(_hx_pos_4e51d5a8805713a4_393_onMouseUp,\"flixel.system.debug.Window\",\"onMouseUp\",0x62a36b2b,\"flixel.system.debug.Window.onMouseUp\",\"flixel/system/debug/Window.hx\",393,0xb8dfd4e5)\n  108: HX_LOCAL_STACK_FRAME(_hx_pos_4e51d5a8805713a4_403_bound,\"flixel.system.debug.Window\",\"bound\",0xf2ff51e8,\"flixel.system.debug.Window.bound\",\"flixel/system/debug/Window.hx\",403,0xb8dfd4e5)\n  109: HX_LOCAL_STACK_FRAME(_hx_pos_4e51d5a8805713a4_414_updateSize,\"flixel.system.debug.Window\",\"updateSize\",0x6f89a180,\"flixel.system.debug.Window.updateSize\",\"flixel/system/debug/Window.hx\",414,0xb8dfd4e5)\n  110: HX_LOCAL_STACK_FRAME(_hx_pos_4e51d5a8805713a4_438_close,\"flixel.system.debug.Window\",\"close\",0x8465b962,\"flixel.system.debug.Window.close\",\"flixel/system/debug/Window.hx\",438,0xb8dfd4e5)\n  111: HX_LOCAL_STACK_FRAME(_hx_pos_4e51d5a8805713a4_29_boot,\"flixel.system.debug.Window\",\"boot\",0x2f0245c8,\"flixel.system.debug.Window.boot\",\"flixel/system/debug/Window.hx\",29,0xb8dfd4e5)\n  112: HX_LOCAL_STACK_FRAME(_hx_pos_4e51d5a8805713a4_31_boot,\"flixel.system.debug.Window\",\"boot\",0x2f0245c8,\"flixel.system.debug.Window.boot\",\"flixel/system/debug/Window.hx\",31,0xb8dfd4e5)\n  113: HX_LOCAL_STACK_FRAME(_hx_pos_4e51d5a8805713a4_32_boot,\"flixel.system.debug.Window\",\"boot\",0x2f0245c8,\"flixel.system.debug.Window.boot\",\"flixel/system/debug/Window.hx\",32,0xb8dfd4e5)\n  114: HX_LOCAL_STACK_FRAME(_hx_pos_4e51d5a8805713a4_33_boot,\"flixel.system.debug.Window\",\"boot\",0x2f0245c8,\"flixel.system.debug.Window.boot\",\"flixel/system/debug/Window.hx\",33,0xb8dfd4e5)\n  115: HX_LOCAL_STACK_FRAME(_hx_pos_4e51d5a8805713a4_38_boot,\"flixel.system.debug.Window\",\"boot\",0x2f0245c8,\"flixel.system.debug.Window.boot\",\"flixel/system/debug/Window.hx\",38,0xb8dfd4e5)\n  116  namespace flixel{\n  117  namespace _hx_system{\n  118: namespace debug{\n  119  \n  120  void Window_obj::__construct(::String Title, ::openfl::display::BitmapData Icon,hx::Null< Float >  __o_Width,hx::Null< Float >  __o_Height,hx::Null< bool >  __o_Resizable, ::openfl::geom::Rectangle Bounds,hx::Null< bool >  __o_Closable){\n  ...\n  137  HXLINE( 112)\t\t ::openfl::display::Bitmap _hx_tmp = this->_background;\n  138  HXDLIN( 112)\t\t_hx_tmp->set_y(this->_header->get_height());\n  139: HXLINE( 114)\t\tthis->_title = ::flixel::_hx_system::debug::DebuggerUtil_obj::createTextField((int)2,(int)-1,null(),null());\n  140  HXLINE( 115)\t\tthis->_title->set_alpha(((Float)0.8));\n  141  HXLINE( 116)\t\tthis->_title->set_text(Title);\n  ...\n  145  HXLINE( 121)\t\tthis->addChild(this->_title);\n  146  HXLINE( 123)\t\tif (hx::IsNotNull( Icon )) {\n  147: HXLINE( 125)\t\t\t::flixel::_hx_system::debug::DebuggerUtil_obj::fixSize(Icon);\n  148  HXLINE( 126)\t\t\t ::openfl::display::Bitmap icon =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,Icon,null(),null());\n  149  HXLINE( 127)\t\t\ticon->set_x((int)5);\n  ...\n  156              \t\t}\n  157  HXLINE( 134)\t\tif (this->_resizable) {\n  158: HXLINE( 136)\t\t\tthis->_handle =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::flixel::_hx_system::debug::DebuggerUtil_obj::fixSize( ::flixel::_hx_system::debug::_Window::GraphicWindowHandle_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null())),null(),null());\n  159  HXLINE( 137)\t\t\tthis->addChild(this->_handle);\n  160              \t\t}\n  161  HXLINE( 140)\t\tif (Closable) {\n  162: HXLINE( 142)\t\t\tthis->_closeButton =  ::flixel::_hx_system::ui::FlxSystemButton_obj::__alloc( HX_CTX , ::flixel::_hx_system::debug::GraphicCloseButton_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null()),this->close_dyn(),null());\n  163  HXLINE( 143)\t\t\tthis->_closeButton->set_alpha(((Float)0.8));\n  164  HXLINE( 144)\t\t\tthis->addChild(this->_closeButton);\n  165              \t\t}\n  166              \t\telse {\n  167: HXLINE( 148)\t\t\tthis->_id = ::flixel::_hx_system::debug::Window_obj::WINDOW_AMOUNT;\n  168  HXLINE( 149)\t\t\tthis->loadSaveData();\n  169: HXLINE( 150)\t\t\t::flixel::_hx_system::debug::Window_obj::WINDOW_AMOUNT++;\n  170              \t\t}\n  171  HXLINE( 153)\t\tbool _hx_tmp3;\n  ...\n  696  \n  697  hx::ObjectPtr< Window_obj > Window_obj::__alloc(hx::Ctx *_hx_ctx,::String Title, ::openfl::display::BitmapData Icon,hx::Null< Float >  __o_Width,hx::Null< Float >  __o_Height,hx::Null< bool >  __o_Resizable, ::openfl::geom::Rectangle Bounds,hx::Null< bool >  __o_Closable) {\n  698: \tWindow_obj *__this = (Window_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Window_obj), true, \"flixel.system.debug.Window\"));\n  699  \t*(void **)__this = Window_obj::_hx_vtable;\n  700  \t__this->__construct(Title,Icon,__o_Width,__o_Height,__o_Resizable,Bounds,__o_Closable);\n  ...\n 1019  \tWindow_obj::_hx_vtable = *(void **)dummy;\n 1020  \thx::Static(__mClass) = new hx::Class_obj();\n 1021: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.Window\",\"\\x98\",\"\\x06\",\"\\x51\",\"\\xd3\");\n 1022  \t__mClass->mSuper = &super::__SGetClass();\n 1023  \t__mClass->mConstructEmpty = &__CreateEmpty;\n ....\n 1067  } // end namespace flixel\n 1068  } // end namespace system\n 1069: } // end namespace debug\n 1070  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/_FlxDebugger/GraphicDrawDebug.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug__FlxDebugger_GraphicDrawDebug\n    5: #include <flixel/system/debug/_FlxDebugger/GraphicDrawDebug.h>\n    6  #endif\n    7  #ifndef INCLUDED_haxe_Resource\n    .\n   33  #endif\n   34  \n   35: HX_DEFINE_STACK_FRAME(_hx_pos_31ea424a3f37e879_51_new,\"flixel.system.debug._FlxDebugger.GraphicDrawDebug\",\"new\",0x07c1b10b,\"flixel.system.debug._FlxDebugger.GraphicDrawDebug.new\",\"openfl/_internal/macros/AssetsMacro.hx\",51,0xf7db08ab)\n   36: HX_LOCAL_STACK_FRAME(_hx_pos_556d217638bfa4fb_1_boot,\"flixel.system.debug._FlxDebugger.GraphicDrawDebug\",\"boot\",0xb9d23927,\"flixel.system.debug._FlxDebugger.GraphicDrawDebug.boot\",\"?\",1,0x0000003f)\n   37  namespace flixel{\n   38  namespace _hx_system{\n   39: namespace debug{\n   40: namespace _FlxDebugger{\n   41  \n   42: void GraphicDrawDebug_obj::__construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA){\n   43   ::Dynamic transparent = __o_transparent.Default(true);\n   44   ::Dynamic fillRGBA = __o_fillRGBA.Default(-1);\n   45              \tHX_STACKFRAME(&_hx_pos_31ea424a3f37e879_51_new)\n   46  HXLINE(  83)\t\tsuper::__construct((int)0,(int)0,transparent,fillRGBA);\n   47: HXLINE(  85)\t\t ::openfl::utils::ByteArrayData byteArray = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(::haxe::Resource_obj::getBytes(::flixel::_hx_system::debug::_FlxDebugger::GraphicDrawDebug_obj::resourceName));\n   48  HXLINE(  86)\t\t{\n   49  HXLINE(  86)\t\t\t ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(byteArray));\n   ..\n   52              \t}\n   53  \n   54: Dynamic GraphicDrawDebug_obj::__CreateEmpty() { return new GraphicDrawDebug_obj; }\n   55  \n   56: void *GraphicDrawDebug_obj::_hx_vtable = 0;\n   57  \n   58: Dynamic GraphicDrawDebug_obj::__Create(hx::DynamicArray inArgs)\n   59  {\n   60: \thx::ObjectPtr< GraphicDrawDebug_obj > _hx_result = new GraphicDrawDebug_obj();\n   61  \t_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);\n   62  \treturn _hx_result;\n   63  }\n   64  \n   65: bool GraphicDrawDebug_obj::_hx_isInstanceOf(int inClassId) {\n   66  \tif (inClassId<=(int)0x28c743a7) {\n   67  \t\treturn inClassId==(int)0x00000001 || inClassId==(int)0x28c743a7;\n   ..\n   71  }\n   72  \n   73: ::String GraphicDrawDebug_obj::resourceName;\n   74  \n   75  \n   76: hx::ObjectPtr< GraphicDrawDebug_obj > GraphicDrawDebug_obj::__new(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA) {\n   77: \thx::ObjectPtr< GraphicDrawDebug_obj > __this = new GraphicDrawDebug_obj();\n   78  \t__this->__construct(width,height,__o_transparent,__o_fillRGBA);\n   79  \treturn __this;\n   80  }\n   81  \n   82: hx::ObjectPtr< GraphicDrawDebug_obj > GraphicDrawDebug_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA) {\n   83: \tGraphicDrawDebug_obj *__this = (GraphicDrawDebug_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GraphicDrawDebug_obj), true, \"flixel.system.debug._FlxDebugger.GraphicDrawDebug\"));\n   84: \t*(void **)__this = GraphicDrawDebug_obj::_hx_vtable;\n   85  \t__this->__construct(width,height,__o_transparent,__o_fillRGBA);\n   86  \treturn __this;\n   87  }\n   88  \n   89: GraphicDrawDebug_obj::GraphicDrawDebug_obj()\n   90  {\n   91  }\n   92  \n   93: bool GraphicDrawDebug_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)\n   94  {\n   95  \tswitch(inName.length) {\n   ..\n  100  }\n  101  \n  102: bool GraphicDrawDebug_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)\n  103  {\n  104  \tswitch(inName.length) {\n  ...\n  110  \n  111  #if HXCPP_SCRIPTABLE\n  112: static hx::StorageInfo *GraphicDrawDebug_obj_sMemberStorageInfo = 0;\n  113: static hx::StaticInfo GraphicDrawDebug_obj_sStaticStorageInfo[] = {\n  114: \t{hx::fsString,(void *) &GraphicDrawDebug_obj::resourceName,HX_HCSTRING(\"resourceName\",\"\\x39\",\"\\x7a\",\"\\x62\",\"\\x90\")},\n  115  \t{ hx::fsUnknown, 0, null()}\n  116  };\n  117  #endif\n  118  \n  119: static void GraphicDrawDebug_obj_sMarkStatics(HX_MARK_PARAMS) {\n  120: \tHX_MARK_MEMBER_NAME(GraphicDrawDebug_obj::__mClass,\"__mClass\");\n  121: \tHX_MARK_MEMBER_NAME(GraphicDrawDebug_obj::resourceName,\"resourceName\");\n  122  };\n  123  \n  124  #ifdef HXCPP_VISIT_ALLOCS\n  125: static void GraphicDrawDebug_obj_sVisitStatics(HX_VISIT_PARAMS) {\n  126: \tHX_VISIT_MEMBER_NAME(GraphicDrawDebug_obj::__mClass,\"__mClass\");\n  127: \tHX_VISIT_MEMBER_NAME(GraphicDrawDebug_obj::resourceName,\"resourceName\");\n  128  };\n  129  \n  130  #endif\n  131  \n  132: hx::Class GraphicDrawDebug_obj::__mClass;\n  133  \n  134: static ::String GraphicDrawDebug_obj_sStaticFields[] = {\n  135  \tHX_HCSTRING(\"resourceName\",\"\\x39\",\"\\x7a\",\"\\x62\",\"\\x90\"),\n  136  \t::String(null())\n  137  };\n  138  \n  139: void GraphicDrawDebug_obj::__register()\n  140  {\n  141: \thx::Object *dummy = new GraphicDrawDebug_obj;\n  142: \tGraphicDrawDebug_obj::_hx_vtable = *(void **)dummy;\n  143  \thx::Static(__mClass) = new hx::Class_obj();\n  144: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug._FlxDebugger.GraphicDrawDebug\",\"\\x99\",\"\\xcf\",\"\\x23\",\"\\x11\");\n  145  \t__mClass->mSuper = &super::__SGetClass();\n  146  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  147  \t__mClass->mConstructArgs = &__Create;\n  148: \t__mClass->mGetStaticField = &GraphicDrawDebug_obj::__GetStatic;\n  149: \t__mClass->mSetStaticField = &GraphicDrawDebug_obj::__SetStatic;\n  150: \t__mClass->mMarkFunc = GraphicDrawDebug_obj_sMarkStatics;\n  151: \t__mClass->mStatics = hx::Class_obj::dupFunctions(GraphicDrawDebug_obj_sStaticFields);\n  152  \t__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);\n  153: \t__mClass->mCanCast = hx::TCanCast< GraphicDrawDebug_obj >;\n  154  #ifdef HXCPP_VISIT_ALLOCS\n  155: \t__mClass->mVisitFunc = GraphicDrawDebug_obj_sVisitStatics;\n  156  #endif\n  157  #ifdef HXCPP_SCRIPTABLE\n  158: \t__mClass->mMemberStorageInfo = GraphicDrawDebug_obj_sMemberStorageInfo;\n  159  #endif\n  160  #ifdef HXCPP_SCRIPTABLE\n  161: \t__mClass->mStaticStorageInfo = GraphicDrawDebug_obj_sStaticStorageInfo;\n  162  #endif\n  163  \thx::_hx_RegisterClass(__mClass->mName, __mClass);\n  164  }\n  165  \n  166: void GraphicDrawDebug_obj::__boot()\n  167  {\n  168  {\n  169              \tHX_STACKFRAME(&_hx_pos_556d217638bfa4fb_1_boot)\n  170: HXDLIN(   1)\t\tresourceName = HX_(\"__ASSET__:bitmap_flixel_system_debug__FlxDebugger_GraphicDrawDebug\",b3,af,96,c5);\n  171              \t}\n  172  }\n  ...\n  174  } // end namespace flixel\n  175  } // end namespace system\n  176: } // end namespace debug\n  177: } // end namespace _FlxDebugger\n  178  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/_FlxDebugger/GraphicFlixel.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug__FlxDebugger_GraphicFlixel\n    5: #include <flixel/system/debug/_FlxDebugger/GraphicFlixel.h>\n    6  #endif\n    7  #ifndef INCLUDED_haxe_Resource\n    .\n   33  #endif\n   34  \n   35: HX_DEFINE_STACK_FRAME(_hx_pos_d000b9282b2956c4_51_new,\"flixel.system.debug._FlxDebugger.GraphicFlixel\",\"new\",0x8777e624,\"flixel.system.debug._FlxDebugger.GraphicFlixel.new\",\"openfl/_internal/macros/AssetsMacro.hx\",51,0xf7db08ab)\n   36: HX_LOCAL_STACK_FRAME(_hx_pos_e391139918871a05_1_boot,\"flixel.system.debug._FlxDebugger.GraphicFlixel\",\"boot\",0xf98a79ee,\"flixel.system.debug._FlxDebugger.GraphicFlixel.boot\",\"?\",1,0x0000003f)\n   37  namespace flixel{\n   38  namespace _hx_system{\n   39: namespace debug{\n   40: namespace _FlxDebugger{\n   41  \n   42  void GraphicFlixel_obj::__construct(int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA){\n   ..\n   45              \tHX_STACKFRAME(&_hx_pos_d000b9282b2956c4_51_new)\n   46  HXLINE(  83)\t\tsuper::__construct((int)0,(int)0,transparent,fillRGBA);\n   47: HXLINE(  85)\t\t ::openfl::utils::ByteArrayData byteArray = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(::haxe::Resource_obj::getBytes(::flixel::_hx_system::debug::_FlxDebugger::GraphicFlixel_obj::resourceName));\n   48  HXLINE(  86)\t\t{\n   49  HXLINE(  86)\t\t\t ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(byteArray));\n   ..\n   81  \n   82  hx::ObjectPtr< GraphicFlixel_obj > GraphicFlixel_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA) {\n   83: \tGraphicFlixel_obj *__this = (GraphicFlixel_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GraphicFlixel_obj), true, \"flixel.system.debug._FlxDebugger.GraphicFlixel\"));\n   84  \t*(void **)__this = GraphicFlixel_obj::_hx_vtable;\n   85  \t__this->__construct(width,height,__o_transparent,__o_fillRGBA);\n   ..\n  142  \tGraphicFlixel_obj::_hx_vtable = *(void **)dummy;\n  143  \thx::Static(__mClass) = new hx::Class_obj();\n  144: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug._FlxDebugger.GraphicFlixel\",\"\\x32\",\"\\x44\",\"\\xc1\",\"\\x6a\");\n  145  \t__mClass->mSuper = &super::__SGetClass();\n  146  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  168  {\n  169              \tHX_STACKFRAME(&_hx_pos_e391139918871a05_1_boot)\n  170: HXDLIN(   1)\t\tresourceName = HX_(\"__ASSET__:bitmap_flixel_system_debug__FlxDebugger_GraphicFlixel\",d8,af,bc,0c);\n  171              \t}\n  172  }\n  ...\n  174  } // end namespace flixel\n  175  } // end namespace system\n  176: } // end namespace debug\n  177: } // end namespace _FlxDebugger\n  178  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/_Window/GraphicWindowHandle.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug__Window_GraphicWindowHandle\n    5: #include <flixel/system/debug/_Window/GraphicWindowHandle.h>\n    6  #endif\n    7  #ifndef INCLUDED_haxe_Resource\n    .\n   33  #endif\n   34  \n   35: HX_DEFINE_STACK_FRAME(_hx_pos_b1cf9e2110693824_51_new,\"flixel.system.debug._Window.GraphicWindowHandle\",\"new\",0x4f36000b,\"flixel.system.debug._Window.GraphicWindowHandle.new\",\"openfl/_internal/macros/AssetsMacro.hx\",51,0xf7db08ab)\n   36: HX_LOCAL_STACK_FRAME(_hx_pos_2cfcd99d9199a9d5_1_boot,\"flixel.system.debug._Window.GraphicWindowHandle\",\"boot\",0xf8230a27,\"flixel.system.debug._Window.GraphicWindowHandle.boot\",\"?\",1,0x0000003f)\n   37  namespace flixel{\n   38  namespace _hx_system{\n   39: namespace debug{\n   40  namespace _Window{\n   41  \n   ..\n   45              \tHX_STACKFRAME(&_hx_pos_b1cf9e2110693824_51_new)\n   46  HXLINE(  83)\t\tsuper::__construct((int)0,(int)0,transparent,fillRGBA);\n   47: HXLINE(  85)\t\t ::openfl::utils::ByteArrayData byteArray = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(::haxe::Resource_obj::getBytes(::flixel::_hx_system::debug::_Window::GraphicWindowHandle_obj::resourceName));\n   48  HXLINE(  86)\t\t{\n   49  HXLINE(  86)\t\t\t ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(byteArray));\n   ..\n   81  \n   82  hx::ObjectPtr< GraphicWindowHandle_obj > GraphicWindowHandle_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA) {\n   83: \tGraphicWindowHandle_obj *__this = (GraphicWindowHandle_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GraphicWindowHandle_obj), true, \"flixel.system.debug._Window.GraphicWindowHandle\"));\n   84  \t*(void **)__this = GraphicWindowHandle_obj::_hx_vtable;\n   85  \t__this->__construct(width,height,__o_transparent,__o_fillRGBA);\n   ..\n  142  \tGraphicWindowHandle_obj::_hx_vtable = *(void **)dummy;\n  143  \thx::Static(__mClass) = new hx::Class_obj();\n  144: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug._Window.GraphicWindowHandle\",\"\\x99\",\"\\x9e\",\"\\x84\",\"\\x36\");\n  145  \t__mClass->mSuper = &super::__SGetClass();\n  146  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  168  {\n  169              \tHX_STACKFRAME(&_hx_pos_2cfcd99d9199a9d5_1_boot)\n  170: HXDLIN(   1)\t\tresourceName = HX_(\"__ASSET__:bitmap_flixel_system_debug__Window_GraphicWindowHandle\",b1,52,a1,65);\n  171              \t}\n  172  }\n  ...\n  174  } // end namespace flixel\n  175  } // end namespace system\n  176: } // end namespace debug\n  177  } // end namespace _Window\n  178  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/completion/CompletionList.cpp:\n   11  #include <StringTools.h>\n   12  #endif\n   13: #ifndef INCLUDED_flixel_system_debug_completion_CompletionList\n   14: #include <flixel/system/debug/completion/CompletionList.h>\n   15  #endif\n   16: #ifndef INCLUDED_flixel_system_debug_completion_CompletionListEntry\n   17: #include <flixel/system/debug/completion/CompletionListEntry.h>\n   18  #endif\n   19: #ifndef INCLUDED_flixel_system_debug_completion_CompletionListScrollBar\n   20: #include <flixel/system/debug/completion/CompletionListScrollBar.h>\n   21  #endif\n   22  #ifndef INCLUDED_lime_app_IModule\n   ..\n   60  #endif\n   61  \n   62: HX_DEFINE_STACK_FRAME(_hx_pos_26f69c8799845277_10_new,\"flixel.system.debug.completion.CompletionList\",\"new\",0x2d62f836,\"flixel.system.debug.completion.CompletionList.new\",\"flixel/system/debug/completion/CompletionList.hx\",10,0x5d64787a)\n   63: HX_LOCAL_STACK_FRAME(_hx_pos_26f69c8799845277_44_show,\"flixel.system.debug.completion.CompletionList\",\"show\",0x8c868867,\"flixel.system.debug.completion.CompletionList.show\",\"flixel/system/debug/completion/CompletionList.hx\",44,0x5d64787a)\n   64: HX_LOCAL_STACK_FRAME(_hx_pos_26f69c8799845277_55_setY,\"flixel.system.debug.completion.CompletionList\",\"setY\",0x8c8445e1,\"flixel.system.debug.completion.CompletionList.setY\",\"flixel/system/debug/completion/CompletionList.hx\",55,0x5d64787a)\n   65: HX_LOCAL_STACK_FRAME(_hx_pos_26f69c8799845277_59_close,\"flixel.system.debug.completion.CompletionList\",\"close\",0x356c610e,\"flixel.system.debug.completion.CompletionList.close\",\"flixel/system/debug/completion/CompletionList.hx\",59,0x5d64787a)\n   66: HX_LOCAL_STACK_FRAME(_hx_pos_26f69c8799845277_69_createPopupEntries,\"flixel.system.debug.completion.CompletionList\",\"createPopupEntries\",0x28517e8a,\"flixel.system.debug.completion.CompletionList.createPopupEntries\",\"flixel/system/debug/completion/CompletionList.hx\",69,0x5d64787a)\n   67: HX_LOCAL_STACK_FRAME(_hx_pos_26f69c8799845277_79_createScrollBar,\"flixel.system.debug.completion.CompletionList\",\"createScrollBar\",0x8887a200,\"flixel.system.debug.completion.CompletionList.createScrollBar\",\"flixel/system/debug/completion/CompletionList.hx\",79,0x5d64787a)\n   68: HX_LOCAL_STACK_FRAME(_hx_pos_26f69c8799845277_86_onKeyDown,\"flixel.system.debug.completion.CompletionList\",\"onKeyDown\",0xde49ce98,\"flixel.system.debug.completion.CompletionList.onKeyDown\",\"flixel/system/debug/completion/CompletionList.hx\",86,0x5d64787a)\n   69: HX_LOCAL_STACK_FRAME(_hx_pos_26f69c8799845277_113_updateIndices,\"flixel.system.debug.completion.CompletionList\",\"updateIndices\",0x00d63b74,\"flixel.system.debug.completion.CompletionList.updateIndices\",\"flixel/system/debug/completion/CompletionList.hx\",113,0x5d64787a)\n   70: HX_LOCAL_STACK_FRAME(_hx_pos_26f69c8799845277_135_bound,\"flixel.system.debug.completion.CompletionList\",\"bound\",0xa405f994,\"flixel.system.debug.completion.CompletionList.bound\",\"flixel/system/debug/completion/CompletionList.hx\",135,0x5d64787a)\n   71: HX_LOCAL_STACK_FRAME(_hx_pos_26f69c8799845277_139_updateEntries,\"flixel.system.debug.completion.CompletionList\",\"updateEntries\",0x96e1219d,\"flixel.system.debug.completion.CompletionList.updateEntries\",\"flixel/system/debug/completion/CompletionList.hx\",139,0x5d64787a)\n   72: HX_LOCAL_STACK_FRAME(_hx_pos_26f69c8799845277_147_updateLabels,\"flixel.system.debug.completion.CompletionList\",\"updateLabels\",0x98d4fc52,\"flixel.system.debug.completion.CompletionList.updateLabels\",\"flixel/system/debug/completion/CompletionList.hx\",147,0x5d64787a)\n   73: HX_LOCAL_STACK_FRAME(_hx_pos_26f69c8799845277_157_updateSelectedItem,\"flixel.system.debug.completion.CompletionList\",\"updateSelectedItem\",0x02be39a1,\"flixel.system.debug.completion.CompletionList.updateSelectedItem\",\"flixel/system/debug/completion/CompletionList.hx\",157,0x5d64787a)\n   74: HX_LOCAL_STACK_FRAME(_hx_pos_26f69c8799845277_167_setItems,\"flixel.system.debug.completion.CompletionList\",\"setItems\",0x6843c568,\"flixel.system.debug.completion.CompletionList.setItems\",\"flixel/system/debug/completion/CompletionList.hx\",167,0x5d64787a)\n   75: HX_LOCAL_STACK_FRAME(_hx_pos_26f69c8799845277_188_filterItems,\"flixel.system.debug.completion.CompletionList\",\"filterItems\",0xe29aeefe,\"flixel.system.debug.completion.CompletionList.filterItems\",\"flixel/system/debug/completion/CompletionList.hx\",188,0x5d64787a)\n   76: HX_LOCAL_STACK_FRAME(_hx_pos_26f69c8799845277_182_filterItems,\"flixel.system.debug.completion.CompletionList\",\"filterItems\",0xe29aeefe,\"flixel.system.debug.completion.CompletionList.filterItems\",\"flixel/system/debug/completion/CompletionList.hx\",182,0x5d64787a)\n   77: HX_LOCAL_STACK_FRAME(_hx_pos_26f69c8799845277_203_sortItems,\"flixel.system.debug.completion.CompletionList\",\"sortItems\",0x34d82c18,\"flixel.system.debug.completion.CompletionList.sortItems\",\"flixel/system/debug/completion/CompletionList.hx\",203,0x5d64787a)\n   78: HX_LOCAL_STACK_FRAME(_hx_pos_26f69c8799845277_198_sortItems,\"flixel.system.debug.completion.CompletionList\",\"sortItems\",0x34d82c18,\"flixel.system.debug.completion.CompletionList.sortItems\",\"flixel/system/debug/completion/CompletionList.hx\",198,0x5d64787a)\n   79: HX_LOCAL_STACK_FRAME(_hx_pos_26f69c8799845277_222_startsWithExt,\"flixel.system.debug.completion.CompletionList\",\"startsWithExt\",0x5b78f7c0,\"flixel.system.debug.completion.CompletionList.startsWithExt\",\"flixel/system/debug/completion/CompletionList.hx\",222,0x5d64787a)\n   80: HX_LOCAL_STACK_FRAME(_hx_pos_26f69c8799845277_231_set_filter,\"flixel.system.debug.completion.CompletionList\",\"set_filter\",0x1b994cdf,\"flixel.system.debug.completion.CompletionList.set_filter\",\"flixel/system/debug/completion/CompletionList.hx\",231,0x5d64787a)\n   81  namespace flixel{\n   82  namespace _hx_system{\n   83: namespace debug{\n   84  namespace completion{\n   85  \n   ..\n  170  HXDLIN(  69)\t\t\t_g1 = (_g1 + (int)1);\n  171  HXDLIN(  69)\t\t\tint i = (_g1 - (int)1);\n  172: HXLINE(  71)\t\t\t ::flixel::_hx_system::debug::completion::CompletionListEntry entry =  ::flixel::_hx_system::debug::completion::CompletionListEntry_obj::__alloc( HX_CTX );\n  173  HXLINE(  72)\t\t\tthis->entries->push(entry);\n  174  HXLINE(  73)\t\t\tthis->addChild(entry);\n  ...\n  182  void CompletionList_obj::createScrollBar(){\n  183              \tHX_GC_STACKFRAME(&_hx_pos_26f69c8799845277_79_createScrollBar)\n  184: HXLINE(  80)\t\tthis->scrollBar =  ::flixel::_hx_system::debug::completion::CompletionListScrollBar_obj::__alloc( HX_CTX ,(int)150,(int)0,(int)5,this->actualHeight);\n  185  HXLINE(  82)\t\tthis->addChild(this->scrollBar);\n  186              \t}\n  ...\n  327  HXLINE( 151)\t\t\t\tselectedItem1 = HX_(\"\",00,00,00,00);\n  328              \t\t\t}\n  329: HXLINE( 152)\t\t\tthis->entries->__get(i).StaticCast<  ::flixel::_hx_system::debug::completion::CompletionListEntry >()->setItem(selectedItem1);\n  330              \t\t}\n  331              \t}\n  ...\n  340  HXDLIN( 158)\t\t\t::Array< ::Dynamic> _g1 = this->entries;\n  341  HXDLIN( 158)\t\t\twhile((_g < _g1->length)){\n  342: HXLINE( 158)\t\t\t\t ::flixel::_hx_system::debug::completion::CompletionListEntry entry = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::debug::completion::CompletionListEntry >();\n  343  HXDLIN( 158)\t\t\t\t_g = (_g + (int)1);\n  344  HXLINE( 159)\t\t\t\tentry->set_selected(false);\n  ...\n  346              \t\t}\n  347  HXLINE( 160)\t\t::Array< ::Dynamic> _hx_tmp = this->entries;\n  348: HXDLIN( 160)\t\t_hx_tmp->__get((this->selectedIndex - this->lowerVisibleIndex)).StaticCast<  ::flixel::_hx_system::debug::completion::CompletionListEntry >()->set_selected(true);\n  349  HXLINE( 162)\t\tif (hx::IsNotNull( this->selectionChanged )) {\n  350  HXLINE( 163)\t\t\t ::Dynamic _hx_tmp1 = this->selectionChanged;\n  ...\n  395  \n  396  ::Array< ::String > CompletionList_obj::sortItems(::String filter,::Array< ::String > items){\n  397:             \t\tHX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::flixel::_hx_system::debug::completion::CompletionList,_gthis,::String,filter) HXARGC(2)\n  398              \t\tint _hx_run(::String a,::String b){\n  399              \t\t\tHX_STACKFRAME(&_hx_pos_26f69c8799845277_203_sortItems)\n  ...\n  414  \n  415              \tHX_STACKFRAME(&_hx_pos_26f69c8799845277_198_sortItems)\n  416: HXLINE( 197)\t\t ::flixel::_hx_system::debug::completion::CompletionList _gthis = hx::ObjectPtr<OBJ_>(this);\n  417  HXLINE( 199)\t\tif ((filter == HX_(\"\",00,00,00,00))) {\n  418  HXLINE( 200)\t\t\treturn items;\n  ...\n  459  \n  460  hx::ObjectPtr< CompletionList_obj > CompletionList_obj::__alloc(hx::Ctx *_hx_ctx,int capacity) {\n  461: \tCompletionList_obj *__this = (CompletionList_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CompletionList_obj), true, \"flixel.system.debug.completion.CompletionList\"));\n  462  \t*(void **)__this = CompletionList_obj::_hx_vtable;\n  463  \t__this->__construct(capacity);\n  ...\n  582  \tcase 9:\n  583  \t\tif (HX_FIELD_EQ(inName,\"completed\") ) { completed=inValue.Cast<  ::Dynamic >(); return inValue; }\n  584: \t\tif (HX_FIELD_EQ(inName,\"scrollBar\") ) { scrollBar=inValue.Cast<  ::flixel::_hx_system::debug::completion::CompletionListScrollBar >(); return inValue; }\n  585  \t\tbreak;\n  586  \tcase 12:\n  ...\n  627  \t{hx::fsInt,(int)offsetof(CompletionList_obj,lowerVisibleIndex),HX_HCSTRING(\"lowerVisibleIndex\",\"\\xe1\",\"\\x78\",\"\\x7b\",\"\\xb7\")},\n  628  \t{hx::fsInt,(int)offsetof(CompletionList_obj,upperVisibleIndex),HX_HCSTRING(\"upperVisibleIndex\",\"\\xc2\",\"\\xa5\",\"\\x5c\",\"\\x06\")},\n  629: \t{hx::fsObject /*::flixel::_hx_system::debug::completion::CompletionListScrollBar*/ ,(int)offsetof(CompletionList_obj,scrollBar),HX_HCSTRING(\"scrollBar\",\"\\xc6\",\"\\x57\",\"\\xfc\",\"\\x3d\")},\n  630  \t{hx::fsInt,(int)offsetof(CompletionList_obj,actualHeight),HX_HCSTRING(\"actualHeight\",\"\\x15\",\"\\x25\",\"\\xab\",\"\\xb7\")},\n  631  \t{ hx::fsUnknown, 0, null()}\n  ...\n  683  \tCompletionList_obj::_hx_vtable = *(void **)dummy;\n  684  \thx::Static(__mClass) = new hx::Class_obj();\n  685: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.completion.CompletionList\",\"\\x44\",\"\\x65\",\"\\x51\",\"\\x72\");\n  686  \t__mClass->mSuper = &super::__SGetClass();\n  687  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  707  } // end namespace flixel\n  708  } // end namespace system\n  709: } // end namespace debug\n  710  } // end namespace completion\n  711  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/completion/CompletionListEntry.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_DebuggerUtil\n    5: #include <flixel/system/debug/DebuggerUtil.h>\n    6  #endif\n    7: #ifndef INCLUDED_flixel_system_debug_completion_CompletionListEntry\n    8: #include <flixel/system/debug/completion/CompletionListEntry.h>\n    9  #endif\n   10  #ifndef INCLUDED_openfl_display_Bitmap\n   ..\n   39  #endif\n   40  \n   41: HX_DEFINE_STACK_FRAME(_hx_pos_87bf7b3fe3b7f3f2_9_new,\"flixel.system.debug.completion.CompletionListEntry\",\"new\",0x5600ec80,\"flixel.system.debug.completion.CompletionListEntry.new\",\"flixel/system/debug/completion/CompletionListEntry.hx\",9,0xaa5a5a70)\n   42: HX_LOCAL_STACK_FRAME(_hx_pos_87bf7b3fe3b7f3f2_41_initBitmapDatas,\"flixel.system.debug.completion.CompletionListEntry\",\"initBitmapDatas\",0x8c672f8a,\"flixel.system.debug.completion.CompletionListEntry.initBitmapDatas\",\"flixel/system/debug/completion/CompletionListEntry.hx\",41,0xaa5a5a70)\n   43: HX_LOCAL_STACK_FRAME(_hx_pos_87bf7b3fe3b7f3f2_49_setItem,\"flixel.system.debug.completion.CompletionListEntry\",\"setItem\",0xe081b1f5,\"flixel.system.debug.completion.CompletionListEntry.setItem\",\"flixel/system/debug/completion/CompletionListEntry.hx\",49,0xaa5a5a70)\n   44: HX_LOCAL_STACK_FRAME(_hx_pos_87bf7b3fe3b7f3f2_59_set_selected,\"flixel.system.debug.completion.CompletionListEntry\",\"set_selected\",0xb69e61b8,\"flixel.system.debug.completion.CompletionListEntry.set_selected\",\"flixel/system/debug/completion/CompletionListEntry.hx\",59,0xaa5a5a70)\n   45: HX_LOCAL_STACK_FRAME(_hx_pos_87bf7b3fe3b7f3f2_11_boot,\"flixel.system.debug.completion.CompletionListEntry\",\"boot\",0xe2e70412,\"flixel.system.debug.completion.CompletionListEntry.boot\",\"flixel/system/debug/completion/CompletionListEntry.hx\",11,0xaa5a5a70)\n   46: HX_LOCAL_STACK_FRAME(_hx_pos_87bf7b3fe3b7f3f2_12_boot,\"flixel.system.debug.completion.CompletionListEntry\",\"boot\",0xe2e70412,\"flixel.system.debug.completion.CompletionListEntry.boot\",\"flixel/system/debug/completion/CompletionListEntry.hx\",12,0xaa5a5a70)\n   47: HX_LOCAL_STACK_FRAME(_hx_pos_87bf7b3fe3b7f3f2_14_boot,\"flixel.system.debug.completion.CompletionListEntry\",\"boot\",0xe2e70412,\"flixel.system.debug.completion.CompletionListEntry.boot\",\"flixel/system/debug/completion/CompletionListEntry.hx\",14,0xaa5a5a70)\n   48: HX_LOCAL_STACK_FRAME(_hx_pos_87bf7b3fe3b7f3f2_15_boot,\"flixel.system.debug.completion.CompletionListEntry\",\"boot\",0xe2e70412,\"flixel.system.debug.completion.CompletionListEntry.boot\",\"flixel/system/debug/completion/CompletionListEntry.hx\",15,0xaa5a5a70)\n   49: HX_LOCAL_STACK_FRAME(_hx_pos_87bf7b3fe3b7f3f2_16_boot,\"flixel.system.debug.completion.CompletionListEntry\",\"boot\",0xe2e70412,\"flixel.system.debug.completion.CompletionListEntry.boot\",\"flixel/system/debug/completion/CompletionListEntry.hx\",16,0xaa5a5a70)\n   50  namespace flixel{\n   51  namespace _hx_system{\n   52: namespace debug{\n   53  namespace completion{\n   54  \n   ..\n   59  HXLINE(  30)\t\tthis->initBitmapDatas();\n   60  HXLINE(  32)\t\tthis->addChild((this->background =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,null(),null(),null())));\n   61: HXLINE(  33)\t\tthis->background->set_bitmapData(::flixel::_hx_system::debug::completion::CompletionListEntry_obj::normalBitmapData);\n   62: HXLINE(  35)\t\tthis->label = ::flixel::_hx_system::debug::DebuggerUtil_obj::createTextField(null(),null(),null(),null());\n   63  HXLINE(  36)\t\tthis->label->set_x((int)4);\n   64  HXLINE(  37)\t\tthis->addChild(this->label);\n   ..\n   98  void CompletionListEntry_obj::initBitmapDatas(){\n   99              \tHX_GC_STACKFRAME(&_hx_pos_87bf7b3fe3b7f3f2_41_initBitmapDatas)\n  100: HXLINE(  42)\t\tif (hx::IsNull( ::flixel::_hx_system::debug::completion::CompletionListEntry_obj::normalBitmapData )) {\n  101: HXLINE(  43)\t\t\t::flixel::_hx_system::debug::completion::CompletionListEntry_obj::normalBitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)150,(int)20,true,(int)-10526881);\n  102              \t\t}\n  103: HXLINE(  44)\t\tif (hx::IsNull( ::flixel::_hx_system::debug::completion::CompletionListEntry_obj::highlightBitmapData )) {\n  104: HXLINE(  45)\t\t\t::flixel::_hx_system::debug::completion::CompletionListEntry_obj::highlightBitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)150,(int)20,true,(int)-9605779);\n  105              \t\t}\n  106              \t}\n  ...\n  128  HXLINE(  63)\t\t ::openfl::display::BitmapData _hx_tmp;\n  129  HXDLIN(  63)\t\tif (selected) {\n  130: HXLINE(  63)\t\t\t_hx_tmp = ::flixel::_hx_system::debug::completion::CompletionListEntry_obj::highlightBitmapData;\n  131              \t\t}\n  132              \t\telse {\n  133: HXLINE(  63)\t\t\t_hx_tmp = ::flixel::_hx_system::debug::completion::CompletionListEntry_obj::normalBitmapData;\n  134              \t\t}\n  135  HXDLIN(  63)\t\tthis->background->set_bitmapData(_hx_tmp);\n  ...\n  162  \n  163  hx::ObjectPtr< CompletionListEntry_obj > CompletionListEntry_obj::__alloc(hx::Ctx *_hx_ctx) {\n  164: \tCompletionListEntry_obj *__this = (CompletionListEntry_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CompletionListEntry_obj), true, \"flixel.system.debug.completion.CompletionListEntry\"));\n  165  \t*(void **)__this = CompletionListEntry_obj::_hx_vtable;\n  166  \t__this->__construct();\n  ...\n  332  \tCompletionListEntry_obj::_hx_vtable = *(void **)dummy;\n  333  \thx::Static(__mClass) = new hx::Class_obj();\n  334: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.completion.CompletionListEntry\",\"\\x8e\",\"\\xec\",\"\\x78\",\"\\xc7\");\n  335  \t__mClass->mSuper = &super::__SGetClass();\n  336  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  380  } // end namespace flixel\n  381  } // end namespace system\n  382: } // end namespace debug\n  383  } // end namespace completion\n  384  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/completion/CompletionListScrollBar.cpp:\n    6  #include \"hxMath.h\"\n    7  #endif\n    8: #ifndef INCLUDED_flixel_system_debug_completion_CompletionListScrollBar\n    9: #include <flixel/system/debug/completion/CompletionListScrollBar.h>\n   10  #endif\n   11  #ifndef INCLUDED_openfl_display_Bitmap\n   ..\n   37  #endif\n   38  \n   39: HX_DEFINE_STACK_FRAME(_hx_pos_80093d47a78edb3b_16_new,\"flixel.system.debug.completion.CompletionListScrollBar\",\"new\",0xf77443d4,\"flixel.system.debug.completion.CompletionListScrollBar.new\",\"flixel/system/debug/completion/CompletionListScrollBar.hx\",16,0x884a099c)\n   40: HX_LOCAL_STACK_FRAME(_hx_pos_80093d47a78edb3b_28_updateHandle,\"flixel.system.debug.completion.CompletionListScrollBar\",\"updateHandle\",0x7238a89d,\"flixel.system.debug.completion.CompletionListScrollBar.updateHandle\",\"flixel/system/debug/completion/CompletionListScrollBar.hx\",28,0x884a099c)\n   41: HX_LOCAL_STACK_FRAME(_hx_pos_80093d47a78edb3b_10_boot,\"flixel.system.debug.completion.CompletionListScrollBar\",\"boot\",0x8660163e,\"flixel.system.debug.completion.CompletionListScrollBar.boot\",\"flixel/system/debug/completion/CompletionListScrollBar.hx\",10,0x884a099c)\n   42: HX_LOCAL_STACK_FRAME(_hx_pos_80093d47a78edb3b_11_boot,\"flixel.system.debug.completion.CompletionListScrollBar\",\"boot\",0x8660163e,\"flixel.system.debug.completion.CompletionListScrollBar.boot\",\"flixel/system/debug/completion/CompletionListScrollBar.hx\",11,0x884a099c)\n   43  namespace flixel{\n   44  namespace _hx_system{\n   45: namespace debug{\n   46  namespace completion{\n   47  \n   ..\n  137  \n  138  hx::ObjectPtr< CompletionListScrollBar_obj > CompletionListScrollBar_obj::__alloc(hx::Ctx *_hx_ctx,int x,int y,int width,int height) {\n  139: \tCompletionListScrollBar_obj *__this = (CompletionListScrollBar_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CompletionListScrollBar_obj), true, \"flixel.system.debug.completion.CompletionListScrollBar\"));\n  140  \t*(void **)__this = CompletionListScrollBar_obj::_hx_vtable;\n  141  \t__this->__construct(x,y,width,height);\n  ...\n  233  \tCompletionListScrollBar_obj::_hx_vtable = *(void **)dummy;\n  234  \thx::Static(__mClass) = new hx::Class_obj();\n  235: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.completion.CompletionListScrollBar\",\"\\xe2\",\"\\x09\",\"\\x71\",\"\\x90\");\n  236  \t__mClass->mSuper = &super::__SGetClass();\n  237  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  269  } // end namespace flixel\n  270  } // end namespace system\n  271: } // end namespace debug\n  272  } // end namespace completion\n  273  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/console/ConsoleUtil.cpp:\n   17  #include <flixel/FlxG.h>\n   18  #endif\n   19: #ifndef INCLUDED_flixel_system_debug_console_ConsoleUtil\n   20: #include <flixel/system/debug/console/ConsoleUtil.h>\n   21  #endif\n   22: #ifndef INCLUDED_flixel_system_debug_console__ConsoleUtil_Interp\n   23: #include <flixel/system/debug/console/_ConsoleUtil/Interp.h>\n   24  #endif\n   25: #ifndef INCLUDED_flixel_system_debug_log_LogStyle\n   26: #include <flixel/system/debug/log/LogStyle.h>\n   27  #endif\n   28  #ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd\n   ..\n   48  #endif\n   49  \n   50: HX_LOCAL_STACK_FRAME(_hx_pos_a994ee380c23f681_33_init,\"flixel.system.debug.console.ConsoleUtil\",\"init\",0x40765844,\"flixel.system.debug.console.ConsoleUtil.init\",\"flixel/system/debug/console/ConsoleUtil.hx\",33,0x2e8bcde6)\n   51: HX_LOCAL_STACK_FRAME(_hx_pos_a994ee380c23f681_48_parseCommand,\"flixel.system.debug.console.ConsoleUtil\",\"parseCommand\",0xbaf1368c,\"flixel.system.debug.console.ConsoleUtil.parseCommand\",\"flixel/system/debug/console/ConsoleUtil.hx\",48,0x2e8bcde6)\n   52: HX_LOCAL_STACK_FRAME(_hx_pos_a994ee380c23f681_62_runCommand,\"flixel.system.debug.console.ConsoleUtil\",\"runCommand\",0x85b4fd74,\"flixel.system.debug.console.ConsoleUtil.runCommand\",\"flixel/system/debug/console/ConsoleUtil.hx\",62,0x2e8bcde6)\n   53: HX_LOCAL_STACK_FRAME(_hx_pos_a994ee380c23f681_72_runExpr,\"flixel.system.debug.console.ConsoleUtil\",\"runExpr\",0x4a0f2d6c,\"flixel.system.debug.console.ConsoleUtil.runExpr\",\"flixel/system/debug/console/ConsoleUtil.hx\",72,0x2e8bcde6)\n   54: HX_LOCAL_STACK_FRAME(_hx_pos_a994ee380c23f681_83_registerObject,\"flixel.system.debug.console.ConsoleUtil\",\"registerObject\",0x0d502bb6,\"flixel.system.debug.console.ConsoleUtil.registerObject\",\"flixel/system/debug/console/ConsoleUtil.hx\",83,0x2e8bcde6)\n   55: HX_LOCAL_STACK_FRAME(_hx_pos_a994ee380c23f681_95_registerFunction,\"flixel.system.debug.console.ConsoleUtil\",\"registerFunction\",0xb3a1c3cf,\"flixel.system.debug.console.ConsoleUtil.registerFunction\",\"flixel/system/debug/console/ConsoleUtil.hx\",95,0x2e8bcde6)\n   56: HX_LOCAL_STACK_FRAME(_hx_pos_a994ee380c23f681_101_getFields,\"flixel.system.debug.console.ConsoleUtil\",\"getFields\",0x604f9dfb,\"flixel.system.debug.console.ConsoleUtil.getFields\",\"flixel/system/debug/console/ConsoleUtil.hx\",101,0x2e8bcde6)\n   57: HX_LOCAL_STACK_FRAME(_hx_pos_a994ee380c23f681_136_sortFields,\"flixel.system.debug.console.ConsoleUtil\",\"sortFields\",0x773f00ab,\"flixel.system.debug.console.ConsoleUtil.sortFields\",\"flixel/system/debug/console/ConsoleUtil.hx\",136,0x2e8bcde6)\n   58: HX_LOCAL_STACK_FRAME(_hx_pos_a994ee380c23f681_132_sortFields,\"flixel.system.debug.console.ConsoleUtil\",\"sortFields\",0x773f00ab,\"flixel.system.debug.console.ConsoleUtil.sortFields\",\"flixel/system/debug/console/ConsoleUtil.hx\",132,0x2e8bcde6)\n   59: HX_LOCAL_STACK_FRAME(_hx_pos_a994ee380c23f681_158_log,\"flixel.system.debug.console.ConsoleUtil\",\"log\",0x2bebd9d0,\"flixel.system.debug.console.ConsoleUtil.log\",\"flixel/system/debug/console/ConsoleUtil.hx\",158,0x2e8bcde6)\n   60  namespace flixel{\n   61  namespace _hx_system{\n   62: namespace debug{\n   63  namespace console{\n   64  \n   ..\n   82   ::hscript::Parser ConsoleUtil_obj::parser;\n   83  \n   84:  ::flixel::_hx_system::debug::console::_ConsoleUtil::Interp ConsoleUtil_obj::interp;\n   85  \n   86  void ConsoleUtil_obj::init(){\n   87              \tHX_GC_STACKFRAME(&_hx_pos_a994ee380c23f681_33_init)\n   88: HXLINE(  34)\t\t::flixel::_hx_system::debug::console::ConsoleUtil_obj::parser =  ::hscript::Parser_obj::__alloc( HX_CTX );\n   89: HXLINE(  35)\t\t::flixel::_hx_system::debug::console::ConsoleUtil_obj::parser->allowJSON = true;\n   90: HXLINE(  36)\t\t::flixel::_hx_system::debug::console::ConsoleUtil_obj::parser->allowTypes = true;\n   91: HXLINE(  38)\t\t::flixel::_hx_system::debug::console::ConsoleUtil_obj::interp =  ::flixel::_hx_system::debug::console::_ConsoleUtil::Interp_obj::__alloc( HX_CTX );\n   92              \t}\n   93  \n   ..\n  100  HXLINE(  50)\t\t\tInput = Input.substr((int)0,(int)-1);\n  101              \t\t}\n  102: HXLINE(  51)\t\treturn ::flixel::_hx_system::debug::console::ConsoleUtil_obj::parser->parseString(Input,null());\n  103              \t}\n  104  \n  ...\n  108   ::Dynamic ConsoleUtil_obj::runCommand(::String Input){\n  109              \tHX_STACKFRAME(&_hx_pos_a994ee380c23f681_62_runCommand)\n  110: HXDLIN(  62)\t\t ::flixel::_hx_system::debug::console::_ConsoleUtil::Interp _hx_tmp = ::flixel::_hx_system::debug::console::ConsoleUtil_obj::interp;\n  111: HXDLIN(  62)\t\treturn _hx_tmp->expr(::flixel::_hx_system::debug::console::ConsoleUtil_obj::parseCommand(Input));\n  112              \t}\n  113  \n  ...\n  117   ::Dynamic ConsoleUtil_obj::runExpr( ::hscript::Expr expr){\n  118              \tHX_STACKFRAME(&_hx_pos_a994ee380c23f681_72_runExpr)\n  119: HXDLIN(  72)\t\treturn ::flixel::_hx_system::debug::console::ConsoleUtil_obj::interp->expr(expr);\n  120              \t}\n  121  \n  ...\n  133              \t\t}\n  134  HXDLIN(  83)\t\tif (_hx_tmp) {\n  135: HXLINE(  84)\t\t\t::flixel::_hx_system::debug::console::ConsoleUtil_obj::interp->variables->set(ObjectAlias,AnyObject);\n  136              \t\t}\n  137              \t}\n  ...\n  143              \tHX_STACKFRAME(&_hx_pos_a994ee380c23f681_95_registerFunction)\n  144  HXDLIN(  95)\t\tif (::Reflect_obj::isFunction(Function)) {\n  145: HXLINE(  96)\t\t\t::flixel::_hx_system::debug::console::ConsoleUtil_obj::interp->variables->set(FunctionAlias,Function);\n  146              \t\t}\n  147              \t}\n  ...\n  198              \t\t\t}\n  199              \t\t}\n  200: HXLINE( 128)\t\treturn ::flixel::_hx_system::debug::console::ConsoleUtil_obj::sortFields(filteredFields);\n  201              \t}\n  202  \n  ...\n  229  void ConsoleUtil_obj::log( ::Dynamic Text){\n  230              \tHX_STACKFRAME(&_hx_pos_a994ee380c23f681_158_log)\n  231: HXDLIN( 158)\t\t::flixel::FlxG_obj::log->advanced(::cpp::VirtualArray_obj::__new(1)->init(0,Text),::flixel::_hx_system::debug::log::LogStyle_obj::CONSOLE,null());\n  232              \t}\n  233  \n  ...\n  280  \tcase 6:\n  281  \t\tif (HX_FIELD_EQ(inName,\"parser\") ) { parser=ioValue.Cast<  ::hscript::Parser >(); return true; }\n  282: \t\tif (HX_FIELD_EQ(inName,\"interp\") ) { interp=ioValue.Cast<  ::flixel::_hx_system::debug::console::_ConsoleUtil::Interp >(); return true; }\n  283  \t}\n  284  \treturn false;\n  ...\n  289  static hx::StaticInfo ConsoleUtil_obj_sStaticStorageInfo[] = {\n  290  \t{hx::fsObject /*::hscript::Parser*/ ,(void *) &ConsoleUtil_obj::parser,HX_HCSTRING(\"parser\",\"\\xdf\",\"\\x9c\",\"\\x88\",\"\\xed\")},\n  291: \t{hx::fsObject /*::flixel::_hx_system::debug::console::_ConsoleUtil::Interp*/ ,(void *) &ConsoleUtil_obj::interp,HX_HCSTRING(\"interp\",\"\\xd4\",\"\\x79\",\"\\x86\",\"\\x9e\")},\n  292  \t{ hx::fsUnknown, 0, null()}\n  293  };\n  ...\n  331  \tConsoleUtil_obj::_hx_vtable = *(void **)dummy;\n  332  \thx::Static(__mClass) = new hx::Class_obj();\n  333: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.console.ConsoleUtil\",\"\\xba\",\"\\x4f\",\"\\xd6\",\"\\xa9\");\n  334  \t__mClass->mSuper = &super::__SGetClass();\n  335  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  355  } // end namespace flixel\n  356  } // end namespace system\n  357: } // end namespace debug\n  358  } // end namespace console\n  359  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/console/_ConsoleUtil/Interp.cpp:\n    5  #include <Reflect.h>\n    6  #endif\n    7: #ifndef INCLUDED_flixel_system_debug_console__ConsoleUtil_Interp\n    8: #include <flixel/system/debug/console/_ConsoleUtil/Interp.h>\n    9  #endif\n   10  #ifndef INCLUDED_haxe_IMap\n   ..\n   21  #endif\n   22  \n   23: HX_DEFINE_STACK_FRAME(_hx_pos_87978f3c8c973553_166_new,\"flixel.system.debug.console._ConsoleUtil.Interp\",\"new\",0x56cfaa5b,\"flixel.system.debug.console._ConsoleUtil.Interp.new\",\"flixel/system/debug/console/ConsoleUtil.hx\",166,0x2e8bcde6)\n   24: HX_LOCAL_STACK_FRAME(_hx_pos_87978f3c8c973553_170_getGlobals,\"flixel.system.debug.console._ConsoleUtil.Interp\",\"getGlobals\",0x79b1b71f,\"flixel.system.debug.console._ConsoleUtil.Interp.getGlobals\",\"flixel/system/debug/console/ConsoleUtil.hx\",170,0x2e8bcde6)\n   25: HX_LOCAL_STACK_FRAME(_hx_pos_87978f3c8c973553_174_toArray,\"flixel.system.debug.console._ConsoleUtil.Interp\",\"toArray\",0x1b83ad99,\"flixel.system.debug.console._ConsoleUtil.Interp.toArray\",\"flixel/system/debug/console/ConsoleUtil.hx\",174,0x2e8bcde6)\n   26: HX_LOCAL_STACK_FRAME(_hx_pos_87978f3c8c973553_182_get,\"flixel.system.debug.console._ConsoleUtil.Interp\",\"get\",0x56ca5a91,\"flixel.system.debug.console._ConsoleUtil.Interp.get\",\"flixel/system/debug/console/ConsoleUtil.hx\",182,0x2e8bcde6)\n   27: HX_LOCAL_STACK_FRAME(_hx_pos_87978f3c8c973553_189_set,\"flixel.system.debug.console._ConsoleUtil.Interp\",\"set\",0x56d3759d,\"flixel.system.debug.console._ConsoleUtil.Interp.set\",\"flixel/system/debug/console/ConsoleUtil.hx\",189,0x2e8bcde6)\n   28  namespace flixel{\n   29  namespace _hx_system{\n   30: namespace debug{\n   31  namespace console{\n   32  namespace _ConsoleUtil{\n   ..\n  110  \n  111  hx::ObjectPtr< Interp_obj > Interp_obj::__alloc(hx::Ctx *_hx_ctx) {\n  112: \tInterp_obj *__this = (Interp_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Interp_obj), true, \"flixel.system.debug.console._ConsoleUtil.Interp\"));\n  113  \t*(void **)__this = Interp_obj::_hx_vtable;\n  114  \t__this->__construct();\n  ...\n  166  \tInterp_obj::_hx_vtable = *(void **)dummy;\n  167  \thx::Static(__mClass) = new hx::Class_obj();\n  168: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.console._ConsoleUtil.Interp\",\"\\xe9\",\"\\xe0\",\"\\xc6\",\"\\x72\");\n  169  \t__mClass->mSuper = &super::__SGetClass();\n  170  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  190  } // end namespace flixel\n  191  } // end namespace system\n  192: } // end namespace debug\n  193  } // end namespace console\n  194  } // end namespace _ConsoleUtil\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/interaction/Interaction.cpp:\n   51  #include <flixel/math/FlxRect.h>\n   52  #endif\n   53: #ifndef INCLUDED_flixel_system_debug_FlxDebugger\n   54: #include <flixel/system/debug/FlxDebugger.h>\n   55  #endif\n   56: #ifndef INCLUDED_flixel_system_debug_GraphicInteractive\n   57: #include <flixel/system/debug/GraphicInteractive.h>\n   58  #endif\n   59: #ifndef INCLUDED_flixel_system_debug_Window\n   60: #include <flixel/system/debug/Window.h>\n   61  #endif\n   62: #ifndef INCLUDED_flixel_system_debug_interaction_Interaction\n   63: #include <flixel/system/debug/interaction/Interaction.h>\n   64  #endif\n   65: #ifndef INCLUDED_flixel_system_debug_interaction_tools_Eraser\n   66: #include <flixel/system/debug/interaction/tools/Eraser.h>\n   67  #endif\n   68: #ifndef INCLUDED_flixel_system_debug_interaction_tools_Mover\n   69: #include <flixel/system/debug/interaction/tools/Mover.h>\n   70  #endif\n   71: #ifndef INCLUDED_flixel_system_debug_interaction_tools_Pointer\n   72: #include <flixel/system/debug/interaction/tools/Pointer.h>\n   73  #endif\n   74: #ifndef INCLUDED_flixel_system_debug_interaction_tools_Tool\n   75: #include <flixel/system/debug/interaction/tools/Tool.h>\n   76  #endif\n   77: #ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd\n   78: #include <flixel/system/frontEnds/DebuggerFrontEnd.h>\n   79  #endif\n   80  #ifndef INCLUDED_flixel_system_frontEnds_SignalFrontEnd\n   ..\n  181  #endif\n  182  \n  183: HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_34_new,\"flixel.system.debug.interaction.Interaction\",\"new\",0xfa21d580,\"flixel.system.debug.interaction.Interaction.new\",\"flixel/system/debug/interaction/Interaction.hx\",34,0x4548a912)\n  184: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_85_handleDebuggerVisibilityChanged,\"flixel.system.debug.interaction.Interaction\",\"handleDebuggerVisibilityChanged\",0x3dea5c39,\"flixel.system.debug.interaction.Interaction.handleDebuggerVisibilityChanged\",\"flixel/system/debug/interaction/Interaction.hx\",85,0x4548a912)\n  185: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_92_updateMouse,\"flixel.system.debug.interaction.Interaction\",\"updateMouse\",0x7f05a47c,\"flixel.system.debug.interaction.Interaction.updateMouse\",\"flixel/system/debug/interaction/Interaction.hx\",92,0x4548a912)\n  186: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_128_handleMouseClick,\"flixel.system.debug.interaction.Interaction\",\"handleMouseClick\",0x6baf608b,\"flixel.system.debug.interaction.Interaction.handleMouseClick\",\"flixel/system/debug/interaction/Interaction.hx\",128,0x4548a912)\n  187: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_144_belongsToDebugger,\"flixel.system.debug.interaction.Interaction\",\"belongsToDebugger\",0x14e3d9d0,\"flixel.system.debug.interaction.Interaction.belongsToDebugger\",\"flixel/system/debug/interaction/Interaction.hx\",144,0x4548a912)\n  188: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_153_handleMouseInDebugger,\"flixel.system.debug.interaction.Interaction\",\"handleMouseInDebugger\",0xefc0f203,\"flixel.system.debug.interaction.Interaction.handleMouseInDebugger\",\"flixel/system/debug/interaction/Interaction.hx\",153,0x4548a912)\n  189: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_169_handleKeyEvent,\"flixel.system.debug.interaction.Interaction\",\"handleKeyEvent\",0xda0964a3,\"flixel.system.debug.interaction.Interaction.handleKeyEvent\",\"flixel/system/debug/interaction/Interaction.hx\",169,0x4548a912)\n  190: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_179_addTool,\"flixel.system.debug.interaction.Interaction\",\"addTool\",0xefc5b339,\"flixel.system.debug.interaction.Interaction.addTool\",\"flixel/system/debug/interaction/Interaction.hx\",179,0x4548a912)\n  191: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_199_destroy,\"flixel.system.debug.interaction.Interaction\",\"destroy\",0x8b0d421a,\"flixel.system.debug.interaction.Interaction.destroy\",\"flixel/system/debug/interaction/Interaction.hx\",199,0x4548a912)\n  192: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_231_isActive,\"flixel.system.debug.interaction.Interaction\",\"isActive\",0xbe5b4430,\"flixel.system.debug.interaction.Interaction.isActive\",\"flixel/system/debug/interaction/Interaction.hx\",231,0x4548a912)\n  193: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_235_update,\"flixel.system.debug.interaction.Interaction\",\"update\",0x852f74e9,\"flixel.system.debug.interaction.Interaction.update\",\"flixel/system/debug/interaction/Interaction.hx\",235,0x4548a912)\n  194: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_253_postDraw,\"flixel.system.debug.interaction.Interaction\",\"postDraw\",0x505af364,\"flixel.system.debug.interaction.Interaction.postDraw\",\"flixel/system/debug/interaction/Interaction.hx\",253,0x4548a912)\n  195: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_264_getDebugGraphics,\"flixel.system.debug.interaction.Interaction\",\"getDebugGraphics\",0xd1fe02a8,\"flixel.system.debug.interaction.Interaction.getDebugGraphics\",\"flixel/system/debug/interaction/Interaction.hx\",264,0x4548a912)\n  196: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_279_drawItemsSelection,\"flixel.system.debug.interaction.Interaction\",\"drawItemsSelection\",0xcdd9aa30,\"flixel.system.debug.interaction.Interaction.drawItemsSelection\",\"flixel/system/debug/interaction/Interaction.hx\",279,0x4548a912)\n  197: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_302_getTool,\"flixel.system.debug.interaction.Interaction\",\"getTool\",0x860b202e,\"flixel.system.debug.interaction.Interaction.getTool\",\"flixel/system/debug/interaction/Interaction.hx\",302,0x4548a912)\n  198: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_310_toggleVisible,\"flixel.system.debug.interaction.Interaction\",\"toggleVisible\",0x4f15685e,\"flixel.system.debug.interaction.Interaction.toggleVisible\",\"flixel/system/debug/interaction/Interaction.hx\",310,0x4548a912)\n  199: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_322_registerCustomCursor,\"flixel.system.debug.interaction.Interaction\",\"registerCustomCursor\",0xf323974a,\"flixel.system.debug.interaction.Interaction.registerCustomCursor\",\"flixel/system/debug/interaction/Interaction.hx\",322,0x4548a912)\n  200: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_343_updateCustomCursors,\"flixel.system.debug.interaction.Interaction\",\"updateCustomCursors\",0x218c1283,\"flixel.system.debug.interaction.Interaction.updateCustomCursors\",\"flixel/system/debug/interaction/Interaction.hx\",343,0x4548a912)\n  201: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_382_saveSystemCursorInfo,\"flixel.system.debug.interaction.Interaction\",\"saveSystemCursorInfo\",0x622efa70,\"flixel.system.debug.interaction.Interaction.saveSystemCursorInfo\",\"flixel/system/debug/interaction/Interaction.hx\",382,0x4548a912)\n  202: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_390_restoreSystemCursor,\"flixel.system.debug.interaction.Interaction\",\"restoreSystemCursor\",0x6747acb3,\"flixel.system.debug.interaction.Interaction.restoreSystemCursor\",\"flixel/system/debug/interaction/Interaction.hx\",390,0x4548a912)\n  203: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_399_setActiveTool,\"flixel.system.debug.interaction.Interaction\",\"setActiveTool\",0x92d80fa0,\"flixel.system.debug.interaction.Interaction.setActiveTool\",\"flixel/system/debug/interaction/Interaction.hx\",399,0x4548a912)\n  204: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_429_setSystemCursorVisibility,\"flixel.system.debug.interaction.Interaction\",\"setSystemCursorVisibility\",0x3bad5fb9,\"flixel.system.debug.interaction.Interaction.setSystemCursorVisibility\",\"flixel/system/debug/interaction/Interaction.hx\",429,0x4548a912)\n  205: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_437_setToolsCursorVisibility,\"flixel.system.debug.interaction.Interaction\",\"setToolsCursorVisibility\",0x9dd4e861,\"flixel.system.debug.interaction.Interaction.setToolsCursorVisibility\",\"flixel/system/debug/interaction/Interaction.hx\",437,0x4548a912)\n  206: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_455_clearSelection,\"flixel.system.debug.interaction.Interaction\",\"clearSelection\",0x1e241bdf,\"flixel.system.debug.interaction.Interaction.clearSelection\",\"flixel/system/debug/interaction/Interaction.hx\",455,0x4548a912)\n  207: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_460_keyPressed,\"flixel.system.debug.interaction.Interaction\",\"keyPressed\",0xc6e951a3,\"flixel.system.debug.interaction.Interaction.keyPressed\",\"flixel/system/debug/interaction/Interaction.hx\",460,0x4548a912)\n  208: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_464_keyJustPressed,\"flixel.system.debug.interaction.Interaction\",\"keyJustPressed\",0x9fbba157,\"flixel.system.debug.interaction.Interaction.keyJustPressed\",\"flixel/system/debug/interaction/Interaction.hx\",464,0x4548a912)\n  209: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_470_findItemsWithinState,\"flixel.system.debug.interaction.Interaction\",\"findItemsWithinState\",0x412153bf,\"flixel.system.debug.interaction.Interaction.findItemsWithinState\",\"flixel/system/debug/interaction/Interaction.hx\",470,0x4548a912)\n  210: HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_488_findItemsWithinArea,\"flixel.system.debug.interaction.Interaction\",\"findItemsWithinArea\",0xfd927d9f,\"flixel.system.debug.interaction.Interaction.findItemsWithinArea\",\"flixel/system/debug/interaction/Interaction.hx\",488,0x4548a912)\n  211  namespace flixel{\n  212  namespace _hx_system{\n  213: namespace debug{\n  214  namespace interaction{\n  215  \n  ...\n  217              \tHX_GC_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_34_new)\n  218  HXLINE(  53)\t\tthis->_flixelPointer =  ::flixel::input::FlxPointer_obj::__alloc( HX_CTX );\n  219: HXLINE(  52)\t\tthis->_debuggerInteraction = false;\n  220  HXLINE(  49)\t\tthis->_keysUp =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );\n  221  HXLINE(  48)\t\tthis->_keysDown =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );\n  ...\n  227  HXLINE(  39)\t\tthis->flixelPointer =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,null(),null());\n  228  HXLINE(  37)\t\tthis->selectedItems =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());\n  229: HXLINE(  57)\t\tsuper::__construct(HX_(\"Tools\",fb,01,5c,a7), ::flixel::_hx_system::debug::GraphicInteractive_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null()),(int)40,(int)25,false,null(),null());\n  230  HXLINE(  58)\t\tthis->reposition((int)2,(int)100);\n  231  HXLINE(  59)\t\tthis->_container = container;\n  ...\n  233  HXLINE(  62)\t\tthis->_customCursor->mouseEnabled = false;\n  234  HXLINE(  63)\t\tthis->_container->addChild(this->_customCursor);\n  235: HXLINE(  66)\t\tthis->addTool( ::flixel::_hx_system::debug::interaction::tools::Pointer_obj::__alloc( HX_CTX ));\n  236: HXLINE(  67)\t\tthis->addTool( ::flixel::_hx_system::debug::interaction::tools::Mover_obj::__alloc( HX_CTX ));\n  237: HXLINE(  68)\t\tthis->addTool( ::flixel::_hx_system::debug::interaction::tools::Eraser_obj::__alloc( HX_CTX ));\n  238  HXLINE(  70)\t\t::flixel::FlxG_obj::signals->postDraw->add(this->postDraw_dyn());\n  239: HXLINE(  71)\t\t::flixel::FlxG_obj::debugger->visibilityChanged->add(this->handleDebuggerVisibilityChanged_dyn());\n  240  HXLINE(  73)\t\t::openfl::Lib_obj::get_current()->stage->addEventListener(HX_(\"mouseMove\",d6,9b,b5,f4),this->updateMouse_dyn(),null(),null(),null());\n  241  HXLINE(  74)\t\t::openfl::Lib_obj::get_current()->stage->addEventListener(HX_(\"mouseDown\",27,b1,c2,ee),this->handleMouseClick_dyn(),null(),null(),null());\n  ...\n  243  HXLINE(  76)\t\t::openfl::Lib_obj::get_current()->stage->addEventListener(HX_(\"keyDown\",a1,69,47,9c),this->handleKeyEvent_dyn(),null(),null(),null());\n  244  HXLINE(  77)\t\t::openfl::Lib_obj::get_current()->stage->addEventListener(HX_(\"keyUp\",da,b9,fe,de),this->handleKeyEvent_dyn(),null(),null(),null());\n  245: HXLINE(  79)\t\tthis->_container->addEventListener(HX_(\"mouseOver\",19,4a,0d,f6),this->handleMouseInDebugger_dyn(),null(),null(),null());\n  246: HXLINE(  80)\t\tthis->_container->addEventListener(HX_(\"mouseOut\",69,e7,1d,a4),this->handleMouseInDebugger_dyn(),null(),null(),null());\n  247              \t}\n  248  \n  ...\n  278  }\n  279  \n  280: void Interaction_obj::handleDebuggerVisibilityChanged(){\n  281:             \tHX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_85_handleDebuggerVisibilityChanged)\n  282: HXDLIN(  85)\t\tif (::flixel::FlxG_obj::debugger->visible) {\n  283  HXLINE(  86)\t\t\tthis->saveSystemCursorInfo();\n  284              \t\t}\n  ...\n  289  \n  290  \n  291: HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,handleDebuggerVisibilityChanged,(void))\n  292  \n  293  void Interaction_obj::updateMouse( ::openfl::events::MouseEvent event){\n  ...\n  326  HXLINE( 131)\t\tbool _hx_tmp;\n  327  HXDLIN( 131)\t\tif ((event->type == HX_(\"mouseDown\",27,b1,c2,ee))) {\n  328: HXLINE( 131)\t\t\t_hx_tmp = this->belongsToDebugger(( ( ::openfl::display::DisplayObject)(event->target) ));\n  329              \t\t}\n  330              \t\telse {\n  ...\n  349  HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,handleMouseClick,(void))\n  350  \n  351: bool Interaction_obj::belongsToDebugger( ::openfl::display::DisplayObject object){\n  352:             \tHX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_144_belongsToDebugger)\n  353  HXLINE( 145)\t\tif (hx::IsNull( object )) {\n  354  HXLINE( 146)\t\t\treturn false;\n  355              \t\t}\n  356              \t\telse {\n  357: HXLINE( 147)\t\t\tif (::Std_obj::is(object,hx::ClassOf< ::flixel::_hx_system::debug::FlxDebugger >())) {\n  358  HXLINE( 148)\t\t\t\treturn true;\n  359              \t\t\t}\n  360              \t\t}\n  361: HXLINE( 149)\t\treturn this->belongsToDebugger(object->parent);\n  362              \t}\n  363  \n  364  \n  365: HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,belongsToDebugger,return )\n  366  \n  367: void Interaction_obj::handleMouseInDebugger( ::openfl::events::MouseEvent event){\n  368:             \tHX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_153_handleMouseInDebugger)\n  369  HXLINE( 156)\t\tif (!(this->isActive())) {\n  370  HXLINE( 157)\t\t\treturn;\n  371              \t\t}\n  372  HXLINE( 159)\t\tif ((event->type == HX_(\"mouseOver\",19,4a,0d,f6))) {\n  373: HXLINE( 160)\t\t\tthis->_debuggerInteraction = true;\n  374              \t\t}\n  375              \t\telse {\n  376  HXLINE( 161)\t\t\tif ((event->type == HX_(\"mouseOut\",69,e7,1d,a4))) {\n  377: HXLINE( 162)\t\t\t\tthis->_debuggerInteraction = false;\n  378              \t\t\t}\n  379              \t\t}\n  ...\n  382  \n  383  \n  384: HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,handleMouseInDebugger,(void))\n  385  \n  386  void Interaction_obj::handleKeyEvent( ::openfl::events::KeyboardEvent event){\n  ...\n  400  HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,handleKeyEvent,(void))\n  401  \n  402: void Interaction_obj::addTool( ::flixel::_hx_system::debug::interaction::tools::Tool tool){\n  403              \tHX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_179_addTool)\n  404  HXLINE( 180)\t\ttool->init(hx::ObjectPtr<OBJ_>(this));\n  ...\n  420              \tHX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_199_destroy)\n  421  HXLINE( 200)\t\t::flixel::FlxG_obj::signals->postDraw->remove(this->postDraw_dyn());\n  422: HXLINE( 201)\t\t::flixel::FlxG_obj::debugger->visibilityChanged->remove(this->handleDebuggerVisibilityChanged_dyn());\n  423  HXLINE( 203)\t\t::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_(\"mouseMove\",d6,9b,b5,f4),this->updateMouse_dyn(),null());\n  424  HXLINE( 204)\t\t::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_(\"mouseDown\",27,b1,c2,ee),this->handleMouseClick_dyn(),null());\n  ...\n  427  HXLINE( 207)\t\t::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_(\"keyUp\",da,b9,fe,de),this->handleKeyEvent_dyn(),null());\n  428  HXLINE( 209)\t\tif (hx::IsNotNull( this->_container )) {\n  429: HXLINE( 211)\t\t\tthis->_container->removeEventListener(HX_(\"mouseOver\",19,4a,0d,f6),this->handleMouseInDebugger_dyn(),null());\n  430: HXLINE( 212)\t\t\tthis->_container->removeEventListener(HX_(\"mouseOut\",69,e7,1d,a4),this->handleMouseInDebugger_dyn(),null());\n  431              \t\t}\n  432  HXLINE( 215)\t\tif (hx::IsNotNull( this->_customCursor )) {\n  ...\n  444  bool Interaction_obj::isActive(){\n  445              \tHX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_231_isActive)\n  446: HXDLIN( 231)\t\tif (::flixel::FlxG_obj::debugger->visible) {\n  447  HXDLIN( 231)\t\t\treturn this->get_visible();\n  448              \t\t}\n  ...\n  466  HXDLIN( 241)\t\t\t::Array< ::Dynamic> _g1 = this->_tools;\n  467  HXDLIN( 241)\t\t\twhile((_g < _g1->length)){\n  468: HXLINE( 241)\t\t\t\t ::flixel::_hx_system::debug::interaction::tools::Tool tool = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::debug::interaction::tools::Tool >();\n  469  HXDLIN( 241)\t\t\t\t_g = (_g + (int)1);\n  470  HXLINE( 242)\t\t\t\ttool->update();\n  ...\n  486  HXDLIN( 257)\t\t\t::Array< ::Dynamic> _g1 = this->_tools;\n  487  HXDLIN( 257)\t\t\twhile((_g < _g1->length)){\n  488: HXLINE( 257)\t\t\t\t ::flixel::_hx_system::debug::interaction::tools::Tool tool = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::debug::interaction::tools::Tool >();\n  489  HXDLIN( 257)\t\t\t\t_g = (_g + (int)1);\n  490  HXLINE( 258)\t\t\t\ttool->draw();\n  ...\n  497  HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,postDraw,(void))\n  498  \n  499:  ::openfl::display::Graphics Interaction_obj::getDebugGraphics(){\n  500:             \tHX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_264_getDebugGraphics)\n  501  HXLINE( 265)\t\tif (::flixel::FlxG_obj::renderBlit) {\n  502  HXLINE( 267)\t\t\t::flixel::util::FlxSpriteUtil_obj::flashGfx->clear();\n  ...\n  507  \n  508  \n  509: HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,getDebugGraphics,return )\n  510  \n  511  void Interaction_obj::drawItemsSelection(){\n  512              \tHX_GC_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_279_drawItemsSelection)\n  513: HXLINE( 280)\t\t ::openfl::display::Graphics gfx = this->getDebugGraphics();\n  514  HXLINE( 281)\t\tif (hx::IsNull( gfx )) {\n  515  HXLINE( 282)\t\t\treturn;\n  ...\n  550  HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,drawItemsSelection,(void))\n  551  \n  552:  ::flixel::_hx_system::debug::interaction::tools::Tool Interaction_obj::getTool(hx::Class className){\n  553              \tHX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_302_getTool)\n  554  HXLINE( 303)\t\t{\n  ...\n  556  HXDLIN( 303)\t\t\t::Array< ::Dynamic> _g1 = this->_tools;\n  557  HXDLIN( 303)\t\t\twhile((_g < _g1->length)){\n  558: HXLINE( 303)\t\t\t\t ::flixel::_hx_system::debug::interaction::tools::Tool tool = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::debug::interaction::tools::Tool >();\n  559  HXDLIN( 303)\t\t\t\t_g = (_g + (int)1);\n  560  HXLINE( 304)\t\t\t\tif (::Std_obj::is(tool,className)) {\n  ...\n  598  HXDLIN( 343)\t\tbool _hx_tmp;\n  599  HXDLIN( 343)\t\tif (hx::IsNotNull( this->activeTool )) {\n  600: HXDLIN( 343)\t\t\t_hx_tmp = !(this->_debuggerInteraction);\n  601              \t\t}\n  602              \t\telse {\n  ...\n  651  HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,restoreSystemCursor,(void))\n  652  \n  653: void Interaction_obj::setActiveTool( ::flixel::_hx_system::debug::interaction::tools::Tool value){\n  654              \tHX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_399_setActiveTool)\n  655  HXLINE( 400)\t\tif (hx::IsNotNull( this->activeTool )) {\n  ...\n  835  \n  836  hx::ObjectPtr< Interaction_obj > Interaction_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::Sprite container) {\n  837: \tInteraction_obj *__this = (Interaction_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Interaction_obj), true, \"flixel.system.debug.interaction.Interaction\"));\n  838  \t*(void **)__this = Interaction_obj::_hx_vtable;\n  839  \t__this->__construct(container);\n  ...\n  862  \tHX_MARK_MEMBER_NAME(_wasMouseVisible,\"_wasMouseVisible\");\n  863  \tHX_MARK_MEMBER_NAME(_wasUsingSystemCursor,\"_wasUsingSystemCursor\");\n  864: \tHX_MARK_MEMBER_NAME(_debuggerInteraction,\"_debuggerInteraction\");\n  865  \tHX_MARK_MEMBER_NAME(_flixelPointer,\"_flixelPointer\");\n  866: \t ::flixel::_hx_system::debug::Window_obj::__Mark(HX_MARK_ARG);\n  867  \tHX_MARK_END_CLASS();\n  868  }\n  ...\n  884  \tHX_VISIT_MEMBER_NAME(_wasMouseVisible,\"_wasMouseVisible\");\n  885  \tHX_VISIT_MEMBER_NAME(_wasUsingSystemCursor,\"_wasUsingSystemCursor\");\n  886: \tHX_VISIT_MEMBER_NAME(_debuggerInteraction,\"_debuggerInteraction\");\n  887  \tHX_VISIT_MEMBER_NAME(_flixelPointer,\"_flixelPointer\");\n  888: \t ::flixel::_hx_system::debug::Window_obj::__Visit(HX_VISIT_ARG);\n  889  }\n  890  \n  ...\n  937  \t\tif (HX_FIELD_EQ(inName,\"_wasMouseVisible\") ) { return hx::Val( _wasMouseVisible ); }\n  938  \t\tif (HX_FIELD_EQ(inName,\"handleMouseClick\") ) { return hx::Val( handleMouseClick_dyn() ); }\n  939: \t\tif (HX_FIELD_EQ(inName,\"getDebugGraphics\") ) { return hx::Val( getDebugGraphics_dyn() ); }\n  940  \t\tbreak;\n  941  \tcase 17:\n  942: \t\tif (HX_FIELD_EQ(inName,\"belongsToDebugger\") ) { return hx::Val( belongsToDebugger_dyn() ); }\n  943  \t\tbreak;\n  944  \tcase 18:\n  ...\n  953  \t\tbreak;\n  954  \tcase 20:\n  955: \t\tif (HX_FIELD_EQ(inName,\"_debuggerInteraction\") ) { return hx::Val( _debuggerInteraction ); }\n  956  \t\tif (HX_FIELD_EQ(inName,\"registerCustomCursor\") ) { return hx::Val( registerCustomCursor_dyn() ); }\n  957  \t\tif (HX_FIELD_EQ(inName,\"saveSystemCursorInfo\") ) { return hx::Val( saveSystemCursorInfo_dyn() ); }\n  ...\n  960  \tcase 21:\n  961  \t\tif (HX_FIELD_EQ(inName,\"_wasUsingSystemCursor\") ) { return hx::Val( _wasUsingSystemCursor ); }\n  962: \t\tif (HX_FIELD_EQ(inName,\"handleMouseInDebugger\") ) { return hx::Val( handleMouseInDebugger_dyn() ); }\n  963  \t\tbreak;\n  964  \tcase 24:\n  ...\n  969  \t\tbreak;\n  970  \tcase 31:\n  971: \t\tif (HX_FIELD_EQ(inName,\"handleDebuggerVisibilityChanged\") ) { return hx::Val( handleDebuggerVisibilityChanged_dyn() ); }\n  972  \t}\n  973  \treturn super::__Field(inName,inCallProp);\n  ...\n  990  \t\tbreak;\n  991  \tcase 10:\n  992: \t\tif (HX_FIELD_EQ(inName,\"activeTool\") ) { activeTool=inValue.Cast<  ::flixel::_hx_system::debug::interaction::tools::Tool >(); return inValue; }\n  993  \t\tif (HX_FIELD_EQ(inName,\"_container\") ) { _container=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }\n  994  \t\tbreak;\n  ...\n 1012  \t\tbreak;\n 1013  \tcase 20:\n 1014: \t\tif (HX_FIELD_EQ(inName,\"_debuggerInteraction\") ) { _debuggerInteraction=inValue.Cast< bool >(); return inValue; }\n 1015  \t\tbreak;\n 1016  \tcase 21:\n ....\n 1036  \toutFields->push(HX_HCSTRING(\"_wasMouseVisible\",\"\\x17\",\"\\x92\",\"\\xd7\",\"\\x91\"));\n 1037  \toutFields->push(HX_HCSTRING(\"_wasUsingSystemCursor\",\"\\xff\",\"\\xd8\",\"\\x04\",\"\\xe6\"));\n 1038: \toutFields->push(HX_HCSTRING(\"_debuggerInteraction\",\"\\x32\",\"\\x64\",\"\\xf1\",\"\\x95\"));\n 1039  \toutFields->push(HX_HCSTRING(\"_flixelPointer\",\"\\x02\",\"\\xda\",\"\\xe1\",\"\\x3c\"));\n 1040  \tsuper::__GetFields(outFields);\n ....\n 1043  #if HXCPP_SCRIPTABLE\n 1044  static hx::StorageInfo Interaction_obj_sMemberStorageInfo[] = {\n 1045: \t{hx::fsObject /*::flixel::_hx_system::debug::interaction::tools::Tool*/ ,(int)offsetof(Interaction_obj,activeTool),HX_HCSTRING(\"activeTool\",\"\\x3e\",\"\\x24\",\"\\x2c\",\"\\xf6\")},\n 1046  \t{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(Interaction_obj,selectedItems),HX_HCSTRING(\"selectedItems\",\"\\xa5\",\"\\x87\",\"\\x4e\",\"\\xb8\")},\n 1047  \t{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(Interaction_obj,flixelPointer),HX_HCSTRING(\"flixelPointer\",\"\\xc1\",\"\\xe9\",\"\\x8f\",\"\\xfe\")},\n ....\n 1057  \t{hx::fsBool,(int)offsetof(Interaction_obj,_wasMouseVisible),HX_HCSTRING(\"_wasMouseVisible\",\"\\x17\",\"\\x92\",\"\\xd7\",\"\\x91\")},\n 1058  \t{hx::fsBool,(int)offsetof(Interaction_obj,_wasUsingSystemCursor),HX_HCSTRING(\"_wasUsingSystemCursor\",\"\\xff\",\"\\xd8\",\"\\x04\",\"\\xe6\")},\n 1059: \t{hx::fsBool,(int)offsetof(Interaction_obj,_debuggerInteraction),HX_HCSTRING(\"_debuggerInteraction\",\"\\x32\",\"\\x64\",\"\\xf1\",\"\\x95\")},\n 1060  \t{hx::fsObject /*::flixel::input::FlxPointer*/ ,(int)offsetof(Interaction_obj,_flixelPointer),HX_HCSTRING(\"_flixelPointer\",\"\\x02\",\"\\xda\",\"\\xe1\",\"\\x3c\")},\n 1061  \t{ hx::fsUnknown, 0, null()}\n ....\n 1079  \tHX_HCSTRING(\"_wasMouseVisible\",\"\\x17\",\"\\x92\",\"\\xd7\",\"\\x91\"),\n 1080  \tHX_HCSTRING(\"_wasUsingSystemCursor\",\"\\xff\",\"\\xd8\",\"\\x04\",\"\\xe6\"),\n 1081: \tHX_HCSTRING(\"_debuggerInteraction\",\"\\x32\",\"\\x64\",\"\\xf1\",\"\\x95\"),\n 1082  \tHX_HCSTRING(\"_flixelPointer\",\"\\x02\",\"\\xda\",\"\\xe1\",\"\\x3c\"),\n 1083: \tHX_HCSTRING(\"handleDebuggerVisibilityChanged\",\"\\x19\",\"\\xe7\",\"\\xa4\",\"\\x01\"),\n 1084  \tHX_HCSTRING(\"updateMouse\",\"\\x5c\",\"\\x7f\",\"\\xfd\",\"\\xf1\"),\n 1085  \tHX_HCSTRING(\"handleMouseClick\",\"\\xab\",\"\\x19\",\"\\xf2\",\"\\x35\"),\n 1086: \tHX_HCSTRING(\"belongsToDebugger\",\"\\xb0\",\"\\x1c\",\"\\x03\",\"\\x45\"),\n 1087: \tHX_HCSTRING(\"handleMouseInDebugger\",\"\\xe3\",\"\\x24\",\"\\x6b\",\"\\x87\"),\n 1088  \tHX_HCSTRING(\"handleKeyEvent\",\"\\xc3\",\"\\x95\",\"\\x05\",\"\\x08\"),\n 1089  \tHX_HCSTRING(\"addTool\",\"\\x19\",\"\\x9e\",\"\\x3e\",\"\\x89\"),\n ....\n 1092  \tHX_HCSTRING(\"update\",\"\\x09\",\"\\x86\",\"\\x05\",\"\\x87\"),\n 1093  \tHX_HCSTRING(\"postDraw\",\"\\x84\",\"\\x8c\",\"\\xaf\",\"\\x00\"),\n 1094: \tHX_HCSTRING(\"getDebugGraphics\",\"\\xc8\",\"\\xbb\",\"\\x40\",\"\\x9c\"),\n 1095  \tHX_HCSTRING(\"drawItemsSelection\",\"\\x50\",\"\\xeb\",\"\\x14\",\"\\xb9\"),\n 1096  \tHX_HCSTRING(\"getTool\",\"\\x0e\",\"\\x0b\",\"\\x84\",\"\\x1f\"),\n ....\n 1128  \tInteraction_obj::_hx_vtable = *(void **)dummy;\n 1129  \thx::Static(__mClass) = new hx::Class_obj();\n 1130: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.interaction.Interaction\",\"\\x8e\",\"\\x55\",\"\\xb1\",\"\\x5c\");\n 1131  \t__mClass->mSuper = &super::__SGetClass();\n 1132  \t__mClass->mConstructEmpty = &__CreateEmpty;\n ....\n 1152  } // end namespace flixel\n 1153  } // end namespace system\n 1154: } // end namespace debug\n 1155  } // end namespace interaction\n 1156  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/interaction/tools/Eraser.cpp:\n   26  #include <flixel/group/FlxTypedGroupIterator.h>\n   27  #endif\n   28: #ifndef INCLUDED_flixel_system_debug_Window\n   29: #include <flixel/system/debug/Window.h>\n   30  #endif\n   31: #ifndef INCLUDED_flixel_system_debug_interaction_Interaction\n   32: #include <flixel/system/debug/interaction/Interaction.h>\n   33  #endif\n   34: #ifndef INCLUDED_flixel_system_debug_interaction_tools_Eraser\n   35: #include <flixel/system/debug/interaction/tools/Eraser.h>\n   36  #endif\n   37: #ifndef INCLUDED_flixel_system_debug_interaction_tools_Tool\n   38: #include <flixel/system/debug/interaction/tools/Tool.h>\n   39  #endif\n   40  #ifndef INCLUDED_flixel_util_IFlxDestroyable\n   ..\n   63  #endif\n   64  \n   65: HX_DEFINE_STACK_FRAME(_hx_pos_741757cec8ede88f_18_new,\"flixel.system.debug.interaction.tools.Eraser\",\"new\",0xafc41bf5,\"flixel.system.debug.interaction.tools.Eraser.new\",\"flixel/system/debug/interaction/tools/Eraser.hx\",18,0xa546bf98)\n   66: HX_LOCAL_STACK_FRAME(_hx_pos_741757cec8ede88f_21_init,\"flixel.system.debug.interaction.tools.Eraser\",\"init\",0x188d11db,\"flixel.system.debug.interaction.tools.Eraser.init\",\"flixel/system/debug/interaction/tools/Eraser.hx\",21,0xa546bf98)\n   67: HX_LOCAL_STACK_FRAME(_hx_pos_741757cec8ede88f_29_update,\"flixel.system.debug.interaction.tools.Eraser\",\"update\",0x1312e594,\"flixel.system.debug.interaction.tools.Eraser.update\",\"flixel/system/debug/interaction/tools/Eraser.hx\",29,0xa546bf98)\n   68: HX_LOCAL_STACK_FRAME(_hx_pos_741757cec8ede88f_34_activate,\"flixel.system.debug.interaction.tools.Eraser\",\"activate\",0x9778b3fe,\"flixel.system.debug.interaction.tools.Eraser.activate\",\"flixel/system/debug/interaction/tools/Eraser.hx\",34,0xa546bf98)\n   69: HX_LOCAL_STACK_FRAME(_hx_pos_741757cec8ede88f_42_doDeletion,\"flixel.system.debug.interaction.tools.Eraser\",\"doDeletion\",0x007d62c4,\"flixel.system.debug.interaction.tools.Eraser.doDeletion\",\"flixel/system/debug/interaction/tools/Eraser.hx\",42,0xa546bf98)\n   70: HX_LOCAL_STACK_FRAME(_hx_pos_741757cec8ede88f_53_findAndDelete,\"flixel.system.debug.interaction.tools.Eraser\",\"findAndDelete\",0xc5f7a2be,\"flixel.system.debug.interaction.tools.Eraser.findAndDelete\",\"flixel/system/debug/interaction/tools/Eraser.hx\",53,0xa546bf98)\n   71: HX_LOCAL_STACK_FRAME(_hx_pos_741757cec8ede88f_73_removeFromMemory,\"flixel.system.debug.interaction.tools.Eraser\",\"removeFromMemory\",0x828b48ba,\"flixel.system.debug.interaction.tools.Eraser.removeFromMemory\",\"flixel/system/debug/interaction/tools/Eraser.hx\",73,0xa546bf98)\n   72  namespace flixel{\n   73  namespace _hx_system{\n   74: namespace debug{\n   75  namespace interaction{\n   76  namespace tools{\n   ..\n  112  }\n  113  \n  114:  ::flixel::_hx_system::debug::interaction::tools::Tool Eraser_obj::init( ::flixel::_hx_system::debug::interaction::Interaction Brain){\n  115              \tHX_STACKFRAME(&_hx_pos_741757cec8ede88f_21_init)\n  116  HXLINE(  22)\t\tthis->super::init(Brain);\n  ...\n  200  \n  201  hx::ObjectPtr< Eraser_obj > Eraser_obj::__alloc(hx::Ctx *_hx_ctx) {\n  202: \tEraser_obj *__this = (Eraser_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Eraser_obj), true, \"flixel.system.debug.interaction.tools.Eraser\"));\n  203  \t*(void **)__this = Eraser_obj::_hx_vtable;\n  204  \t__this->__construct();\n  ...\n  266  \tEraser_obj::_hx_vtable = *(void **)dummy;\n  267  \thx::Static(__mClass) = new hx::Class_obj();\n  268: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.interaction.tools.Eraser\",\"\\x83\",\"\\xfd\",\"\\x47\",\"\\x13\");\n  269  \t__mClass->mSuper = &super::__SGetClass();\n  270  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  290  } // end namespace flixel\n  291  } // end namespace system\n  292: } // end namespace debug\n  293  } // end namespace interaction\n  294  } // end namespace tools\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/interaction/tools/GraphicCursorCross.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_interaction_tools_GraphicCursorCross\n    5: #include <flixel/system/debug/interaction/tools/GraphicCursorCross.h>\n    6  #endif\n    7  #ifndef INCLUDED_haxe_Resource\n    .\n   33  #endif\n   34  \n   35: HX_DEFINE_STACK_FRAME(_hx_pos_27faf3a2eb12516e_51_new,\"flixel.system.debug.interaction.tools.GraphicCursorCross\",\"new\",0x7ff5abab,\"flixel.system.debug.interaction.tools.GraphicCursorCross.new\",\"openfl/_internal/macros/AssetsMacro.hx\",51,0xf7db08ab)\n   36: HX_LOCAL_STACK_FRAME(_hx_pos_d3734fbf89df3b5e_1_boot,\"flixel.system.debug.interaction.tools.GraphicCursorCross\",\"boot\",0x6f198a87,\"flixel.system.debug.interaction.tools.GraphicCursorCross.boot\",\"?\",1,0x0000003f)\n   37  namespace flixel{\n   38  namespace _hx_system{\n   39: namespace debug{\n   40  namespace interaction{\n   41  namespace tools{\n   ..\n   46              \tHX_STACKFRAME(&_hx_pos_27faf3a2eb12516e_51_new)\n   47  HXLINE(  83)\t\tsuper::__construct((int)0,(int)0,transparent,fillRGBA);\n   48: HXLINE(  85)\t\t ::openfl::utils::ByteArrayData byteArray = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(::haxe::Resource_obj::getBytes(::flixel::_hx_system::debug::interaction::tools::GraphicCursorCross_obj::resourceName));\n   49  HXLINE(  86)\t\t{\n   50  HXLINE(  86)\t\t\t ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(byteArray));\n   ..\n   82  \n   83  hx::ObjectPtr< GraphicCursorCross_obj > GraphicCursorCross_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA) {\n   84: \tGraphicCursorCross_obj *__this = (GraphicCursorCross_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GraphicCursorCross_obj), true, \"flixel.system.debug.interaction.tools.GraphicCursorCross\"));\n   85  \t*(void **)__this = GraphicCursorCross_obj::_hx_vtable;\n   86  \t__this->__construct(width,height,__o_transparent,__o_fillRGBA);\n   ..\n  143  \tGraphicCursorCross_obj::_hx_vtable = *(void **)dummy;\n  144  \thx::Static(__mClass) = new hx::Class_obj();\n  145: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.interaction.tools.GraphicCursorCross\",\"\\x39\",\"\\xfa\",\"\\xdd\",\"\\xaf\");\n  146  \t__mClass->mSuper = &super::__SGetClass();\n  147  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  169  {\n  170              \tHX_STACKFRAME(&_hx_pos_d3734fbf89df3b5e_1_boot)\n  171: HXDLIN(   1)\t\tresourceName = HX_(\"__ASSET__:bitmap_flixel_system_debug_interaction_tools_GraphicCursorCross\",12,f7,e2,fa);\n  172              \t}\n  173  }\n  ...\n  175  } // end namespace flixel\n  176  } // end namespace system\n  177: } // end namespace debug\n  178  } // end namespace interaction\n  179  } // end namespace tools\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/interaction/tools/GraphicEraserTool.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_interaction_tools_GraphicEraserTool\n    5: #include <flixel/system/debug/interaction/tools/GraphicEraserTool.h>\n    6  #endif\n    7  #ifndef INCLUDED_haxe_Resource\n    .\n   33  #endif\n   34  \n   35: HX_DEFINE_STACK_FRAME(_hx_pos_961c14ffa7c1ed7f_51_new,\"flixel.system.debug.interaction.tools.GraphicEraserTool\",\"new\",0x2b44df27,\"flixel.system.debug.interaction.tools.GraphicEraserTool.new\",\"openfl/_internal/macros/AssetsMacro.hx\",51,0xf7db08ab)\n   36: HX_LOCAL_STACK_FRAME(_hx_pos_cb03c3d9d9578e55_1_boot,\"flixel.system.debug.interaction.tools.GraphicEraserTool\",\"boot\",0xa917638b,\"flixel.system.debug.interaction.tools.GraphicEraserTool.boot\",\"?\",1,0x0000003f)\n   37  namespace flixel{\n   38  namespace _hx_system{\n   39: namespace debug{\n   40  namespace interaction{\n   41  namespace tools{\n   ..\n   46              \tHX_STACKFRAME(&_hx_pos_961c14ffa7c1ed7f_51_new)\n   47  HXLINE(  83)\t\tsuper::__construct((int)0,(int)0,transparent,fillRGBA);\n   48: HXLINE(  85)\t\t ::openfl::utils::ByteArrayData byteArray = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(::haxe::Resource_obj::getBytes(::flixel::_hx_system::debug::interaction::tools::GraphicEraserTool_obj::resourceName));\n   49  HXLINE(  86)\t\t{\n   50  HXLINE(  86)\t\t\t ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(byteArray));\n   ..\n   82  \n   83  hx::ObjectPtr< GraphicEraserTool_obj > GraphicEraserTool_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA) {\n   84: \tGraphicEraserTool_obj *__this = (GraphicEraserTool_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GraphicEraserTool_obj), true, \"flixel.system.debug.interaction.tools.GraphicEraserTool\"));\n   85  \t*(void **)__this = GraphicEraserTool_obj::_hx_vtable;\n   86  \t__this->__construct(width,height,__o_transparent,__o_fillRGBA);\n   ..\n  143  \tGraphicEraserTool_obj::_hx_vtable = *(void **)dummy;\n  144  \thx::Static(__mClass) = new hx::Class_obj();\n  145: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.interaction.tools.GraphicEraserTool\",\"\\xb5\",\"\\xbf\",\"\\x36\",\"\\x79\");\n  146  \t__mClass->mSuper = &super::__SGetClass();\n  147  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  169  {\n  170              \tHX_STACKFRAME(&_hx_pos_cb03c3d9d9578e55_1_boot)\n  171: HXDLIN(   1)\t\tresourceName = HX_(\"__ASSET__:bitmap_flixel_system_debug_interaction_tools_GraphicEraserTool\",fc,e0,4e,03);\n  172              \t}\n  173  }\n  ...\n  175  } // end namespace flixel\n  176  } // end namespace system\n  177: } // end namespace debug\n  178  } // end namespace interaction\n  179  } // end namespace tools\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/interaction/tools/GraphicMoverTool.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_interaction_tools_GraphicMoverTool\n    5: #include <flixel/system/debug/interaction/tools/GraphicMoverTool.h>\n    6  #endif\n    7  #ifndef INCLUDED_haxe_Resource\n    .\n   33  #endif\n   34  \n   35: HX_DEFINE_STACK_FRAME(_hx_pos_2673c31faa79cecb_51_new,\"flixel.system.debug.interaction.tools.GraphicMoverTool\",\"new\",0x5d2174da,\"flixel.system.debug.interaction.tools.GraphicMoverTool.new\",\"openfl/_internal/macros/AssetsMacro.hx\",51,0xf7db08ab)\n   36: HX_LOCAL_STACK_FRAME(_hx_pos_ed6eb6e0daea6016_1_boot,\"flixel.system.debug.interaction.tools.GraphicMoverTool\",\"boot\",0x183dca78,\"flixel.system.debug.interaction.tools.GraphicMoverTool.boot\",\"?\",1,0x0000003f)\n   37  namespace flixel{\n   38  namespace _hx_system{\n   39: namespace debug{\n   40  namespace interaction{\n   41  namespace tools{\n   ..\n   46              \tHX_STACKFRAME(&_hx_pos_2673c31faa79cecb_51_new)\n   47  HXLINE(  83)\t\tsuper::__construct((int)0,(int)0,transparent,fillRGBA);\n   48: HXLINE(  85)\t\t ::openfl::utils::ByteArrayData byteArray = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(::haxe::Resource_obj::getBytes(::flixel::_hx_system::debug::interaction::tools::GraphicMoverTool_obj::resourceName));\n   49  HXLINE(  86)\t\t{\n   50  HXLINE(  86)\t\t\t ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(byteArray));\n   ..\n   82  \n   83  hx::ObjectPtr< GraphicMoverTool_obj > GraphicMoverTool_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA) {\n   84: \tGraphicMoverTool_obj *__this = (GraphicMoverTool_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GraphicMoverTool_obj), true, \"flixel.system.debug.interaction.tools.GraphicMoverTool\"));\n   85  \t*(void **)__this = GraphicMoverTool_obj::_hx_vtable;\n   86  \t__this->__construct(width,height,__o_transparent,__o_fillRGBA);\n   ..\n  143  \tGraphicMoverTool_obj::_hx_vtable = *(void **)dummy;\n  144  \thx::Static(__mClass) = new hx::Class_obj();\n  145: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.interaction.tools.GraphicMoverTool\",\"\\xe8\",\"\\xbf\",\"\\x23\",\"\\x53\");\n  146  \t__mClass->mSuper = &super::__SGetClass();\n  147  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  169  {\n  170              \tHX_STACKFRAME(&_hx_pos_ed6eb6e0daea6016_1_boot)\n  171: HXDLIN(   1)\t\tresourceName = HX_(\"__ASSET__:bitmap_flixel_system_debug_interaction_tools_GraphicMoverTool\",81,a4,f3,1e);\n  172              \t}\n  173  }\n  ...\n  175  } // end namespace flixel\n  176  } // end namespace system\n  177: } // end namespace debug\n  178  } // end namespace interaction\n  179  } // end namespace tools\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/interaction/tools/Mover.cpp:\n   17  #include <flixel/math/FlxPoint.h>\n   18  #endif\n   19: #ifndef INCLUDED_flixel_system_debug_Window\n   20: #include <flixel/system/debug/Window.h>\n   21  #endif\n   22: #ifndef INCLUDED_flixel_system_debug_interaction_Interaction\n   23: #include <flixel/system/debug/interaction/Interaction.h>\n   24  #endif\n   25: #ifndef INCLUDED_flixel_system_debug_interaction_tools_GraphicMoverTool\n   26: #include <flixel/system/debug/interaction/tools/GraphicMoverTool.h>\n   27  #endif\n   28: #ifndef INCLUDED_flixel_system_debug_interaction_tools_Mover\n   29: #include <flixel/system/debug/interaction/tools/Mover.h>\n   30  #endif\n   31: #ifndef INCLUDED_flixel_system_debug_interaction_tools_Pointer\n   32: #include <flixel/system/debug/interaction/tools/Pointer.h>\n   33  #endif\n   34: #ifndef INCLUDED_flixel_system_debug_interaction_tools_Tool\n   35: #include <flixel/system/debug/interaction/tools/Tool.h>\n   36  #endif\n   37  #ifndef INCLUDED_flixel_util_IFlxDestroyable\n   ..\n   66  #endif\n   67  \n   68: HX_DEFINE_STACK_FRAME(_hx_pos_a3cdf69c667c8d41_17_new,\"flixel.system.debug.interaction.tools.Mover\",\"new\",0x9079915c,\"flixel.system.debug.interaction.tools.Mover.new\",\"flixel/system/debug/interaction/tools/Mover.hx\",17,0xc1a785b7)\n   69: HX_LOCAL_STACK_FRAME(_hx_pos_a3cdf69c667c8d41_23_init,\"flixel.system.debug.interaction.tools.Mover\",\"init\",0xd69e5694,\"flixel.system.debug.interaction.tools.Mover.init\",\"flixel/system/debug/interaction/tools/Mover.hx\",23,0xc1a785b7)\n   70: HX_LOCAL_STACK_FRAME(_hx_pos_a3cdf69c667c8d41_36_update,\"flixel.system.debug.interaction.tools.Mover\",\"update\",0x6b898a8d,\"flixel.system.debug.interaction.tools.Mover.update\",\"flixel/system/debug/interaction/tools/Mover.hx\",36,0xc1a785b7)\n   71: HX_LOCAL_STACK_FRAME(_hx_pos_a3cdf69c667c8d41_54_stopDragging,\"flixel.system.debug.interaction.tools.Mover\",\"stopDragging\",0x8f5cfa75,\"flixel.system.debug.interaction.tools.Mover.stopDragging\",\"flixel/system/debug/interaction/tools/Mover.hx\",54,0xc1a785b7)\n   72: HX_LOCAL_STACK_FRAME(_hx_pos_a3cdf69c667c8d41_58_startDragging,\"flixel.system.debug.interaction.tools.Mover\",\"startDragging\",0xf80ef34d,\"flixel.system.debug.interaction.tools.Mover.startDragging\",\"flixel/system/debug/interaction/tools/Mover.hx\",58,0xc1a785b7)\n   73: HX_LOCAL_STACK_FRAME(_hx_pos_a3cdf69c667c8d41_72_doDragging,\"flixel.system.debug.interaction.tools.Mover\",\"doDragging\",0xb6bbe9fe,\"flixel.system.debug.interaction.tools.Mover.doDragging\",\"flixel/system/debug/interaction/tools/Mover.hx\",72,0xc1a785b7)\n   74  namespace flixel{\n   75  namespace _hx_system{\n   76: namespace debug{\n   77  namespace interaction{\n   78  namespace tools{\n   ..\n  115  }\n  116  \n  117:  ::flixel::_hx_system::debug::interaction::tools::Tool Mover_obj::init( ::flixel::_hx_system::debug::interaction::Interaction brain){\n  118              \tHX_GC_STACKFRAME(&_hx_pos_a3cdf69c667c8d41_23_init)\n  119  HXLINE(  24)\t\tthis->super::init(brain);\n  ...\n  121  HXLINE(  27)\t\tthis->_name = HX_(\"Mover\",21,3c,93,9f);\n  122  HXLINE(  28)\t\tthis->_shortcut = HX_(\"Shift\",62,5c,50,0f);\n  123: HXLINE(  29)\t\tthis->setButton(hx::ClassOf< ::flixel::_hx_system::debug::interaction::tools::GraphicMoverTool >());\n  124: HXLINE(  30)\t\tthis->setCursor( ::flixel::_hx_system::debug::interaction::tools::GraphicMoverTool_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null()));\n  125  HXLINE(  32)\t\treturn hx::ObjectPtr<OBJ_>(this);\n  126              \t}\n  ...\n  187  HXLINE(  67)\t\tbool _hx_tmp;\n  188  HXDLIN(  67)\t\tif (!(this->isActive())) {\n  189: HXLINE(  67)\t\t\t_hx_tmp = ::Std_obj::is(this->_brain->activeTool,hx::ClassOf< ::flixel::_hx_system::debug::interaction::tools::Pointer >());\n  190              \t\t}\n  191              \t\telse {\n  ...\n  193              \t\t}\n  194  HXDLIN(  67)\t\tif (_hx_tmp) {\n  195: HXLINE(  68)\t\t\thx::TCast<  ::flixel::_hx_system::debug::interaction::tools::Pointer >::cast(this->_brain->activeTool)->cancelSelection();\n  196              \t\t}\n  197              \t}\n  ...\n  239  \n  240  hx::ObjectPtr< Mover_obj > Mover_obj::__alloc(hx::Ctx *_hx_ctx) {\n  241: \tMover_obj *__this = (Mover_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Mover_obj), true, \"flixel.system.debug.interaction.tools.Mover\"));\n  242  \t*(void **)__this = Mover_obj::_hx_vtable;\n  243  \t__this->__construct();\n  ...\n  254  \tHX_MARK_MEMBER_NAME(_dragging,\"_dragging\");\n  255  \tHX_MARK_MEMBER_NAME(_lastCursorPosition,\"_lastCursorPosition\");\n  256: \t ::flixel::_hx_system::debug::interaction::tools::Tool_obj::__Mark(HX_MARK_ARG);\n  257  \tHX_MARK_END_CLASS();\n  258  }\n  ...\n  262  \tHX_VISIT_MEMBER_NAME(_dragging,\"_dragging\");\n  263  \tHX_VISIT_MEMBER_NAME(_lastCursorPosition,\"_lastCursorPosition\");\n  264: \t ::flixel::_hx_system::debug::interaction::tools::Tool_obj::__Visit(HX_VISIT_ARG);\n  265  }\n  266  \n  ...\n  348  \tMover_obj::_hx_vtable = *(void **)dummy;\n  349  \thx::Static(__mClass) = new hx::Class_obj();\n  350: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.interaction.tools.Mover\",\"\\x6a\",\"\\xf3\",\"\\x4e\",\"\\x4b\");\n  351  \t__mClass->mSuper = &super::__SGetClass();\n  352  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  372  } // end namespace flixel\n  373  } // end namespace system\n  374: } // end namespace debug\n  375  } // end namespace interaction\n  376  } // end namespace tools\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/interaction/tools/Pointer.cpp:\n   29  #include <flixel/math/FlxRect.h>\n   30  #endif\n   31: #ifndef INCLUDED_flixel_system_debug_Window\n   32: #include <flixel/system/debug/Window.h>\n   33  #endif\n   34: #ifndef INCLUDED_flixel_system_debug_interaction_Interaction\n   35: #include <flixel/system/debug/interaction/Interaction.h>\n   36  #endif\n   37: #ifndef INCLUDED_flixel_system_debug_interaction_tools_GraphicCursorCross\n   38: #include <flixel/system/debug/interaction/tools/GraphicCursorCross.h>\n   39  #endif\n   40: #ifndef INCLUDED_flixel_system_debug_interaction_tools_Pointer\n   41: #include <flixel/system/debug/interaction/tools/Pointer.h>\n   42  #endif\n   43: #ifndef INCLUDED_flixel_system_debug_interaction_tools_Tool\n   44: #include <flixel/system/debug/interaction/tools/Tool.h>\n   45  #endif\n   46  #ifndef INCLUDED_flixel_system_frontEnds_ConsoleFrontEnd\n   ..\n   96  #endif\n   97  \n   98: HX_DEFINE_STACK_FRAME(_hx_pos_dbe290ee08dc8b7a_21_new,\"flixel.system.debug.interaction.tools.Pointer\",\"new\",0x18297018,\"flixel.system.debug.interaction.tools.Pointer.new\",\"flixel/system/debug/interaction/tools/Pointer.hx\",21,0x6c93613b)\n   99: HX_LOCAL_STACK_FRAME(_hx_pos_dbe290ee08dc8b7a_31_init,\"flixel.system.debug.interaction.tools.Pointer\",\"init\",0x08d15c58,\"flixel.system.debug.interaction.tools.Pointer.init\",\"flixel/system/debug/interaction/tools/Pointer.hx\",31,0x6c93613b)\n  100: HX_LOCAL_STACK_FRAME(_hx_pos_dbe290ee08dc8b7a_42_update,\"flixel.system.debug.interaction.tools.Pointer\",\"update\",0xd4dc8951,\"flixel.system.debug.interaction.tools.Pointer.update\",\"flixel/system/debug/interaction/tools/Pointer.hx\",42,0x6c93613b)\n  101: HX_LOCAL_STACK_FRAME(_hx_pos_dbe290ee08dc8b7a_78_calculateSelectionArea,\"flixel.system.debug.interaction.tools.Pointer\",\"calculateSelectionArea\",0x6774abfb,\"flixel.system.debug.interaction.tools.Pointer.calculateSelectionArea\",\"flixel/system/debug/interaction/tools/Pointer.hx\",78,0x6c93613b)\n  102: HX_LOCAL_STACK_FRAME(_hx_pos_dbe290ee08dc8b7a_102_startSelection,\"flixel.system.debug.interaction.tools.Pointer\",\"startSelection\",0x524d52d2,\"flixel.system.debug.interaction.tools.Pointer.startSelection\",\"flixel/system/debug/interaction/tools/Pointer.hx\",102,0x6c93613b)\n  103: HX_LOCAL_STACK_FRAME(_hx_pos_dbe290ee08dc8b7a_116_cancelSelection,\"flixel.system.debug.interaction.tools.Pointer\",\"cancelSelection\",0xa173bf2a,\"flixel.system.debug.interaction.tools.Pointer.cancelSelection\",\"flixel/system/debug/interaction/tools/Pointer.hx\",116,0x6c93613b)\n  104: HX_LOCAL_STACK_FRAME(_hx_pos_dbe290ee08dc8b7a_130_stopSelection,\"flixel.system.debug.interaction.tools.Pointer\",\"stopSelection\",0x29b84da2,\"flixel.system.debug.interaction.tools.Pointer.stopSelection\",\"flixel/system/debug/interaction/tools/Pointer.hx\",130,0x6c93613b)\n  105: HX_LOCAL_STACK_FRAME(_hx_pos_dbe290ee08dc8b7a_153_updateConsoleSelection,\"flixel.system.debug.interaction.tools.Pointer\",\"updateConsoleSelection\",0xdb302166,\"flixel.system.debug.interaction.tools.Pointer.updateConsoleSelection\",\"flixel/system/debug/interaction/tools/Pointer.hx\",153,0x6c93613b)\n  106: HX_LOCAL_STACK_FRAME(_hx_pos_dbe290ee08dc8b7a_162_handleItemAddition,\"flixel.system.debug.interaction.tools.Pointer\",\"handleItemAddition\",0xee76343f,\"flixel.system.debug.interaction.tools.Pointer.handleItemAddition\",\"flixel/system/debug/interaction/tools/Pointer.hx\",162,0x6c93613b)\n  107: HX_LOCAL_STACK_FRAME(_hx_pos_dbe290ee08dc8b7a_185_draw,\"flixel.system.debug.interaction.tools.Pointer\",\"draw\",0x05864d4c,\"flixel.system.debug.interaction.tools.Pointer.draw\",\"flixel/system/debug/interaction/tools/Pointer.hx\",185,0x6c93613b)\n  108  namespace flixel{\n  109  namespace _hx_system{\n  110: namespace debug{\n  111  namespace interaction{\n  112  namespace tools{\n  ...\n  154  }\n  155  \n  156:  ::flixel::_hx_system::debug::interaction::tools::Tool Pointer_obj::init( ::flixel::_hx_system::debug::interaction::Interaction brain){\n  157              \tHX_GC_STACKFRAME(&_hx_pos_dbe290ee08dc8b7a_31_init)\n  158  HXLINE(  32)\t\tthis->super::init(brain);\n  159  HXLINE(  34)\t\tthis->_name = HX_(\"Pointer\",9d,e8,72,1e);\n  160: HXLINE(  35)\t\tthis->setButton(hx::ClassOf< ::flixel::_hx_system::debug::interaction::tools::GraphicCursorCross >());\n  161: HXLINE(  36)\t\tthis->setCursor( ::flixel::_hx_system::debug::interaction::tools::GraphicCursorCross_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null()));\n  162  HXLINE(  38)\t\treturn hx::ObjectPtr<OBJ_>(this);\n  163              \t}\n  ...\n  337  void Pointer_obj::draw(){\n  338              \tHX_STACKFRAME(&_hx_pos_dbe290ee08dc8b7a_185_draw)\n  339: HXLINE( 186)\t\t ::openfl::display::Graphics gfx = this->_brain->getDebugGraphics();\n  340  HXLINE( 187)\t\tif (hx::IsNull( gfx )) {\n  341  HXLINE( 188)\t\t\treturn;\n  ...\n  360  \n  361  hx::ObjectPtr< Pointer_obj > Pointer_obj::__alloc(hx::Ctx *_hx_ctx) {\n  362: \tPointer_obj *__this = (Pointer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Pointer_obj), true, \"flixel.system.debug.interaction.tools.Pointer\"));\n  363  \t*(void **)__this = Pointer_obj::_hx_vtable;\n  364  \t__this->__construct();\n  ...\n  379  \tHX_MARK_MEMBER_NAME(_selectionArea,\"_selectionArea\");\n  380  \tHX_MARK_MEMBER_NAME(_itemsInSelectionArea,\"_itemsInSelectionArea\");\n  381: \t ::flixel::_hx_system::debug::interaction::tools::Tool_obj::__Mark(HX_MARK_ARG);\n  382  \tHX_MARK_END_CLASS();\n  383  }\n  ...\n  391  \tHX_VISIT_MEMBER_NAME(_selectionArea,\"_selectionArea\");\n  392  \tHX_VISIT_MEMBER_NAME(_itemsInSelectionArea,\"_itemsInSelectionArea\");\n  393: \t ::flixel::_hx_system::debug::interaction::tools::Tool_obj::__Visit(HX_VISIT_ARG);\n  394  }\n  395  \n  ...\n  517  \tPointer_obj::_hx_vtable = *(void **)dummy;\n  518  \thx::Static(__mClass) = new hx::Class_obj();\n  519: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.interaction.tools.Pointer\",\"\\x26\",\"\\xc4\",\"\\x01\",\"\\xfa\");\n  520  \t__mClass->mSuper = &super::__SGetClass();\n  521  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  541  } // end namespace flixel\n  542  } // end namespace system\n  543: } // end namespace debug\n  544  } // end namespace interaction\n  545  } // end namespace tools\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/interaction/tools/Tool.cpp:\n    5  #include <Type.h>\n    6  #endif\n    7: #ifndef INCLUDED_flixel_system_debug_Tooltip\n    8: #include <flixel/system/debug/Tooltip.h>\n    9  #endif\n   10: #ifndef INCLUDED_flixel_system_debug_Window\n   11: #include <flixel/system/debug/Window.h>\n   12  #endif\n   13: #ifndef INCLUDED_flixel_system_debug_interaction_Interaction\n   14: #include <flixel/system/debug/interaction/Interaction.h>\n   15  #endif\n   16: #ifndef INCLUDED_flixel_system_debug_interaction_tools_Tool\n   17: #include <flixel/system/debug/interaction/tools/Tool.h>\n   18  #endif\n   19  #ifndef INCLUDED_flixel_system_ui_FlxSystemButton\n   ..\n   48  #endif\n   49  \n   50: HX_DEFINE_STACK_FRAME(_hx_pos_d2c099c398a4a018_14_new,\"flixel.system.debug.interaction.tools.Tool\",\"new\",0xbd6c80c1,\"flixel.system.debug.interaction.tools.Tool.new\",\"flixel/system/debug/interaction/tools/Tool.hx\",14,0xb5d06f0c)\n   51: HX_LOCAL_STACK_FRAME(_hx_pos_d2c099c398a4a018_24_init,\"flixel.system.debug.interaction.tools.Tool\",\"init\",0xfe3cdf8f,\"flixel.system.debug.interaction.tools.Tool.init\",\"flixel/system/debug/interaction/tools/Tool.hx\",24,0xb5d06f0c)\n   52: HX_LOCAL_STACK_FRAME(_hx_pos_d2c099c398a4a018_29_update,\"flixel.system.debug.interaction.tools.Tool\",\"update\",0x9e988848,\"flixel.system.debug.interaction.tools.Tool.update\",\"flixel/system/debug/interaction/tools/Tool.hx\",29,0xb5d06f0c)\n   53: HX_LOCAL_STACK_FRAME(_hx_pos_d2c099c398a4a018_31_draw,\"flixel.system.debug.interaction.tools.Tool\",\"draw\",0xfaf1d083,\"flixel.system.debug.interaction.tools.Tool.draw\",\"flixel/system/debug/interaction/tools/Tool.hx\",31,0xb5d06f0c)\n   54: HX_LOCAL_STACK_FRAME(_hx_pos_d2c099c398a4a018_33_activate,\"flixel.system.debug.interaction.tools.Tool\",\"activate\",0x49b36bb2,\"flixel.system.debug.interaction.tools.Tool.activate\",\"flixel/system/debug/interaction/tools/Tool.hx\",33,0xb5d06f0c)\n   55: HX_LOCAL_STACK_FRAME(_hx_pos_d2c099c398a4a018_35_deactivate,\"flixel.system.debug.interaction.tools.Tool\",\"deactivate\",0x2c7be9f3,\"flixel.system.debug.interaction.tools.Tool.deactivate\",\"flixel/system/debug/interaction/tools/Tool.hx\",35,0xb5d06f0c)\n   56: HX_LOCAL_STACK_FRAME(_hx_pos_d2c099c398a4a018_37_destroy,\"flixel.system.debug.interaction.tools.Tool\",\"destroy\",0xad9521db,\"flixel.system.debug.interaction.tools.Tool.destroy\",\"flixel/system/debug/interaction/tools/Tool.hx\",37,0xb5d06f0c)\n   57: HX_LOCAL_STACK_FRAME(_hx_pos_d2c099c398a4a018_41_isActive,\"flixel.system.debug.interaction.tools.Tool\",\"isActive\",0xd2b72d4f,\"flixel.system.debug.interaction.tools.Tool.isActive\",\"flixel/system/debug/interaction/tools/Tool.hx\",41,0xb5d06f0c)\n   58: HX_LOCAL_STACK_FRAME(_hx_pos_d2c099c398a4a018_45_setButton,\"flixel.system.debug.interaction.tools.Tool\",\"setButton\",0x5be68655,\"flixel.system.debug.interaction.tools.Tool.setButton\",\"flixel/system/debug/interaction/tools/Tool.hx\",45,0xb5d06f0c)\n   59: HX_LOCAL_STACK_FRAME(_hx_pos_d2c099c398a4a018_56_setCursor,\"flixel.system.debug.interaction.tools.Tool\",\"setCursor\",0xc0eeb339,\"flixel.system.debug.interaction.tools.Tool.setCursor\",\"flixel/system/debug/interaction/tools/Tool.hx\",56,0xb5d06f0c)\n   60: HX_LOCAL_STACK_FRAME(_hx_pos_d2c099c398a4a018_63_onButtonClicked,\"flixel.system.debug.interaction.tools.Tool\",\"onButtonClicked\",0x655fe417,\"flixel.system.debug.interaction.tools.Tool.onButtonClicked\",\"flixel/system/debug/interaction/tools/Tool.hx\",63,0xb5d06f0c)\n   61: HX_LOCAL_STACK_FRAME(_hx_pos_d2c099c398a4a018_68_getName,\"flixel.system.debug.interaction.tools.Tool\",\"getName\",0xa49116e2,\"flixel.system.debug.interaction.tools.Tool.getName\",\"flixel/system/debug/interaction/tools/Tool.hx\",68,0xb5d06f0c)\n   62  namespace flixel{\n   63  namespace _hx_system{\n   64: namespace debug{\n   65  namespace interaction{\n   66  namespace tools{\n   ..\n  103  }\n  104  \n  105: static ::flixel::util::IFlxDestroyable_obj _hx_flixel_system_debug_interaction_tools_Tool__hx_flixel_util_IFlxDestroyable= {\n  106: \t( void (hx::Object::*)())&::flixel::_hx_system::debug::interaction::tools::Tool_obj::destroy,\n  107  };\n  108  \n  109  void *Tool_obj::_hx_getInterface(int inHash) {\n  110  \tswitch(inHash) {\n  111: \t\tcase (int)0xd4fe2fcd: return &_hx_flixel_system_debug_interaction_tools_Tool__hx_flixel_util_IFlxDestroyable;\n  112  \t}\n  113  \treturn super::_hx_getInterface(inHash);\n  114  }\n  115  \n  116:  ::flixel::_hx_system::debug::interaction::tools::Tool Tool_obj::init( ::flixel::_hx_system::debug::interaction::Interaction brain){\n  117              \tHX_STACKFRAME(&_hx_pos_d2c099c398a4a018_24_init)\n  118  HXLINE(  25)\t\tthis->_brain = brain;\n  ...\n  180  HXLINE(  51)\t\t\ttooltip = (tooltip + ((HX_(\" (\",08,1c,00,00) + this->_shortcut) + HX_(\")\",29,00,00,00)));\n  181              \t\t}\n  182: HXLINE(  52)\t\t::flixel::_hx_system::debug::Tooltip_obj::add(this->button,tooltip);\n  183              \t}\n  184  \n  ...\n  219  \n  220  hx::ObjectPtr< Tool_obj > Tool_obj::__alloc(hx::Ctx *_hx_ctx) {\n  221: \tTool_obj *__this = (Tool_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Tool_obj), true, \"flixel.system.debug.interaction.tools.Tool\"));\n  222  \t*(void **)__this = Tool_obj::_hx_vtable;\n  223  \t__this->__construct();\n  ...\n  298  \t\tif (HX_FIELD_EQ(inName,\"button\") ) { button=inValue.Cast<  ::flixel::_hx_system::ui::FlxSystemButton >(); return inValue; }\n  299  \t\tif (HX_FIELD_EQ(inName,\"cursor\") ) { cursor=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }\n  300: \t\tif (HX_FIELD_EQ(inName,\"_brain\") ) { _brain=inValue.Cast<  ::flixel::_hx_system::debug::interaction::Interaction >(); return inValue; }\n  301  \t\tbreak;\n  302  \tcase 9:\n  ...\n  322  \t{hx::fsString,(int)offsetof(Tool_obj,_name),HX_HCSTRING(\"_name\",\"\\x2a\",\"\\x8e\",\"\\x10\",\"\\xfc\")},\n  323  \t{hx::fsString,(int)offsetof(Tool_obj,_shortcut),HX_HCSTRING(\"_shortcut\",\"\\xe5\",\"\\xed\",\"\\x3a\",\"\\x30\")},\n  324: \t{hx::fsObject /*::flixel::_hx_system::debug::interaction::Interaction*/ ,(int)offsetof(Tool_obj,_brain),HX_HCSTRING(\"_brain\",\"\\xf7\",\"\\x69\",\"\\xd0\",\"\\xb4\")},\n  325  \t{ hx::fsUnknown, 0, null()}\n  326  };\n  ...\n  365  \tTool_obj::_hx_vtable = *(void **)dummy;\n  366  \thx::Static(__mClass) = new hx::Class_obj();\n  367: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.interaction.tools.Tool\",\"\\x4f\",\"\\x0c\",\"\\x93\",\"\\x8d\");\n  368  \t__mClass->mSuper = &super::__SGetClass();\n  369  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  389  } // end namespace flixel\n  390  } // end namespace system\n  391: } // end namespace debug\n  392  } // end namespace interaction\n  393  } // end namespace tools\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/log/LogStyle.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_log_LogStyle\n    5: #include <flixel/system/debug/log/LogStyle.h>\n    6  #endif\n    7  \n    8: HX_DEFINE_STACK_FRAME(_hx_pos_4946e010770d7497_52_new,\"flixel.system.debug.log.LogStyle\",\"new\",0xce018851,\"flixel.system.debug.log.LogStyle.new\",\"flixel/system/debug/log/LogStyle.hx\",52,0x39dedcdd)\n    9: HX_LOCAL_STACK_FRAME(_hx_pos_4946e010770d7497_9_boot,\"flixel.system.debug.log.LogStyle\",\"boot\",0x6b6ebf21,\"flixel.system.debug.log.LogStyle.boot\",\"flixel/system/debug/log/LogStyle.hx\",9,0x39dedcdd)\n   10: HX_LOCAL_STACK_FRAME(_hx_pos_4946e010770d7497_10_boot,\"flixel.system.debug.log.LogStyle\",\"boot\",0x6b6ebf21,\"flixel.system.debug.log.LogStyle.boot\",\"flixel/system/debug/log/LogStyle.hx\",10,0x39dedcdd)\n   11: HX_LOCAL_STACK_FRAME(_hx_pos_4946e010770d7497_11_boot,\"flixel.system.debug.log.LogStyle\",\"boot\",0x6b6ebf21,\"flixel.system.debug.log.LogStyle.boot\",\"flixel/system/debug/log/LogStyle.hx\",11,0x39dedcdd)\n   12: HX_LOCAL_STACK_FRAME(_hx_pos_4946e010770d7497_12_boot,\"flixel.system.debug.log.LogStyle\",\"boot\",0x6b6ebf21,\"flixel.system.debug.log.LogStyle.boot\",\"flixel/system/debug/log/LogStyle.hx\",12,0x39dedcdd)\n   13: HX_LOCAL_STACK_FRAME(_hx_pos_4946e010770d7497_13_boot,\"flixel.system.debug.log.LogStyle\",\"boot\",0x6b6ebf21,\"flixel.system.debug.log.LogStyle.boot\",\"flixel/system/debug/log/LogStyle.hx\",13,0x39dedcdd)\n   14  namespace flixel{\n   15  namespace _hx_system{\n   16: namespace debug{\n   17  namespace log{\n   18  \n   ..\n   52  }\n   53  \n   54:  ::flixel::_hx_system::debug::log::LogStyle LogStyle_obj::NORMAL;\n   55  \n   56:  ::flixel::_hx_system::debug::log::LogStyle LogStyle_obj::WARNING;\n   57  \n   58:  ::flixel::_hx_system::debug::log::LogStyle LogStyle_obj::ERROR;\n   59  \n   60:  ::flixel::_hx_system::debug::log::LogStyle LogStyle_obj::NOTICE;\n   61  \n   62:  ::flixel::_hx_system::debug::log::LogStyle LogStyle_obj::CONSOLE;\n   63  \n   64  \n   ..\n  170  \tswitch(inName.length) {\n  171  \tcase 5:\n  172: \t\tif (HX_FIELD_EQ(inName,\"ERROR\") ) { ERROR=ioValue.Cast<  ::flixel::_hx_system::debug::log::LogStyle >(); return true; }\n  173  \t\tbreak;\n  174  \tcase 6:\n  175: \t\tif (HX_FIELD_EQ(inName,\"NORMAL\") ) { NORMAL=ioValue.Cast<  ::flixel::_hx_system::debug::log::LogStyle >(); return true; }\n  176: \t\tif (HX_FIELD_EQ(inName,\"NOTICE\") ) { NOTICE=ioValue.Cast<  ::flixel::_hx_system::debug::log::LogStyle >(); return true; }\n  177  \t\tbreak;\n  178  \tcase 7:\n  179: \t\tif (HX_FIELD_EQ(inName,\"WARNING\") ) { WARNING=ioValue.Cast<  ::flixel::_hx_system::debug::log::LogStyle >(); return true; }\n  180: \t\tif (HX_FIELD_EQ(inName,\"CONSOLE\") ) { CONSOLE=ioValue.Cast<  ::flixel::_hx_system::debug::log::LogStyle >(); return true; }\n  181  \t}\n  182  \treturn false;\n  ...\n  210  };\n  211  static hx::StaticInfo LogStyle_obj_sStaticStorageInfo[] = {\n  212: \t{hx::fsObject /*::flixel::_hx_system::debug::log::LogStyle*/ ,(void *) &LogStyle_obj::NORMAL,HX_HCSTRING(\"NORMAL\",\"\\x27\",\"\\x1e\",\"\\xec\",\"\\xe2\")},\n  213: \t{hx::fsObject /*::flixel::_hx_system::debug::log::LogStyle*/ ,(void *) &LogStyle_obj::WARNING,HX_HCSTRING(\"WARNING\",\"\\x3c\",\"\\xae\",\"\\x9f\",\"\\x89\")},\n  214: \t{hx::fsObject /*::flixel::_hx_system::debug::log::LogStyle*/ ,(void *) &LogStyle_obj::ERROR,HX_HCSTRING(\"ERROR\",\"\\xa8\",\"\\x03\",\"\\x18\",\"\\xf1\")},\n  215: \t{hx::fsObject /*::flixel::_hx_system::debug::log::LogStyle*/ ,(void *) &LogStyle_obj::NOTICE,HX_HCSTRING(\"NOTICE\",\"\\x18\",\"\\x84\",\"\\x3b\",\"\\xe4\")},\n  216: \t{hx::fsObject /*::flixel::_hx_system::debug::log::LogStyle*/ ,(void *) &LogStyle_obj::CONSOLE,HX_HCSTRING(\"CONSOLE\",\"\\x37\",\"\\xbf\",\"\\xa9\",\"\\x98\")},\n  217  \t{ hx::fsUnknown, 0, null()}\n  218  };\n  ...\n  268  \tLogStyle_obj::_hx_vtable = *(void **)dummy;\n  269  \thx::Static(__mClass) = new hx::Class_obj();\n  270: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.log.LogStyle\",\"\\xdf\",\"\\x0b\",\"\\x09\",\"\\xa8\");\n  271  \t__mClass->mSuper = &super::__SGetClass();\n  272  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  294  {\n  295              \tHX_GC_STACKFRAME(&_hx_pos_4946e010770d7497_9_boot)\n  296: HXDLIN(   9)\t\tNORMAL =  ::flixel::_hx_system::debug::log::LogStyle_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null());\n  297              \t}\n  298  {\n  299              \tHX_GC_STACKFRAME(&_hx_pos_4946e010770d7497_10_boot)\n  300: HXDLIN(  10)\t\tWARNING =  ::flixel::_hx_system::debug::log::LogStyle_obj::__alloc( HX_CTX ,HX_(\"[WARNING] \",a4,a2,0d,4e),HX_(\"D9F85C\",15,36,8b,30),(int)12,false,false,false,HX_(\"flixel/sounds/beep\",e6,b5,a9,33),true,null());\n  301              \t}\n  302  {\n  303              \tHX_GC_STACKFRAME(&_hx_pos_4946e010770d7497_11_boot)\n  304: HXDLIN(  11)\t\tERROR =  ::flixel::_hx_system::debug::log::LogStyle_obj::__alloc( HX_CTX ,HX_(\"[ERROR] \",d0,1f,cd,be),HX_(\"FF8888\",40,7f,36,70),(int)12,false,false,false,HX_(\"flixel/sounds/beep\",e6,b5,a9,33),true,null());\n  305              \t}\n  306  {\n  307              \tHX_GC_STACKFRAME(&_hx_pos_4946e010770d7497_12_boot)\n  308: HXDLIN(  12)\t\tNOTICE =  ::flixel::_hx_system::debug::log::LogStyle_obj::__alloc( HX_CTX ,HX_(\"[NOTICE] \",96,5e,07,09),HX_(\"5CF878\",41,9b,32,f3),(int)12,false,null(),null(),null(),null(),null());\n  309              \t}\n  310  {\n  311              \tHX_GC_STACKFRAME(&_hx_pos_4946e010770d7497_13_boot)\n  312: HXDLIN(  13)\t\tCONSOLE =  ::flixel::_hx_system::debug::log::LogStyle_obj::__alloc( HX_CTX ,HX_(\"> \",22,36,00,00),HX_(\"5A96FA\",c4,34,cc,c3),(int)12,false,null(),null(),null(),null(),null());\n  313              \t}\n  314  }\n  ...\n  316  } // end namespace flixel\n  317  } // end namespace system\n  318: } // end namespace debug\n  319  } // end namespace log\n  320  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/stats/_Stats/GraphicMaximizeButton.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_stats__Stats_GraphicMaximizeButton\n    5: #include <flixel/system/debug/stats/_Stats/GraphicMaximizeButton.h>\n    6  #endif\n    7  #ifndef INCLUDED_haxe_Resource\n    .\n   33  #endif\n   34  \n   35: HX_DEFINE_STACK_FRAME(_hx_pos_ece32c430b3edb88_51_new,\"flixel.system.debug.stats._Stats.GraphicMaximizeButton\",\"new\",0xed299781,\"flixel.system.debug.stats._Stats.GraphicMaximizeButton.new\",\"openfl/_internal/macros/AssetsMacro.hx\",51,0xf7db08ab)\n   36: HX_LOCAL_STACK_FRAME(_hx_pos_76b66bebb6c05d45_1_boot,\"flixel.system.debug.stats._Stats.GraphicMaximizeButton\",\"boot\",0x8f53f9f1,\"flixel.system.debug.stats._Stats.GraphicMaximizeButton.boot\",\"?\",1,0x0000003f)\n   37  namespace flixel{\n   38  namespace _hx_system{\n   39: namespace debug{\n   40  namespace stats{\n   41  namespace _Stats{\n   ..\n   46              \tHX_STACKFRAME(&_hx_pos_ece32c430b3edb88_51_new)\n   47  HXLINE(  83)\t\tsuper::__construct((int)0,(int)0,transparent,fillRGBA);\n   48: HXLINE(  85)\t\t ::openfl::utils::ByteArrayData byteArray = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(::haxe::Resource_obj::getBytes(::flixel::_hx_system::debug::stats::_Stats::GraphicMaximizeButton_obj::resourceName));\n   49  HXLINE(  86)\t\t{\n   50  HXLINE(  86)\t\t\t ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(byteArray));\n   ..\n   82  \n   83  hx::ObjectPtr< GraphicMaximizeButton_obj > GraphicMaximizeButton_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA) {\n   84: \tGraphicMaximizeButton_obj *__this = (GraphicMaximizeButton_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GraphicMaximizeButton_obj), true, \"flixel.system.debug.stats._Stats.GraphicMaximizeButton\"));\n   85  \t*(void **)__this = GraphicMaximizeButton_obj::_hx_vtable;\n   86  \t__this->__construct(width,height,__o_transparent,__o_fillRGBA);\n   ..\n  143  \tGraphicMaximizeButton_obj::_hx_vtable = *(void **)dummy;\n  144  \thx::Static(__mClass) = new hx::Class_obj();\n  145: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.stats._Stats.GraphicMaximizeButton\",\"\\x0f\",\"\\xc3\",\"\\xcd\",\"\\x9d\");\n  146  \t__mClass->mSuper = &super::__SGetClass();\n  147  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  169  {\n  170              \tHX_STACKFRAME(&_hx_pos_76b66bebb6c05d45_1_boot)\n  171: HXDLIN(   1)\t\tresourceName = HX_(\"__ASSET__:bitmap_flixel_system_debug_stats__Stats_GraphicMaximizeButton\",66,7c,bc,b9);\n  172              \t}\n  173  }\n  ...\n  175  } // end namespace flixel\n  176  } // end namespace system\n  177: } // end namespace debug\n  178  } // end namespace stats\n  179  } // end namespace _Stats\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/stats/_Stats/GraphicMinimizeButton.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_stats__Stats_GraphicMinimizeButton\n    5: #include <flixel/system/debug/stats/_Stats/GraphicMinimizeButton.h>\n    6  #endif\n    7  #ifndef INCLUDED_haxe_Resource\n    .\n   33  #endif\n   34  \n   35: HX_DEFINE_STACK_FRAME(_hx_pos_68d3b477e0b5c8ad_51_new,\"flixel.system.debug.stats._Stats.GraphicMinimizeButton\",\"new\",0x3ce68c53,\"flixel.system.debug.stats._Stats.GraphicMinimizeButton.new\",\"openfl/_internal/macros/AssetsMacro.hx\",51,0xf7db08ab)\n   36: HX_LOCAL_STACK_FRAME(_hx_pos_5800a68c299b2399_1_boot,\"flixel.system.debug.stats._Stats.GraphicMinimizeButton\",\"boot\",0x04ed3cdf,\"flixel.system.debug.stats._Stats.GraphicMinimizeButton.boot\",\"?\",1,0x0000003f)\n   37  namespace flixel{\n   38  namespace _hx_system{\n   39: namespace debug{\n   40  namespace stats{\n   41  namespace _Stats{\n   ..\n   46              \tHX_STACKFRAME(&_hx_pos_68d3b477e0b5c8ad_51_new)\n   47  HXLINE(  83)\t\tsuper::__construct((int)0,(int)0,transparent,fillRGBA);\n   48: HXLINE(  85)\t\t ::openfl::utils::ByteArrayData byteArray = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(::haxe::Resource_obj::getBytes(::flixel::_hx_system::debug::stats::_Stats::GraphicMinimizeButton_obj::resourceName));\n   49  HXLINE(  86)\t\t{\n   50  HXLINE(  86)\t\t\t ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(byteArray));\n   ..\n   82  \n   83  hx::ObjectPtr< GraphicMinimizeButton_obj > GraphicMinimizeButton_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height, ::Dynamic __o_transparent, ::Dynamic __o_fillRGBA) {\n   84: \tGraphicMinimizeButton_obj *__this = (GraphicMinimizeButton_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GraphicMinimizeButton_obj), true, \"flixel.system.debug.stats._Stats.GraphicMinimizeButton\"));\n   85  \t*(void **)__this = GraphicMinimizeButton_obj::_hx_vtable;\n   86  \t__this->__construct(width,height,__o_transparent,__o_fillRGBA);\n   ..\n  143  \tGraphicMinimizeButton_obj::_hx_vtable = *(void **)dummy;\n  144  \thx::Static(__mClass) = new hx::Class_obj();\n  145: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.stats._Stats.GraphicMinimizeButton\",\"\\xe1\",\"\\x66\",\"\\x57\",\"\\x3a\");\n  146  \t__mClass->mSuper = &super::__SGetClass();\n  147  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  169  {\n  170              \tHX_STACKFRAME(&_hx_pos_5800a68c299b2399_1_boot)\n  171: HXDLIN(   1)\t\tresourceName = HX_(\"__ASSET__:bitmap_flixel_system_debug_stats__Stats_GraphicMinimizeButton\",38,20,46,56);\n  172              \t}\n  173  }\n  ...\n  175  } // end namespace flixel\n  176  } // end namespace system\n  177: } // end namespace debug\n  178  } // end namespace stats\n  179  } // end namespace _Stats\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/watch/Tracker.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_Window\n    5: #include <flixel/system/debug/Window.h>\n    6  #endif\n    7: #ifndef INCLUDED_flixel_system_debug_watch_Tracker\n    8: #include <flixel/system/debug/watch/Tracker.h>\n    9  #endif\n   10: #ifndef INCLUDED_flixel_system_debug_watch_Watch\n   11: #include <flixel/system/debug/watch/Watch.h>\n   12  #endif\n   13  #ifndef INCLUDED_openfl_display_BitmapData\n   ..\n   39  #endif\n   40  \n   41: HX_DEFINE_STACK_FRAME(_hx_pos_60725c8fd849460b_37_new,\"flixel.system.debug.watch.Tracker\",\"new\",0xf6eed663,\"flixel.system.debug.watch.Tracker.new\",\"flixel/system/debug/watch/Tracker.hx\",37,0x14368dcf)\n   42  namespace flixel{\n   43  namespace _hx_system{\n   44: namespace debug{\n   45  namespace watch{\n   46  \n   ..\n   93  \n   94  hx::ObjectPtr< Tracker_obj > Tracker_obj::__alloc(hx::Ctx *_hx_ctx,::String Title, ::openfl::display::BitmapData Icon, ::Dynamic Width, ::Dynamic Height, ::Dynamic Resizable, ::openfl::geom::Rectangle Bounds, ::Dynamic Closable) {\n   95: \tTracker_obj *__this = (Tracker_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Tracker_obj), true, \"flixel.system.debug.watch.Tracker\"));\n   96  \t*(void **)__this = Tracker_obj::_hx_vtable;\n   97  \t__this->__construct(Title,Icon,Width,Height,Resizable,Bounds,Closable);\n   ..\n  126  \tTracker_obj::_hx_vtable = *(void **)dummy;\n  127  \thx::Static(__mClass) = new hx::Class_obj();\n  128: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.watch.Tracker\",\"\\xf1\",\"\\x68\",\"\\xcd\",\"\\xfd\");\n  129  \t__mClass->mSuper = &super::__SGetClass();\n  130  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  150  } // end namespace flixel\n  151  } // end namespace system\n  152: } // end namespace debug\n  153  } // end namespace watch\n  154  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/watch/TrackerProfile.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_watch_TrackerProfile\n    5: #include <flixel/system/debug/watch/TrackerProfile.h>\n    6  #endif\n    7  #ifndef INCLUDED_flixel_util_FlxPool_flixel_util_LabelValuePair\n    .\n   21  #endif\n   22  \n   23: HX_DEFINE_STACK_FRAME(_hx_pos_045fa5a979169169_233_new,\"flixel.system.debug.watch.TrackerProfile\",\"new\",0x3f8f952a,\"flixel.system.debug.watch.TrackerProfile.new\",\"flixel/system/debug/watch/Tracker.hx\",233,0x14368dcf)\n   24: HX_LOCAL_STACK_FRAME(_hx_pos_045fa5a979169169_241_toString,\"flixel.system.debug.watch.TrackerProfile\",\"toString\",0x9a236fa2,\"flixel.system.debug.watch.TrackerProfile.toString\",\"flixel/system/debug/watch/Tracker.hx\",241,0x14368dcf)\n   25  namespace flixel{\n   26  namespace _hx_system{\n   27: namespace debug{\n   28  namespace watch{\n   29  \n   ..\n   61  HXDLIN( 243)\t\t_this1->label = HX_(\"extensions\",14,7c,70,89);\n   62  HXDLIN( 243)\t\t_this1->value = value1;\n   63: HXLINE( 241)\t\treturn ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp)->init(1,_this1));\n   64              \t}\n   65  \n   ..\n   75  \n   76  hx::ObjectPtr< TrackerProfile_obj > TrackerProfile_obj::__alloc(hx::Ctx *_hx_ctx,hx::Class ObjectClass,::Array< ::String > Variables,::Array< ::Dynamic> Extensions) {\n   77: \tTrackerProfile_obj *__this = (TrackerProfile_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TrackerProfile_obj), true, \"flixel.system.debug.watch.TrackerProfile\"));\n   78  \t*(void **)__this = TrackerProfile_obj::_hx_vtable;\n   79  \t__this->__construct(ObjectClass,Variables,Extensions);\n   ..\n  177  \tTrackerProfile_obj::_hx_vtable = *(void **)dummy;\n  178  \thx::Static(__mClass) = new hx::Class_obj();\n  179: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.watch.TrackerProfile\",\"\\x38\",\"\\x78\",\"\\x47\",\"\\x1d\");\n  180  \t__mClass->mSuper = &super::__SGetClass();\n  181  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  201  } // end namespace flixel\n  202  } // end namespace system\n  203: } // end namespace debug\n  204  } // end namespace watch\n  205  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/debug/watch/Watch.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_Window\n    5: #include <flixel/system/debug/Window.h>\n    6  #endif\n    7: #ifndef INCLUDED_flixel_system_debug_watch_Watch\n    8: #include <flixel/system/debug/watch/Watch.h>\n    9  #endif\n   10  #ifndef INCLUDED_openfl_display_BitmapData\n   ..\n   36  #endif\n   37  \n   38: HX_DEFINE_STACK_FRAME(_hx_pos_f3919820c0c3a2ee_14_new,\"flixel.system.debug.watch.Watch\",\"new\",0xfeaf943a,\"flixel.system.debug.watch.Watch.new\",\"flixel/system/debug/watch/Watch.hx\",14,0x446c9b58)\n   39  namespace flixel{\n   40  namespace _hx_system{\n   41: namespace debug{\n   42  namespace watch{\n   43  \n   ..\n   86  \n   87  hx::ObjectPtr< Watch_obj > Watch_obj::__alloc(hx::Ctx *_hx_ctx,::String Title, ::openfl::display::BitmapData Icon, ::Dynamic Width, ::Dynamic Height, ::Dynamic Resizable, ::openfl::geom::Rectangle Bounds, ::Dynamic Closable) {\n   88: \tWatch_obj *__this = (Watch_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Watch_obj), true, \"flixel.system.debug.watch.Watch\"));\n   89  \t*(void **)__this = Watch_obj::_hx_vtable;\n   90  \t__this->__construct(Title,Icon,Width,Height,Resizable,Bounds,Closable);\n   ..\n  119  \tWatch_obj::_hx_vtable = *(void **)dummy;\n  120  \thx::Static(__mClass) = new hx::Class_obj();\n  121: \t__mClass->mName = HX_HCSTRING(\"flixel.system.debug.watch.Watch\",\"\\x48\",\"\\xaf\",\"\\x96\",\"\\x48\");\n  122  \t__mClass->mSuper = &super::__SGetClass();\n  123  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  143  } // end namespace flixel\n  144  } // end namespace system\n  145: } // end namespace debug\n  146  } // end namespace watch\n  147  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/frontEnds/DebuggerFrontEnd.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_FlxDebuggerLayout\n    5: #include <flixel/system/debug/FlxDebuggerLayout.h>\n    6  #endif\n    7: #ifndef INCLUDED_flixel_system_debug_Window\n    8: #include <flixel/system/debug/Window.h>\n    9  #endif\n   10: #ifndef INCLUDED_flixel_system_debug_watch_TrackerProfile\n   11: #include <flixel/system/debug/watch/TrackerProfile.h>\n   12  #endif\n   13: #ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd\n   14: #include <flixel/system/frontEnds/DebuggerFrontEnd.h>\n   15  #endif\n   16  #ifndef INCLUDED_flixel_system_ui_FlxSystemButton\n   ..\n   57  #endif\n   58  \n   59: HX_DEFINE_STACK_FRAME(_hx_pos_6f944dca4f3bb528_15_new,\"flixel.system.frontEnds.DebuggerFrontEnd\",\"new\",0x8bc76b9f,\"flixel.system.frontEnds.DebuggerFrontEnd.new\",\"flixel/system/frontEnds/DebuggerFrontEnd.hx\",15,0x2ebb4b30)\n   60  static const int _hx_array_data_ec6bb02d_1[] = {\n   61  \t(int)113,(int)192,(int)220,\n   62  };\n   63: HX_LOCAL_STACK_FRAME(_hx_pos_6f944dca4f3bb528_52_setLayout,\"flixel.system.frontEnds.DebuggerFrontEnd\",\"setLayout\",0x96c2386b,\"flixel.system.frontEnds.DebuggerFrontEnd.setLayout\",\"flixel/system/frontEnds/DebuggerFrontEnd.hx\",52,0x2ebb4b30)\n   64: HX_LOCAL_STACK_FRAME(_hx_pos_6f944dca4f3bb528_62_resetLayout,\"flixel.system.frontEnds.DebuggerFrontEnd\",\"resetLayout\",0xc33ca418,\"flixel.system.frontEnds.DebuggerFrontEnd.resetLayout\",\"flixel/system/frontEnds/DebuggerFrontEnd.hx\",62,0x2ebb4b30)\n   65: HX_LOCAL_STACK_FRAME(_hx_pos_6f944dca4f3bb528_83_addButton,\"flixel.system.frontEnds.DebuggerFrontEnd\",\"addButton\",0x7066ab72,\"flixel.system.frontEnds.DebuggerFrontEnd.addButton\",\"flixel/system/frontEnds/DebuggerFrontEnd.hx\",83,0x2ebb4b30)\n   66: HX_LOCAL_STACK_FRAME(_hx_pos_6f944dca4f3bb528_110_track,\"flixel.system.frontEnds.DebuggerFrontEnd\",\"track\",0x1a1fb78a,\"flixel.system.frontEnds.DebuggerFrontEnd.track\",\"flixel/system/frontEnds/DebuggerFrontEnd.hx\",110,0x2ebb4b30)\n   67: HX_LOCAL_STACK_FRAME(_hx_pos_6f944dca4f3bb528_119_addTrackerProfile,\"flixel.system.frontEnds.DebuggerFrontEnd\",\"addTrackerProfile\",0xb36941d1,\"flixel.system.frontEnds.DebuggerFrontEnd.addTrackerProfile\",\"flixel/system/frontEnds/DebuggerFrontEnd.hx\",119,0x2ebb4b30)\n   68: HX_LOCAL_STACK_FRAME(_hx_pos_6f944dca4f3bb528_132_removeButton,\"flixel.system.frontEnds.DebuggerFrontEnd\",\"removeButton\",0xa0228237,\"flixel.system.frontEnds.DebuggerFrontEnd.removeButton\",\"flixel/system/frontEnds/DebuggerFrontEnd.hx\",132,0x2ebb4b30)\n   69: HX_LOCAL_STACK_FRAME(_hx_pos_6f944dca4f3bb528_142_set_drawDebug,\"flixel.system.frontEnds.DebuggerFrontEnd\",\"set_drawDebug\",0x8073fd91,\"flixel.system.frontEnds.DebuggerFrontEnd.set_drawDebug\",\"flixel/system/frontEnds/DebuggerFrontEnd.hx\",142,0x2ebb4b30)\n   70: HX_LOCAL_STACK_FRAME(_hx_pos_6f944dca4f3bb528_155_set_visible,\"flixel.system.frontEnds.DebuggerFrontEnd\",\"set_visible\",0xfdfb51d4,\"flixel.system.frontEnds.DebuggerFrontEnd.set_visible\",\"flixel/system/frontEnds/DebuggerFrontEnd.hx\",155,0x2ebb4b30)\n   71  namespace flixel{\n   72  namespace _hx_system{\n   73  namespace frontEnds{\n   74  \n   75: void DebuggerFrontEnd_obj::__construct(){\n   76              \tHX_GC_STACKFRAME(&_hx_pos_6f944dca4f3bb528_15_new)\n   77  HXLINE(  44)\t\tthis->visible = false;\n   78  HXLINE(  42)\t\tthis->visibilityChanged =  ::flixel::util::_FlxSignal::FlxSignal0_obj::__alloc( HX_CTX );\n   79: HXLINE(  37)\t\tthis->drawDebugChanged =  ::flixel::util::_FlxSignal::FlxSignal0_obj::__alloc( HX_CTX );\n   80: HXLINE(  33)\t\tthis->drawDebug = false;\n   81  HXLINE(  27)\t\tthis->toggleKeys = ::Array_obj< int >::fromData( _hx_array_data_ec6bb02d_1,3);\n   82  HXLINE(  20)\t\tthis->precision = (int)3;\n   83              \t}\n   84  \n   85: Dynamic DebuggerFrontEnd_obj::__CreateEmpty() { return new DebuggerFrontEnd_obj; }\n   86  \n   87: void *DebuggerFrontEnd_obj::_hx_vtable = 0;\n   88  \n   89: Dynamic DebuggerFrontEnd_obj::__Create(hx::DynamicArray inArgs)\n   90  {\n   91: \thx::ObjectPtr< DebuggerFrontEnd_obj > _hx_result = new DebuggerFrontEnd_obj();\n   92  \t_hx_result->__construct();\n   93  \treturn _hx_result;\n   94  }\n   95  \n   96: bool DebuggerFrontEnd_obj::_hx_isInstanceOf(int inClassId) {\n   97  \treturn inClassId==(int)0x00000001 || inClassId==(int)0x49a0c705;\n   98  }\n   99  \n  100: void DebuggerFrontEnd_obj::setLayout( ::flixel::_hx_system::debug::FlxDebuggerLayout Layout){\n  101              \tHX_STACKFRAME(&_hx_pos_6f944dca4f3bb528_52_setLayout)\n  102              \t}\n  103  \n  104  \n  105: HX_DEFINE_DYNAMIC_FUNC1(DebuggerFrontEnd_obj,setLayout,(void))\n  106  \n  107: void DebuggerFrontEnd_obj::resetLayout(){\n  108              \tHX_STACKFRAME(&_hx_pos_6f944dca4f3bb528_62_resetLayout)\n  109              \t}\n  110  \n  111  \n  112: HX_DEFINE_DYNAMIC_FUNC0(DebuggerFrontEnd_obj,resetLayout,(void))\n  113  \n  114:  ::flixel::_hx_system::ui::FlxSystemButton DebuggerFrontEnd_obj::addButton( ::flixel::util::FlxHorizontalAlign Alignment, ::openfl::display::BitmapData Icon, ::Dynamic UpHandler,hx::Null< bool >  __o_ToggleMode,hx::Null< bool >  __o_UpdateLayout){\n  115  bool ToggleMode = __o_ToggleMode.Default(false);\n  116  bool UpdateLayout = __o_UpdateLayout.Default(true);\n  ...\n  120  \n  121  \n  122: HX_DEFINE_DYNAMIC_FUNC5(DebuggerFrontEnd_obj,addButton,return )\n  123  \n  124:  ::flixel::_hx_system::debug::Window DebuggerFrontEnd_obj::track( ::Dynamic ObjectOrClass,::String WindowTitle){\n  125              \tHX_STACKFRAME(&_hx_pos_6f944dca4f3bb528_110_track)\n  126  HXDLIN( 110)\t\treturn null();\n  ...\n  128  \n  129  \n  130: HX_DEFINE_DYNAMIC_FUNC2(DebuggerFrontEnd_obj,track,return )\n  131  \n  132: void DebuggerFrontEnd_obj::addTrackerProfile( ::flixel::_hx_system::debug::watch::TrackerProfile Profile){\n  133              \tHX_STACKFRAME(&_hx_pos_6f944dca4f3bb528_119_addTrackerProfile)\n  134              \t}\n  135  \n  136  \n  137: HX_DEFINE_DYNAMIC_FUNC1(DebuggerFrontEnd_obj,addTrackerProfile,(void))\n  138  \n  139: void DebuggerFrontEnd_obj::removeButton( ::flixel::_hx_system::ui::FlxSystemButton Button,hx::Null< bool >  __o_UpdateLayout){\n  140  bool UpdateLayout = __o_UpdateLayout.Default(true);\n  141              \tHX_STACKFRAME(&_hx_pos_6f944dca4f3bb528_132_removeButton)\n  ...\n  143  \n  144  \n  145: HX_DEFINE_DYNAMIC_FUNC2(DebuggerFrontEnd_obj,removeButton,(void))\n  146  \n  147: bool DebuggerFrontEnd_obj::set_drawDebug(bool Value){\n  148:             \tHX_STACKFRAME(&_hx_pos_6f944dca4f3bb528_142_set_drawDebug)\n  149: HXLINE( 143)\t\tif ((this->drawDebug == Value)) {\n  150: HXLINE( 144)\t\t\treturn this->drawDebug;\n  151              \t\t}\n  152: HXLINE( 146)\t\tthis->drawDebug = Value;\n  153: HXLINE( 150)\t\treturn this->drawDebug;\n  154              \t}\n  155  \n  156  \n  157: HX_DEFINE_DYNAMIC_FUNC1(DebuggerFrontEnd_obj,set_drawDebug,return )\n  158  \n  159: bool DebuggerFrontEnd_obj::set_visible(bool Value){\n  160              \tHX_STACKFRAME(&_hx_pos_6f944dca4f3bb528_155_set_visible)\n  161  HXLINE( 156)\t\tif ((this->visible == Value)) {\n  ...\n  167  \n  168  \n  169: HX_DEFINE_DYNAMIC_FUNC1(DebuggerFrontEnd_obj,set_visible,return )\n  170  \n  171  \n  172: hx::ObjectPtr< DebuggerFrontEnd_obj > DebuggerFrontEnd_obj::__new() {\n  173: \thx::ObjectPtr< DebuggerFrontEnd_obj > __this = new DebuggerFrontEnd_obj();\n  174  \t__this->__construct();\n  175  \treturn __this;\n  176  }\n  177  \n  178: hx::ObjectPtr< DebuggerFrontEnd_obj > DebuggerFrontEnd_obj::__alloc(hx::Ctx *_hx_ctx) {\n  179: \tDebuggerFrontEnd_obj *__this = (DebuggerFrontEnd_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DebuggerFrontEnd_obj), true, \"flixel.system.frontEnds.DebuggerFrontEnd\"));\n  180: \t*(void **)__this = DebuggerFrontEnd_obj::_hx_vtable;\n  181  \t__this->__construct();\n  182  \treturn __this;\n  183  }\n  184  \n  185: DebuggerFrontEnd_obj::DebuggerFrontEnd_obj()\n  186  {\n  187  }\n  188  \n  189: void DebuggerFrontEnd_obj::__Mark(HX_MARK_PARAMS)\n  190  {\n  191: \tHX_MARK_BEGIN_CLASS(DebuggerFrontEnd);\n  192  \tHX_MARK_MEMBER_NAME(precision,\"precision\");\n  193  \tHX_MARK_MEMBER_NAME(toggleKeys,\"toggleKeys\");\n  194: \tHX_MARK_MEMBER_NAME(drawDebug,\"drawDebug\");\n  195: \tHX_MARK_MEMBER_NAME(drawDebugChanged,\"drawDebugChanged\");\n  196  \tHX_MARK_MEMBER_NAME(visibilityChanged,\"visibilityChanged\");\n  197  \tHX_MARK_MEMBER_NAME(visible,\"visible\");\n  ...\n  199  }\n  200  \n  201: void DebuggerFrontEnd_obj::__Visit(HX_VISIT_PARAMS)\n  202  {\n  203  \tHX_VISIT_MEMBER_NAME(precision,\"precision\");\n  204  \tHX_VISIT_MEMBER_NAME(toggleKeys,\"toggleKeys\");\n  205: \tHX_VISIT_MEMBER_NAME(drawDebug,\"drawDebug\");\n  206: \tHX_VISIT_MEMBER_NAME(drawDebugChanged,\"drawDebugChanged\");\n  207  \tHX_VISIT_MEMBER_NAME(visibilityChanged,\"visibilityChanged\");\n  208  \tHX_VISIT_MEMBER_NAME(visible,\"visible\");\n  209  }\n  210  \n  211: hx::Val DebuggerFrontEnd_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)\n  212  {\n  213  \tswitch(inName.length) {\n  ...\n  220  \tcase 9:\n  221  \t\tif (HX_FIELD_EQ(inName,\"precision\") ) { return hx::Val( precision ); }\n  222: \t\tif (HX_FIELD_EQ(inName,\"drawDebug\") ) { return hx::Val( drawDebug ); }\n  223  \t\tif (HX_FIELD_EQ(inName,\"setLayout\") ) { return hx::Val( setLayout_dyn() ); }\n  224  \t\tif (HX_FIELD_EQ(inName,\"addButton\") ) { return hx::Val( addButton_dyn() ); }\n  ...\n  235  \t\tbreak;\n  236  \tcase 13:\n  237: \t\tif (HX_FIELD_EQ(inName,\"set_drawDebug\") ) { return hx::Val( set_drawDebug_dyn() ); }\n  238  \t\tbreak;\n  239  \tcase 16:\n  240: \t\tif (HX_FIELD_EQ(inName,\"drawDebugChanged\") ) { return hx::Val( drawDebugChanged ); }\n  241  \t\tbreak;\n  242  \tcase 17:\n  ...\n  247  }\n  248  \n  249: hx::Val DebuggerFrontEnd_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)\n  250  {\n  251  \tswitch(inName.length) {\n  ...\n  255  \tcase 9:\n  256  \t\tif (HX_FIELD_EQ(inName,\"precision\") ) { precision=inValue.Cast< int >(); return inValue; }\n  257: \t\tif (HX_FIELD_EQ(inName,\"drawDebug\") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_drawDebug(inValue.Cast< bool >()) );drawDebug=inValue.Cast< bool >(); return inValue; }\n  258  \t\tbreak;\n  259  \tcase 10:\n  ...\n  261  \t\tbreak;\n  262  \tcase 16:\n  263: \t\tif (HX_FIELD_EQ(inName,\"drawDebugChanged\") ) { drawDebugChanged=inValue.Cast<  ::flixel::util::_FlxSignal::FlxSignal0 >(); return inValue; }\n  264  \t\tbreak;\n  265  \tcase 17:\n  ...\n  269  }\n  270  \n  271: void DebuggerFrontEnd_obj::__GetFields(Array< ::String> &outFields)\n  272  {\n  273  \toutFields->push(HX_HCSTRING(\"precision\",\"\\x3e\",\"\\xd5\",\"\\xc7\",\"\\x80\"));\n  274  \toutFields->push(HX_HCSTRING(\"toggleKeys\",\"\\xa8\",\"\\x27\",\"\\xbd\",\"\\xde\"));\n  275: \toutFields->push(HX_HCSTRING(\"drawDebug\",\"\\xaf\",\"\\x87\",\"\\x2a\",\"\\x9f\"));\n  276: \toutFields->push(HX_HCSTRING(\"drawDebugChanged\",\"\\x05\",\"\\x35\",\"\\xde\",\"\\x47\"));\n  277  \toutFields->push(HX_HCSTRING(\"visibilityChanged\",\"\\x42\",\"\\x69\",\"\\x31\",\"\\xf5\"));\n  278  \toutFields->push(HX_HCSTRING(\"visible\",\"\\x72\",\"\\x78\",\"\\x24\",\"\\xa3\"));\n  ...\n  281  \n  282  #if HXCPP_SCRIPTABLE\n  283: static hx::StorageInfo DebuggerFrontEnd_obj_sMemberStorageInfo[] = {\n  284: \t{hx::fsInt,(int)offsetof(DebuggerFrontEnd_obj,precision),HX_HCSTRING(\"precision\",\"\\x3e\",\"\\xd5\",\"\\xc7\",\"\\x80\")},\n  285: \t{hx::fsObject /*Array< int >*/ ,(int)offsetof(DebuggerFrontEnd_obj,toggleKeys),HX_HCSTRING(\"toggleKeys\",\"\\xa8\",\"\\x27\",\"\\xbd\",\"\\xde\")},\n  286: \t{hx::fsBool,(int)offsetof(DebuggerFrontEnd_obj,drawDebug),HX_HCSTRING(\"drawDebug\",\"\\xaf\",\"\\x87\",\"\\x2a\",\"\\x9f\")},\n  287: \t{hx::fsObject /*::flixel::util::_FlxSignal::FlxSignal0*/ ,(int)offsetof(DebuggerFrontEnd_obj,drawDebugChanged),HX_HCSTRING(\"drawDebugChanged\",\"\\x05\",\"\\x35\",\"\\xde\",\"\\x47\")},\n  288: \t{hx::fsObject /*::flixel::util::_FlxSignal::FlxSignal0*/ ,(int)offsetof(DebuggerFrontEnd_obj,visibilityChanged),HX_HCSTRING(\"visibilityChanged\",\"\\x42\",\"\\x69\",\"\\x31\",\"\\xf5\")},\n  289: \t{hx::fsBool,(int)offsetof(DebuggerFrontEnd_obj,visible),HX_HCSTRING(\"visible\",\"\\x72\",\"\\x78\",\"\\x24\",\"\\xa3\")},\n  290  \t{ hx::fsUnknown, 0, null()}\n  291  };\n  292: static hx::StaticInfo *DebuggerFrontEnd_obj_sStaticStorageInfo = 0;\n  293  #endif\n  294  \n  295: static ::String DebuggerFrontEnd_obj_sMemberFields[] = {\n  296  \tHX_HCSTRING(\"precision\",\"\\x3e\",\"\\xd5\",\"\\xc7\",\"\\x80\"),\n  297  \tHX_HCSTRING(\"toggleKeys\",\"\\xa8\",\"\\x27\",\"\\xbd\",\"\\xde\"),\n  298: \tHX_HCSTRING(\"drawDebug\",\"\\xaf\",\"\\x87\",\"\\x2a\",\"\\x9f\"),\n  299: \tHX_HCSTRING(\"drawDebugChanged\",\"\\x05\",\"\\x35\",\"\\xde\",\"\\x47\"),\n  300  \tHX_HCSTRING(\"visibilityChanged\",\"\\x42\",\"\\x69\",\"\\x31\",\"\\xf5\"),\n  301  \tHX_HCSTRING(\"visible\",\"\\x72\",\"\\x78\",\"\\x24\",\"\\xa3\"),\n  ...\n  306  \tHX_HCSTRING(\"addTrackerProfile\",\"\\x52\",\"\\x16\",\"\\x10\",\"\\x21\"),\n  307  \tHX_HCSTRING(\"removeButton\",\"\\x56\",\"\\xfd\",\"\\x0d\",\"\\x49\"),\n  308: \tHX_HCSTRING(\"set_drawDebug\",\"\\x92\",\"\\x3d\",\"\\x94\",\"\\xa5\"),\n  309  \tHX_HCSTRING(\"set_visible\",\"\\x95\",\"\\xdf\",\"\\x8b\",\"\\x33\"),\n  310  \t::String(null()) };\n  311  \n  312: static void DebuggerFrontEnd_obj_sMarkStatics(HX_MARK_PARAMS) {\n  313: \tHX_MARK_MEMBER_NAME(DebuggerFrontEnd_obj::__mClass,\"__mClass\");\n  314  };\n  315  \n  316  #ifdef HXCPP_VISIT_ALLOCS\n  317: static void DebuggerFrontEnd_obj_sVisitStatics(HX_VISIT_PARAMS) {\n  318: \tHX_VISIT_MEMBER_NAME(DebuggerFrontEnd_obj::__mClass,\"__mClass\");\n  319  };\n  320  \n  321  #endif\n  322  \n  323: hx::Class DebuggerFrontEnd_obj::__mClass;\n  324  \n  325: void DebuggerFrontEnd_obj::__register()\n  326  {\n  327: \thx::Object *dummy = new DebuggerFrontEnd_obj;\n  328: \tDebuggerFrontEnd_obj::_hx_vtable = *(void **)dummy;\n  329  \thx::Static(__mClass) = new hx::Class_obj();\n  330: \t__mClass->mName = HX_HCSTRING(\"flixel.system.frontEnds.DebuggerFrontEnd\",\"\\x2d\",\"\\xb0\",\"\\x6b\",\"\\xec\");\n  331  \t__mClass->mSuper = &super::__SGetClass();\n  332  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  334  \t__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;\n  335  \t__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;\n  336: \t__mClass->mMarkFunc = DebuggerFrontEnd_obj_sMarkStatics;\n  337  \t__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);\n  338: \t__mClass->mMembers = hx::Class_obj::dupFunctions(DebuggerFrontEnd_obj_sMemberFields);\n  339: \t__mClass->mCanCast = hx::TCanCast< DebuggerFrontEnd_obj >;\n  340  #ifdef HXCPP_VISIT_ALLOCS\n  341: \t__mClass->mVisitFunc = DebuggerFrontEnd_obj_sVisitStatics;\n  342  #endif\n  343  #ifdef HXCPP_SCRIPTABLE\n  344: \t__mClass->mMemberStorageInfo = DebuggerFrontEnd_obj_sMemberStorageInfo;\n  345  #endif\n  346  #ifdef HXCPP_SCRIPTABLE\n  347: \t__mClass->mStaticStorageInfo = DebuggerFrontEnd_obj_sStaticStorageInfo;\n  348  #endif\n  349  \thx::_hx_RegisterClass(__mClass->mName, __mClass);\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/frontEnds/LogFrontEnd.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_log_LogStyle\n    5: #include <flixel/system/debug/log/LogStyle.h>\n    6  #endif\n    7  #ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd\n    .\n   74  HX_DEFINE_DYNAMIC_FUNC1(LogFrontEnd_obj,notice,(void))\n   75  \n   76: void LogFrontEnd_obj::advanced( ::Dynamic Data, ::flixel::_hx_system::debug::log::LogStyle Style,hx::Null< bool >  __o_FireOnce){\n   77  bool FireOnce = __o_FireOnce.Default(false);\n   78              \tHX_STACKFRAME(&_hx_pos_ba09e0c9e62cea6b_54_advanced)\n   ..\n  117              \t\t\t}\n  118              \t\t}\n  119: HXLINE( 138)\t\tthis->advanced(paramArray,::flixel::_hx_system::debug::log::LogStyle_obj::NORMAL,null());\n  120              \t}\n  121  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/system/ui/FlxSystemButton.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_flixel_system_debug_DebuggerUtil\n    5: #include <flixel/system/debug/DebuggerUtil.h>\n    6  #endif\n    7  #ifndef INCLUDED_flixel_system_ui_FlxSystemButton\n    .\n  117  HXLINE(  79)\t\t\tthis->removeChild(this->_icon);\n  118              \t\t}\n  119: HXLINE(  81)\t\t::flixel::_hx_system::debug::DebuggerUtil_obj::fixSize(Icon);\n  120  HXLINE(  82)\t\tthis->_icon =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,Icon,null(),null());\n  121  HXLINE(  83)\t\tthis->addChild(this->_icon);\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/ui/FlxBar.cpp:\n 1015  HXDLIN( 884)\t\t_this5->label = HX_(\"value\",71,7f,b8,31);\n 1016  HXDLIN( 884)\t\t_this5->value = value5;\n 1017: HXLINE( 878)\t\treturn ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(6)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,_hx_tmp3)->init(4,_hx_tmp4)->init(5,_this5));\n 1018              \t}\n 1019  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/util/FlxStringUtil.cpp:\n   27  #include <flixel/math/FlxMath.h>\n   28  #endif\n   29: #ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd\n   30: #include <flixel/system/frontEnds/DebuggerFrontEnd.h>\n   31  #endif\n   32  #ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd\n   ..\n   86  HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_450_bitmapToCSV,\"flixel.util.FlxStringUtil\",\"bitmapToCSV\",0x6fd72f79,\"flixel.util.FlxStringUtil.bitmapToCSV\",\"flixel/util/FlxStringUtil.hx\",450,0x4e012e33)\n   87  HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_564_imageToCSV,\"flixel.util.FlxStringUtil\",\"imageToCSV\",0xe3229173,\"flixel.util.FlxStringUtil.imageToCSV\",\"flixel/util/FlxStringUtil.hx\",564,0x4e012e33)\n   88: HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_586_getDebugString,\"flixel.util.FlxStringUtil\",\"getDebugString\",0x47d891d1,\"flixel.util.FlxStringUtil.getDebugString\",\"flixel/util/FlxStringUtil.hx\",586,0x4e012e33)\n   89  HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_606_contains,\"flixel.util.FlxStringUtil\",\"contains\",0x45000522,\"flixel.util.FlxStringUtil.contains\",\"flixel/util/FlxStringUtil.hx\",606,0x4e012e33)\n   90  HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_614_remove,\"flixel.util.FlxStringUtil\",\"remove\",0xf6fd7087,\"flixel.util.FlxStringUtil.remove\",\"flixel/util/FlxStringUtil.hx\",614,0x4e012e33)\n   ..\n  683  STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxStringUtil_obj,imageToCSV,return )\n  684  \n  685: ::String FlxStringUtil_obj::getDebugString(::Array< ::Dynamic> LabelValuePairs){\n  686:             \tHX_STACKFRAME(&_hx_pos_85c2c6c527e56776_586_getDebugString)\n  687  HXLINE( 587)\t\t::String output = HX_(\"(\",28,00,00,00);\n  688  HXLINE( 588)\t\t{\n  ...\n  694  HXLINE( 591)\t\t\t\t ::Dynamic value = pair->value;\n  695  HXLINE( 592)\t\t\t\tif (::Std_obj::is(value,hx::ClassOf< ::Float >())) {\n  696: HXLINE( 594)\t\t\t\t\tvalue = ::flixel::math::FlxMath_obj::roundDecimal(( (Float)(value) ),::flixel::FlxG_obj::debugger->precision);\n  697              \t\t\t\t}\n  698  HXLINE( 596)\t\t\t\toutput = (output + (::Std_obj::string(value) + HX_(\" | \",44,b4,18,00)));\n  ...\n  705  \n  706  \n  707: STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxStringUtil_obj,getDebugString,return )\n  708  \n  709  bool FlxStringUtil_obj::contains(::String s,::String str){\n  ...\n  817  \t\tbreak;\n  818  \tcase 14:\n  819: \t\tif (HX_FIELD_EQ(inName,\"getDebugString\") ) { outValue = getDebugString_dyn(); return true; }\n  820  \t\tbreak;\n  821  \tcase 15:\n  ...\n  866  \tHX_HCSTRING(\"bitmapToCSV\",\"\\x9c\",\"\\x56\",\"\\x63\",\"\\x54\"),\n  867  \tHX_HCSTRING(\"imageToCSV\",\"\\xb0\",\"\\xdf\",\"\\xda\",\"\\x1f\"),\n  868: \tHX_HCSTRING(\"getDebugString\",\"\\x8e\",\"\\x42\",\"\\x41\",\"\\xa1\"),\n  869  \tHX_HCSTRING(\"contains\",\"\\x1f\",\"\\x5a\",\"\\x7b\",\"\\x2c\"),\n  870  \tHX_HCSTRING(\"remove\",\"\\x44\",\"\\x9c\",\"\\x88\",\"\\x04\"),\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/flixel/util/helpers/FlxRange.cpp:\n  100  HXDLIN(  68)\t\t_this1->label = HX_(\"end\",db,03,4d,00);\n  101  HXDLIN(  68)\t\t_this1->value = value1;\n  102: HXLINE(  66)\t\treturn ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp)->init(1,_this1));\n  103              \t}\n  104  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/lime/_backend/native/NativeGLRenderContext.cpp:\n  132  #include <lime/graphics/opengl/ext/EXT_color_buffer_half_float.h>\n  133  #endif\n  134: #ifndef INCLUDED_lime_graphics_opengl_ext_EXT_debug_label\n  135: #include <lime/graphics/opengl/ext/EXT_debug_label.h>\n  136  #endif\n  137: #ifndef INCLUDED_lime_graphics_opengl_ext_EXT_debug_marker\n  138: #include <lime/graphics/opengl/ext/EXT_debug_marker.h>\n  139  #endif\n  140  #ifndef INCLUDED_lime_graphics_opengl_ext_EXT_discard_framebuffer\n  ...\n  222  #include <lime/graphics/opengl/ext/IMG_texture_compression_pvrtc.h>\n  223  #endif\n  224: #ifndef INCLUDED_lime_graphics_opengl_ext_KHR_debug\n  225: #include <lime/graphics/opengl/ext/KHR_debug.h>\n  226  #endif\n  227  #ifndef INCLUDED_lime_graphics_opengl_ext_KHR_texture_compression_astc_ldr\n  ...\n 4514  \n 4515              \t\t\tHX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_26) HXARGC(0)\n 4516:             \t\t\t ::lime::graphics::opengl::ext::EXT_debug_label _hx_run(){\n 4517              \t\t\t\tHX_GC_STACKFRAME(&_hx_pos_91221e281a1e85bc_3860___initialize)\n 4518: HXLINE(3860)\t\t\t\treturn  ::lime::graphics::opengl::ext::EXT_debug_label_obj::__alloc( HX_CTX );\n 4519              \t\t\t}\n 4520              \t\t\tHX_END_LOCAL_FUNC0(return)\n 4521  \n 4522              \t\t\tHX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_27) HXARGC(0)\n 4523:             \t\t\t ::lime::graphics::opengl::ext::EXT_debug_marker _hx_run(){\n 4524              \t\t\t\tHX_GC_STACKFRAME(&_hx_pos_91221e281a1e85bc_3861___initialize)\n 4525: HXLINE(3861)\t\t\t\treturn  ::lime::graphics::opengl::ext::EXT_debug_marker_obj::__alloc( HX_CTX );\n 4526              \t\t\t}\n 4527              \t\t\tHX_END_LOCAL_FUNC0(return)\n ....\n 4724  \n 4725              \t\t\tHX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_56) HXARGC(0)\n 4726:             \t\t\t ::lime::graphics::opengl::ext::KHR_debug _hx_run(){\n 4727              \t\t\t\tHX_GC_STACKFRAME(&_hx_pos_91221e281a1e85bc_3890___initialize)\n 4728: HXLINE(3890)\t\t\t\treturn  ::lime::graphics::opengl::ext::KHR_debug_obj::__alloc( HX_CTX );\n 4729              \t\t\t}\n 4730              \t\t\tHX_END_LOCAL_FUNC0(return)\n ....\n 5092  HXLINE(3858)\t\t\t::lime::_backend::native::NativeGLRenderContext_obj::_hx___extensionObjectConstructors->set(HX_(\"EXT_color_buffer_float\",b7,19,0b,dd), ::Dynamic(new _hx_Closure_24()));\n 5093  HXLINE(3859)\t\t\t::lime::_backend::native::NativeGLRenderContext_obj::_hx___extensionObjectConstructors->set(HX_(\"EXT_color_buffer_half_float\",d5,e8,0a,44), ::Dynamic(new _hx_Closure_25()));\n 5094: HXLINE(3860)\t\t\t::lime::_backend::native::NativeGLRenderContext_obj::_hx___extensionObjectConstructors->set(HX_(\"EXT_debug_label\",ca,3b,0e,9c), ::Dynamic(new _hx_Closure_26()));\n 5095: HXLINE(3861)\t\t\t::lime::_backend::native::NativeGLRenderContext_obj::_hx___extensionObjectConstructors->set(HX_(\"EXT_debug_marker\",24,63,59,61), ::Dynamic(new _hx_Closure_27()));\n 5096  HXLINE(3862)\t\t\t::lime::_backend::native::NativeGLRenderContext_obj::_hx___extensionObjectConstructors->set(HX_(\"EXT_discard_framebuffer\",0e,f8,79,f7), ::Dynamic(new _hx_Closure_28()));\n 5097  HXLINE(3863)\t\t\t::lime::_backend::native::NativeGLRenderContext_obj::_hx___extensionObjectConstructors->set(HX_(\"EXT_map_buffer_range\",7f,25,48,f8), ::Dynamic(new _hx_Closure_29()));\n ....\n 5122  HXLINE(3888)\t\t\t::lime::_backend::native::NativeGLRenderContext_obj::_hx___extensionObjectConstructors->set(HX_(\"IMG_shader_binary\",7f,ec,f0,da), ::Dynamic(new _hx_Closure_54()));\n 5123  HXLINE(3889)\t\t\t::lime::_backend::native::NativeGLRenderContext_obj::_hx___extensionObjectConstructors->set(HX_(\"IMG_texture_compression_pvrtc\",02,61,85,d1), ::Dynamic(new _hx_Closure_55()));\n 5124: HXLINE(3890)\t\t\t::lime::_backend::native::NativeGLRenderContext_obj::_hx___extensionObjectConstructors->set(HX_(\"KHR_debug\",69,7f,d0,07), ::Dynamic(new _hx_Closure_56()));\n 5125  HXLINE(3891)\t\t\t::lime::_backend::native::NativeGLRenderContext_obj::_hx___extensionObjectConstructors->set(HX_(\"KHR_texture_compression_astc_ldr\",63,29,b6,ea), ::Dynamic(new _hx_Closure_57()));\n 5126  HXLINE(3892)\t\t\t::lime::_backend::native::NativeGLRenderContext_obj::_hx___extensionObjectConstructors->set(HX_(\"NV_coverage_sample\",aa,83,fd,db), ::Dynamic(new _hx_Closure_58()));\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/lime/graphics/opengl/ext/EXT_debug_label.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_lime_graphics_opengl_ext_EXT_debug_label\n    5: #include <lime/graphics/opengl/ext/EXT_debug_label.h>\n    6  #endif\n    7  \n    8: HX_DEFINE_STACK_FRAME(_hx_pos_7a3489e7f3921050_6_new,\"lime.graphics.opengl.ext.EXT_debug_label\",\"new\",0x2646605a,\"lime.graphics.opengl.ext.EXT_debug_label.new\",\"lime/graphics/opengl/ext/EXT_debug_label.hx\",6,0xe58ba178)\n    9  namespace lime{\n   10  namespace graphics{\n   ..\n   12  namespace ext{\n   13  \n   14: void EXT_debug_label_obj::__construct(){\n   15              \tHX_STACKFRAME(&_hx_pos_7a3489e7f3921050_6_new)\n   16  HXLINE(  14)\t\tthis->VERTEX_ARRAY_OBJECT_EXT = (int)37204;\n   ..\n   22              \t}\n   23  \n   24: Dynamic EXT_debug_label_obj::__CreateEmpty() { return new EXT_debug_label_obj; }\n   25  \n   26: void *EXT_debug_label_obj::_hx_vtable = 0;\n   27  \n   28: Dynamic EXT_debug_label_obj::__Create(hx::DynamicArray inArgs)\n   29  {\n   30: \thx::ObjectPtr< EXT_debug_label_obj > _hx_result = new EXT_debug_label_obj();\n   31  \t_hx_result->__construct();\n   32  \treturn _hx_result;\n   33  }\n   34  \n   35: bool EXT_debug_label_obj::_hx_isInstanceOf(int inClassId) {\n   36  \treturn inClassId==(int)0x00000001 || inClassId==(int)0x41a6bb58;\n   37  }\n   38  \n   39  \n   40: EXT_debug_label_obj::EXT_debug_label_obj()\n   41  {\n   42  }\n   43  \n   44: hx::Val EXT_debug_label_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)\n   45  {\n   46  \tswitch(inName.length) {\n   ..\n   64  }\n   65  \n   66: hx::Val EXT_debug_label_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)\n   67  {\n   68  \tswitch(inName.length) {\n   ..\n   86  }\n   87  \n   88: void EXT_debug_label_obj::__GetFields(Array< ::String> &outFields)\n   89  {\n   90  \toutFields->push(HX_HCSTRING(\"PROGRAM_PIPELINE_OBJECT_EXT\",\"\\x63\",\"\\x14\",\"\\xf0\",\"\\x5a\"));\n   ..\n   98  \n   99  #if HXCPP_SCRIPTABLE\n  100: static hx::StorageInfo EXT_debug_label_obj_sMemberStorageInfo[] = {\n  101: \t{hx::fsInt,(int)offsetof(EXT_debug_label_obj,PROGRAM_PIPELINE_OBJECT_EXT),HX_HCSTRING(\"PROGRAM_PIPELINE_OBJECT_EXT\",\"\\x63\",\"\\x14\",\"\\xf0\",\"\\x5a\")},\n  102: \t{hx::fsInt,(int)offsetof(EXT_debug_label_obj,PROGRAM_OBJECT_EXT),HX_HCSTRING(\"PROGRAM_OBJECT_EXT\",\"\\xfc\",\"\\x24\",\"\\x24\",\"\\x03\")},\n  103: \t{hx::fsInt,(int)offsetof(EXT_debug_label_obj,SHADER_OBJECT_EXT),HX_HCSTRING(\"SHADER_OBJECT_EXT\",\"\\xdb\",\"\\xfd\",\"\\xea\",\"\\x90\")},\n  104: \t{hx::fsInt,(int)offsetof(EXT_debug_label_obj,BUFFER_OBJECT_EXT),HX_HCSTRING(\"BUFFER_OBJECT_EXT\",\"\\xe0\",\"\\xe7\",\"\\x70\",\"\\x6a\")},\n  105: \t{hx::fsInt,(int)offsetof(EXT_debug_label_obj,QUERY_OBJECT_EXT),HX_HCSTRING(\"QUERY_OBJECT_EXT\",\"\\xf8\",\"\\x86\",\"\\xe7\",\"\\xd9\")},\n  106: \t{hx::fsInt,(int)offsetof(EXT_debug_label_obj,VERTEX_ARRAY_OBJECT_EXT),HX_HCSTRING(\"VERTEX_ARRAY_OBJECT_EXT\",\"\\x82\",\"\\xd2\",\"\\x68\",\"\\x2c\")},\n  107  \t{ hx::fsUnknown, 0, null()}\n  108  };\n  109: static hx::StaticInfo *EXT_debug_label_obj_sStaticStorageInfo = 0;\n  110  #endif\n  111  \n  112: static ::String EXT_debug_label_obj_sMemberFields[] = {\n  113  \tHX_HCSTRING(\"PROGRAM_PIPELINE_OBJECT_EXT\",\"\\x63\",\"\\x14\",\"\\xf0\",\"\\x5a\"),\n  114  \tHX_HCSTRING(\"PROGRAM_OBJECT_EXT\",\"\\xfc\",\"\\x24\",\"\\x24\",\"\\x03\"),\n  ...\n  119  \t::String(null()) };\n  120  \n  121: static void EXT_debug_label_obj_sMarkStatics(HX_MARK_PARAMS) {\n  122: \tHX_MARK_MEMBER_NAME(EXT_debug_label_obj::__mClass,\"__mClass\");\n  123  };\n  124  \n  125  #ifdef HXCPP_VISIT_ALLOCS\n  126: static void EXT_debug_label_obj_sVisitStatics(HX_VISIT_PARAMS) {\n  127: \tHX_VISIT_MEMBER_NAME(EXT_debug_label_obj::__mClass,\"__mClass\");\n  128  };\n  129  \n  130  #endif\n  131  \n  132: hx::Class EXT_debug_label_obj::__mClass;\n  133  \n  134: void EXT_debug_label_obj::__register()\n  135  {\n  136: \thx::Object *dummy = new EXT_debug_label_obj;\n  137: \tEXT_debug_label_obj::_hx_vtable = *(void **)dummy;\n  138  \thx::Static(__mClass) = new hx::Class_obj();\n  139: \t__mClass->mName = HX_HCSTRING(\"lime.graphics.opengl.ext.EXT_debug_label\",\"\\x68\",\"\\xeb\",\"\\x8c\",\"\\x45\");\n  140  \t__mClass->mSuper = &super::__SGetClass();\n  141  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  143  \t__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;\n  144  \t__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;\n  145: \t__mClass->mMarkFunc = EXT_debug_label_obj_sMarkStatics;\n  146  \t__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);\n  147: \t__mClass->mMembers = hx::Class_obj::dupFunctions(EXT_debug_label_obj_sMemberFields);\n  148: \t__mClass->mCanCast = hx::TCanCast< EXT_debug_label_obj >;\n  149  #ifdef HXCPP_VISIT_ALLOCS\n  150: \t__mClass->mVisitFunc = EXT_debug_label_obj_sVisitStatics;\n  151  #endif\n  152  #ifdef HXCPP_SCRIPTABLE\n  153: \t__mClass->mMemberStorageInfo = EXT_debug_label_obj_sMemberStorageInfo;\n  154  #endif\n  155  #ifdef HXCPP_SCRIPTABLE\n  156: \t__mClass->mStaticStorageInfo = EXT_debug_label_obj_sStaticStorageInfo;\n  157  #endif\n  158  \thx::_hx_RegisterClass(__mClass->mName, __mClass);\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/lime/graphics/opengl/ext/EXT_debug_marker.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_lime_graphics_opengl_ext_EXT_debug_marker\n    5: #include <lime/graphics/opengl/ext/EXT_debug_marker.h>\n    6  #endif\n    7  \n    8: HX_DEFINE_STACK_FRAME(_hx_pos_2d4093c89e1674d3_7_new,\"lime.graphics.opengl.ext.EXT_debug_marker\",\"new\",0xd4b959b8,\"lime.graphics.opengl.ext.EXT_debug_marker.new\",\"lime/graphics/opengl/ext/EXT_debug_marker.hx\",7,0xec070956)\n    9  namespace lime{\n   10  namespace graphics{\n   ..\n   12  namespace ext{\n   13  \n   14: void EXT_debug_marker_obj::__construct(){\n   15              \tHX_STACKFRAME(&_hx_pos_2d4093c89e1674d3_7_new)\n   16              \t}\n   17  \n   18: Dynamic EXT_debug_marker_obj::__CreateEmpty() { return new EXT_debug_marker_obj; }\n   19  \n   20: void *EXT_debug_marker_obj::_hx_vtable = 0;\n   21  \n   22: Dynamic EXT_debug_marker_obj::__Create(hx::DynamicArray inArgs)\n   23  {\n   24: \thx::ObjectPtr< EXT_debug_marker_obj > _hx_result = new EXT_debug_marker_obj();\n   25  \t_hx_result->__construct();\n   26  \treturn _hx_result;\n   27  }\n   28  \n   29: bool EXT_debug_marker_obj::_hx_isInstanceOf(int inClassId) {\n   30  \treturn inClassId==(int)0x00000001 || inClassId==(int)0x018f00f2;\n   31  }\n   32  \n   33  \n   34: EXT_debug_marker_obj::EXT_debug_marker_obj()\n   35  {\n   36  }\n   37  \n   38  #if HXCPP_SCRIPTABLE\n   39: static hx::StorageInfo *EXT_debug_marker_obj_sMemberStorageInfo = 0;\n   40: static hx::StaticInfo *EXT_debug_marker_obj_sStaticStorageInfo = 0;\n   41  #endif\n   42  \n   43: static void EXT_debug_marker_obj_sMarkStatics(HX_MARK_PARAMS) {\n   44: \tHX_MARK_MEMBER_NAME(EXT_debug_marker_obj::__mClass,\"__mClass\");\n   45  };\n   46  \n   47  #ifdef HXCPP_VISIT_ALLOCS\n   48: static void EXT_debug_marker_obj_sVisitStatics(HX_VISIT_PARAMS) {\n   49: \tHX_VISIT_MEMBER_NAME(EXT_debug_marker_obj::__mClass,\"__mClass\");\n   50  };\n   51  \n   52  #endif\n   53  \n   54: hx::Class EXT_debug_marker_obj::__mClass;\n   55  \n   56: void EXT_debug_marker_obj::__register()\n   57  {\n   58: \thx::Object *dummy = new EXT_debug_marker_obj;\n   59: \tEXT_debug_marker_obj::_hx_vtable = *(void **)dummy;\n   60  \thx::Static(__mClass) = new hx::Class_obj();\n   61: \t__mClass->mName = HX_HCSTRING(\"lime.graphics.opengl.ext.EXT_debug_marker\",\"\\xc6\",\"\\x5d\",\"\\xb4\",\"\\x06\");\n   62  \t__mClass->mSuper = &super::__SGetClass();\n   63  \t__mClass->mConstructEmpty = &__CreateEmpty;\n   ..\n   65  \t__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;\n   66  \t__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;\n   67: \t__mClass->mMarkFunc = EXT_debug_marker_obj_sMarkStatics;\n   68  \t__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);\n   69  \t__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);\n   70: \t__mClass->mCanCast = hx::TCanCast< EXT_debug_marker_obj >;\n   71  #ifdef HXCPP_VISIT_ALLOCS\n   72: \t__mClass->mVisitFunc = EXT_debug_marker_obj_sVisitStatics;\n   73  #endif\n   74  #ifdef HXCPP_SCRIPTABLE\n   75: \t__mClass->mMemberStorageInfo = EXT_debug_marker_obj_sMemberStorageInfo;\n   76  #endif\n   77  #ifdef HXCPP_SCRIPTABLE\n   78: \t__mClass->mStaticStorageInfo = EXT_debug_marker_obj_sStaticStorageInfo;\n   79  #endif\n   80  \thx::_hx_RegisterClass(__mClass->mName, __mClass);\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/lime/graphics/opengl/ext/KHR_debug.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_lime_graphics_opengl_ext_KHR_debug\n    5: #include <lime/graphics/opengl/ext/KHR_debug.h>\n    6  #endif\n    7  \n    8: HX_DEFINE_STACK_FRAME(_hx_pos_e7ead9e1a8712dad_6_new,\"lime.graphics.opengl.ext.KHR_debug\",\"new\",0xa09f74f9,\"lime.graphics.opengl.ext.KHR_debug.new\",\"lime/graphics/opengl/ext/KHR_debug.hx\",6,0x748ce039)\n    9  namespace lime{\n   10  namespace graphics{\n   ..\n   12  namespace ext{\n   13  \n   14: void KHR_debug_obj::__construct(){\n   15              \tHX_STACKFRAME(&_hx_pos_e7ead9e1a8712dad_6_new)\n   16  HXLINE(  46)\t\tthis->STACK_UNDERFLOW = (int)1284;\n   17  HXLINE(  45)\t\tthis->STACK_OVERFLOW = (int)1283;\n   18: HXLINE(  44)\t\tthis->CONTEXT_FLAG_DEBUG_BIT = (int)2;\n   19: HXLINE(  43)\t\tthis->DEBUG_OUTPUT = (int)37600;\n   20: HXLINE(  42)\t\tthis->DEBUG_SEVERITY_LOW = (int)37192;\n   21: HXLINE(  41)\t\tthis->DEBUG_SEVERITY_MEDIUM = (int)37191;\n   22: HXLINE(  40)\t\tthis->DEBUG_SEVERITY_HIGH = (int)37190;\n   23: HXLINE(  39)\t\tthis->DEBUG_LOGGED_MESSAGES = (int)37189;\n   24: HXLINE(  38)\t\tthis->MAX_DEBUG_LOGGED_MESSAGES = (int)37188;\n   25: HXLINE(  37)\t\tthis->MAX_DEBUG_MESSAGE_LENGTH = (int)37187;\n   26  HXLINE(  36)\t\tthis->MAX_LABEL_LENGTH = (int)33512;\n   27  HXLINE(  35)\t\tthis->SAMPLER = (int)33510;\n   ..\n   30  HXLINE(  32)\t\tthis->SHADER = (int)33505;\n   31  HXLINE(  31)\t\tthis->BUFFER = (int)33504;\n   32: HXLINE(  30)\t\tthis->DEBUG_GROUP_STACK_DEPTH = (int)33389;\n   33: HXLINE(  29)\t\tthis->MAX_DEBUG_GROUP_STACK_DEPTH = (int)33388;\n   34: HXLINE(  28)\t\tthis->DEBUG_SEVERITY_NOTIFICATION = (int)33387;\n   35: HXLINE(  27)\t\tthis->DEBUG_TYPE_POP_GROUP = (int)33386;\n   36: HXLINE(  26)\t\tthis->DEBUG_TYPE_PUSH_GROUP = (int)33385;\n   37: HXLINE(  25)\t\tthis->DEBUG_TYPE_MARKER = (int)33384;\n   38: HXLINE(  24)\t\tthis->DEBUG_TYPE_OTHER = (int)33361;\n   39: HXLINE(  23)\t\tthis->DEBUG_TYPE_PERFORMANCE = (int)33360;\n   40: HXLINE(  22)\t\tthis->DEBUG_TYPE_PORTABILITY = (int)33359;\n   41: HXLINE(  21)\t\tthis->DEBUG_TYPE_UNDEFINED_BEHAVIOR = (int)33358;\n   42: HXLINE(  20)\t\tthis->DEBUG_TYPE_DEPRECATED_BEHAVIOR = (int)33357;\n   43: HXLINE(  19)\t\tthis->DEBUG_TYPE_ERROR = (int)33356;\n   44: HXLINE(  18)\t\tthis->DEBUG_SOURCE_OTHER = (int)33355;\n   45: HXLINE(  17)\t\tthis->DEBUG_SOURCE_APPLICATION = (int)33354;\n   46: HXLINE(  16)\t\tthis->DEBUG_SOURCE_THIRD_PARTY = (int)33353;\n   47: HXLINE(  15)\t\tthis->DEBUG_SOURCE_SHADER_COMPILER = (int)33352;\n   48: HXLINE(  14)\t\tthis->DEBUG_SOURCE_WINDOW_SYSTEM = (int)33351;\n   49: HXLINE(  13)\t\tthis->DEBUG_SOURCE_API = (int)33350;\n   50: HXLINE(  12)\t\tthis->DEBUG_CALLBACK_USER_PARAM = (int)33349;\n   51: HXLINE(  11)\t\tthis->DEBUG_CALLBACK_FUNCTION = (int)33348;\n   52: HXLINE(  10)\t\tthis->DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = (int)33347;\n   53: HXLINE(   9)\t\tthis->DEBUG_OUTPUT_SYNCHRONOUS = (int)33346;\n   54              \t}\n   55  \n   56: Dynamic KHR_debug_obj::__CreateEmpty() { return new KHR_debug_obj; }\n   57  \n   58: void *KHR_debug_obj::_hx_vtable = 0;\n   59  \n   60: Dynamic KHR_debug_obj::__Create(hx::DynamicArray inArgs)\n   61  {\n   62: \thx::ObjectPtr< KHR_debug_obj > _hx_result = new KHR_debug_obj();\n   63  \t_hx_result->__construct();\n   64  \treturn _hx_result;\n   65  }\n   66  \n   67: bool KHR_debug_obj::_hx_isInstanceOf(int inClassId) {\n   68  \treturn inClassId==(int)0x00000001 || inClassId==(int)0x4255c077;\n   69  }\n   70  \n   71  \n   72: KHR_debug_obj::KHR_debug_obj()\n   73  {\n   74  }\n   75  \n   76: hx::Val KHR_debug_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)\n   77  {\n   78  \tswitch(inName.length) {\n   ..\n   89  \t\tbreak;\n   90  \tcase 12:\n   91: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_OUTPUT\") ) { return hx::Val( DEBUG_OUTPUT ); }\n   92  \t\tbreak;\n   93  \tcase 14:\n   ..\n   98  \t\tbreak;\n   99  \tcase 16:\n  100: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_SOURCE_API\") ) { return hx::Val( DEBUG_SOURCE_API ); }\n  101: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_TYPE_ERROR\") ) { return hx::Val( DEBUG_TYPE_ERROR ); }\n  102: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_TYPE_OTHER\") ) { return hx::Val( DEBUG_TYPE_OTHER ); }\n  103  \t\tif (HX_FIELD_EQ(inName,\"MAX_LABEL_LENGTH\") ) { return hx::Val( MAX_LABEL_LENGTH ); }\n  104  \t\tbreak;\n  105  \tcase 17:\n  106: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_TYPE_MARKER\") ) { return hx::Val( DEBUG_TYPE_MARKER ); }\n  107  \t\tbreak;\n  108  \tcase 18:\n  109: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_SOURCE_OTHER\") ) { return hx::Val( DEBUG_SOURCE_OTHER ); }\n  110: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_SEVERITY_LOW\") ) { return hx::Val( DEBUG_SEVERITY_LOW ); }\n  111  \t\tbreak;\n  112  \tcase 19:\n  113: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_SEVERITY_HIGH\") ) { return hx::Val( DEBUG_SEVERITY_HIGH ); }\n  114  \t\tbreak;\n  115  \tcase 20:\n  116: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_TYPE_POP_GROUP\") ) { return hx::Val( DEBUG_TYPE_POP_GROUP ); }\n  117  \t\tbreak;\n  118  \tcase 21:\n  119: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_TYPE_PUSH_GROUP\") ) { return hx::Val( DEBUG_TYPE_PUSH_GROUP ); }\n  120: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_LOGGED_MESSAGES\") ) { return hx::Val( DEBUG_LOGGED_MESSAGES ); }\n  121: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_SEVERITY_MEDIUM\") ) { return hx::Val( DEBUG_SEVERITY_MEDIUM ); }\n  122  \t\tbreak;\n  123  \tcase 22:\n  124: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_TYPE_PORTABILITY\") ) { return hx::Val( DEBUG_TYPE_PORTABILITY ); }\n  125: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_TYPE_PERFORMANCE\") ) { return hx::Val( DEBUG_TYPE_PERFORMANCE ); }\n  126: \t\tif (HX_FIELD_EQ(inName,\"CONTEXT_FLAG_DEBUG_BIT\") ) { return hx::Val( CONTEXT_FLAG_DEBUG_BIT ); }\n  127  \t\tbreak;\n  128  \tcase 23:\n  129: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_CALLBACK_FUNCTION\") ) { return hx::Val( DEBUG_CALLBACK_FUNCTION ); }\n  130: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_GROUP_STACK_DEPTH\") ) { return hx::Val( DEBUG_GROUP_STACK_DEPTH ); }\n  131  \t\tbreak;\n  132  \tcase 24:\n  133: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_OUTPUT_SYNCHRONOUS\") ) { return hx::Val( DEBUG_OUTPUT_SYNCHRONOUS ); }\n  134: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_SOURCE_THIRD_PARTY\") ) { return hx::Val( DEBUG_SOURCE_THIRD_PARTY ); }\n  135: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_SOURCE_APPLICATION\") ) { return hx::Val( DEBUG_SOURCE_APPLICATION ); }\n  136: \t\tif (HX_FIELD_EQ(inName,\"MAX_DEBUG_MESSAGE_LENGTH\") ) { return hx::Val( MAX_DEBUG_MESSAGE_LENGTH ); }\n  137  \t\tbreak;\n  138  \tcase 25:\n  139: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_CALLBACK_USER_PARAM\") ) { return hx::Val( DEBUG_CALLBACK_USER_PARAM ); }\n  140: \t\tif (HX_FIELD_EQ(inName,\"MAX_DEBUG_LOGGED_MESSAGES\") ) { return hx::Val( MAX_DEBUG_LOGGED_MESSAGES ); }\n  141  \t\tbreak;\n  142  \tcase 26:\n  143: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_SOURCE_WINDOW_SYSTEM\") ) { return hx::Val( DEBUG_SOURCE_WINDOW_SYSTEM ); }\n  144  \t\tbreak;\n  145  \tcase 27:\n  146: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_SEVERITY_NOTIFICATION\") ) { return hx::Val( DEBUG_SEVERITY_NOTIFICATION ); }\n  147: \t\tif (HX_FIELD_EQ(inName,\"MAX_DEBUG_GROUP_STACK_DEPTH\") ) { return hx::Val( MAX_DEBUG_GROUP_STACK_DEPTH ); }\n  148  \t\tbreak;\n  149  \tcase 28:\n  150: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_SOURCE_SHADER_COMPILER\") ) { return hx::Val( DEBUG_SOURCE_SHADER_COMPILER ); }\n  151  \t\tbreak;\n  152  \tcase 29:\n  153: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_TYPE_UNDEFINED_BEHAVIOR\") ) { return hx::Val( DEBUG_TYPE_UNDEFINED_BEHAVIOR ); }\n  154  \t\tbreak;\n  155  \tcase 30:\n  156: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_TYPE_DEPRECATED_BEHAVIOR\") ) { return hx::Val( DEBUG_TYPE_DEPRECATED_BEHAVIOR ); }\n  157  \t\tbreak;\n  158  \tcase 32:\n  159: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_NEXT_LOGGED_MESSAGE_LENGTH\") ) { return hx::Val( DEBUG_NEXT_LOGGED_MESSAGE_LENGTH ); }\n  160  \t}\n  161  \treturn super::__Field(inName,inCallProp);\n  162  }\n  163  \n  164: hx::Val KHR_debug_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)\n  165  {\n  166  \tswitch(inName.length) {\n  ...\n  177  \t\tbreak;\n  178  \tcase 12:\n  179: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_OUTPUT\") ) { DEBUG_OUTPUT=inValue.Cast< int >(); return inValue; }\n  180  \t\tbreak;\n  181  \tcase 14:\n  ...\n  186  \t\tbreak;\n  187  \tcase 16:\n  188: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_SOURCE_API\") ) { DEBUG_SOURCE_API=inValue.Cast< int >(); return inValue; }\n  189: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_TYPE_ERROR\") ) { DEBUG_TYPE_ERROR=inValue.Cast< int >(); return inValue; }\n  190: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_TYPE_OTHER\") ) { DEBUG_TYPE_OTHER=inValue.Cast< int >(); return inValue; }\n  191  \t\tif (HX_FIELD_EQ(inName,\"MAX_LABEL_LENGTH\") ) { MAX_LABEL_LENGTH=inValue.Cast< int >(); return inValue; }\n  192  \t\tbreak;\n  193  \tcase 17:\n  194: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_TYPE_MARKER\") ) { DEBUG_TYPE_MARKER=inValue.Cast< int >(); return inValue; }\n  195  \t\tbreak;\n  196  \tcase 18:\n  197: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_SOURCE_OTHER\") ) { DEBUG_SOURCE_OTHER=inValue.Cast< int >(); return inValue; }\n  198: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_SEVERITY_LOW\") ) { DEBUG_SEVERITY_LOW=inValue.Cast< int >(); return inValue; }\n  199  \t\tbreak;\n  200  \tcase 19:\n  201: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_SEVERITY_HIGH\") ) { DEBUG_SEVERITY_HIGH=inValue.Cast< int >(); return inValue; }\n  202  \t\tbreak;\n  203  \tcase 20:\n  204: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_TYPE_POP_GROUP\") ) { DEBUG_TYPE_POP_GROUP=inValue.Cast< int >(); return inValue; }\n  205  \t\tbreak;\n  206  \tcase 21:\n  207: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_TYPE_PUSH_GROUP\") ) { DEBUG_TYPE_PUSH_GROUP=inValue.Cast< int >(); return inValue; }\n  208: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_LOGGED_MESSAGES\") ) { DEBUG_LOGGED_MESSAGES=inValue.Cast< int >(); return inValue; }\n  209: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_SEVERITY_MEDIUM\") ) { DEBUG_SEVERITY_MEDIUM=inValue.Cast< int >(); return inValue; }\n  210  \t\tbreak;\n  211  \tcase 22:\n  212: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_TYPE_PORTABILITY\") ) { DEBUG_TYPE_PORTABILITY=inValue.Cast< int >(); return inValue; }\n  213: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_TYPE_PERFORMANCE\") ) { DEBUG_TYPE_PERFORMANCE=inValue.Cast< int >(); return inValue; }\n  214: \t\tif (HX_FIELD_EQ(inName,\"CONTEXT_FLAG_DEBUG_BIT\") ) { CONTEXT_FLAG_DEBUG_BIT=inValue.Cast< int >(); return inValue; }\n  215  \t\tbreak;\n  216  \tcase 23:\n  217: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_CALLBACK_FUNCTION\") ) { DEBUG_CALLBACK_FUNCTION=inValue.Cast< int >(); return inValue; }\n  218: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_GROUP_STACK_DEPTH\") ) { DEBUG_GROUP_STACK_DEPTH=inValue.Cast< int >(); return inValue; }\n  219  \t\tbreak;\n  220  \tcase 24:\n  221: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_OUTPUT_SYNCHRONOUS\") ) { DEBUG_OUTPUT_SYNCHRONOUS=inValue.Cast< int >(); return inValue; }\n  222: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_SOURCE_THIRD_PARTY\") ) { DEBUG_SOURCE_THIRD_PARTY=inValue.Cast< int >(); return inValue; }\n  223: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_SOURCE_APPLICATION\") ) { DEBUG_SOURCE_APPLICATION=inValue.Cast< int >(); return inValue; }\n  224: \t\tif (HX_FIELD_EQ(inName,\"MAX_DEBUG_MESSAGE_LENGTH\") ) { MAX_DEBUG_MESSAGE_LENGTH=inValue.Cast< int >(); return inValue; }\n  225  \t\tbreak;\n  226  \tcase 25:\n  227: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_CALLBACK_USER_PARAM\") ) { DEBUG_CALLBACK_USER_PARAM=inValue.Cast< int >(); return inValue; }\n  228: \t\tif (HX_FIELD_EQ(inName,\"MAX_DEBUG_LOGGED_MESSAGES\") ) { MAX_DEBUG_LOGGED_MESSAGES=inValue.Cast< int >(); return inValue; }\n  229  \t\tbreak;\n  230  \tcase 26:\n  231: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_SOURCE_WINDOW_SYSTEM\") ) { DEBUG_SOURCE_WINDOW_SYSTEM=inValue.Cast< int >(); return inValue; }\n  232  \t\tbreak;\n  233  \tcase 27:\n  234: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_SEVERITY_NOTIFICATION\") ) { DEBUG_SEVERITY_NOTIFICATION=inValue.Cast< int >(); return inValue; }\n  235: \t\tif (HX_FIELD_EQ(inName,\"MAX_DEBUG_GROUP_STACK_DEPTH\") ) { MAX_DEBUG_GROUP_STACK_DEPTH=inValue.Cast< int >(); return inValue; }\n  236  \t\tbreak;\n  237  \tcase 28:\n  238: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_SOURCE_SHADER_COMPILER\") ) { DEBUG_SOURCE_SHADER_COMPILER=inValue.Cast< int >(); return inValue; }\n  239  \t\tbreak;\n  240  \tcase 29:\n  241: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_TYPE_UNDEFINED_BEHAVIOR\") ) { DEBUG_TYPE_UNDEFINED_BEHAVIOR=inValue.Cast< int >(); return inValue; }\n  242  \t\tbreak;\n  243  \tcase 30:\n  244: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_TYPE_DEPRECATED_BEHAVIOR\") ) { DEBUG_TYPE_DEPRECATED_BEHAVIOR=inValue.Cast< int >(); return inValue; }\n  245  \t\tbreak;\n  246  \tcase 32:\n  247: \t\tif (HX_FIELD_EQ(inName,\"DEBUG_NEXT_LOGGED_MESSAGE_LENGTH\") ) { DEBUG_NEXT_LOGGED_MESSAGE_LENGTH=inValue.Cast< int >(); return inValue; }\n  248  \t}\n  249  \treturn super::__SetField(inName,inValue,inCallProp);\n  250  }\n  251  \n  252: void KHR_debug_obj::__GetFields(Array< ::String> &outFields)\n  253  {\n  254: \toutFields->push(HX_HCSTRING(\"DEBUG_OUTPUT_SYNCHRONOUS\",\"\\xb7\",\"\\x6c\",\"\\x34\",\"\\xb8\"));\n  255: \toutFields->push(HX_HCSTRING(\"DEBUG_NEXT_LOGGED_MESSAGE_LENGTH\",\"\\x5b\",\"\\xea\",\"\\xd6\",\"\\xb8\"));\n  256: \toutFields->push(HX_HCSTRING(\"DEBUG_CALLBACK_FUNCTION\",\"\\xc6\",\"\\xdf\",\"\\xcb\",\"\\xcf\"));\n  257: \toutFields->push(HX_HCSTRING(\"DEBUG_CALLBACK_USER_PARAM\",\"\\x67\",\"\\x50\",\"\\x4b\",\"\\xb2\"));\n  258: \toutFields->push(HX_HCSTRING(\"DEBUG_SOURCE_API\",\"\\xa2\",\"\\x9d\",\"\\xa7\",\"\\xfc\"));\n  259: \toutFields->push(HX_HCSTRING(\"DEBUG_SOURCE_WINDOW_SYSTEM\",\"\\xc6\",\"\\xf9\",\"\\xdc\",\"\\x4e\"));\n  260: \toutFields->push(HX_HCSTRING(\"DEBUG_SOURCE_SHADER_COMPILER\",\"\\x61\",\"\\xd0\",\"\\xc4\",\"\\x2b\"));\n  261: \toutFields->push(HX_HCSTRING(\"DEBUG_SOURCE_THIRD_PARTY\",\"\\xf6\",\"\\x6f\",\"\\x06\",\"\\x29\"));\n  262: \toutFields->push(HX_HCSTRING(\"DEBUG_SOURCE_APPLICATION\",\"\\x58\",\"\\x24\",\"\\xb6\",\"\\x0f\"));\n  263: \toutFields->push(HX_HCSTRING(\"DEBUG_SOURCE_OTHER\",\"\\xd8\",\"\\x3d\",\"\\x44\",\"\\x3e\"));\n  264: \toutFields->push(HX_HCSTRING(\"DEBUG_TYPE_ERROR\",\"\\xef\",\"\\x26\",\"\\x40\",\"\\xe9\"));\n  265: \toutFields->push(HX_HCSTRING(\"DEBUG_TYPE_DEPRECATED_BEHAVIOR\",\"\\xa5\",\"\\xcf\",\"\\x17\",\"\\x8c\"));\n  266: \toutFields->push(HX_HCSTRING(\"DEBUG_TYPE_UNDEFINED_BEHAVIOR\",\"\\xda\",\"\\x37\",\"\\x6a\",\"\\x74\"));\n  267: \toutFields->push(HX_HCSTRING(\"DEBUG_TYPE_PORTABILITY\",\"\\xb0\",\"\\x1e\",\"\\x6b\",\"\\x9d\"));\n  268: \toutFields->push(HX_HCSTRING(\"DEBUG_TYPE_PERFORMANCE\",\"\\x57\",\"\\x2c\",\"\\xfb\",\"\\xeb\"));\n  269: \toutFields->push(HX_HCSTRING(\"DEBUG_TYPE_OTHER\",\"\\xf7\",\"\\xc1\",\"\\x8c\",\"\\xac\"));\n  270: \toutFields->push(HX_HCSTRING(\"DEBUG_TYPE_MARKER\",\"\\x93\",\"\\xdc\",\"\\xe9\",\"\\x97\"));\n  271: \toutFields->push(HX_HCSTRING(\"DEBUG_TYPE_PUSH_GROUP\",\"\\x13\",\"\\x87\",\"\\x6b\",\"\\xca\"));\n  272: \toutFields->push(HX_HCSTRING(\"DEBUG_TYPE_POP_GROUP\",\"\\x58\",\"\\x29\",\"\\x6a\",\"\\xb8\"));\n  273: \toutFields->push(HX_HCSTRING(\"DEBUG_SEVERITY_NOTIFICATION\",\"\\xa1\",\"\\xb3\",\"\\xa6\",\"\\x11\"));\n  274: \toutFields->push(HX_HCSTRING(\"MAX_DEBUG_GROUP_STACK_DEPTH\",\"\\xa5\",\"\\x1e\",\"\\xfc\",\"\\xf4\"));\n  275: \toutFields->push(HX_HCSTRING(\"DEBUG_GROUP_STACK_DEPTH\",\"\\xa0\",\"\\xe0\",\"\\x2d\",\"\\x54\"));\n  276  \toutFields->push(HX_HCSTRING(\"BUFFER\",\"\\x00\",\"\\x69\",\"\\x17\",\"\\x83\"));\n  277  \toutFields->push(HX_HCSTRING(\"SHADER\",\"\\x25\",\"\\x6b\",\"\\xa3\",\"\\xcf\"));\n  ...\n  280  \toutFields->push(HX_HCSTRING(\"SAMPLER\",\"\\xe8\",\"\\x98\",\"\\x9d\",\"\\x03\"));\n  281  \toutFields->push(HX_HCSTRING(\"MAX_LABEL_LENGTH\",\"\\x0c\",\"\\x59\",\"\\xf0\",\"\\xf1\"));\n  282: \toutFields->push(HX_HCSTRING(\"MAX_DEBUG_MESSAGE_LENGTH\",\"\\x65\",\"\\x08\",\"\\x17\",\"\\x87\"));\n  283: \toutFields->push(HX_HCSTRING(\"MAX_DEBUG_LOGGED_MESSAGES\",\"\\xe2\",\"\\x62\",\"\\x56\",\"\\xd5\"));\n  284: \toutFields->push(HX_HCSTRING(\"DEBUG_LOGGED_MESSAGES\",\"\\x1d\",\"\\x20\",\"\\x32\",\"\\xf8\"));\n  285: \toutFields->push(HX_HCSTRING(\"DEBUG_SEVERITY_HIGH\",\"\\x18\",\"\\xbe\",\"\\x8d\",\"\\x35\"));\n  286: \toutFields->push(HX_HCSTRING(\"DEBUG_SEVERITY_MEDIUM\",\"\\xab\",\"\\x58\",\"\\x3f\",\"\\xb3\"));\n  287: \toutFields->push(HX_HCSTRING(\"DEBUG_SEVERITY_LOW\",\"\\x7e\",\"\\xfa\",\"\\x43\",\"\\xa3\"));\n  288: \toutFields->push(HX_HCSTRING(\"DEBUG_OUTPUT\",\"\\xcd\",\"\\x3e\",\"\\x9f\",\"\\xda\"));\n  289: \toutFields->push(HX_HCSTRING(\"CONTEXT_FLAG_DEBUG_BIT\",\"\\x7e\",\"\\x17\",\"\\xc3\",\"\\xb0\"));\n  290  \toutFields->push(HX_HCSTRING(\"STACK_OVERFLOW\",\"\\x79\",\"\\xa6\",\"\\x54\",\"\\xa5\"));\n  291  \toutFields->push(HX_HCSTRING(\"STACK_UNDERFLOW\",\"\\xcf\",\"\\x21\",\"\\x6e\",\"\\xb5\"));\n  ...\n  294  \n  295  #if HXCPP_SCRIPTABLE\n  296: static hx::StorageInfo KHR_debug_obj_sMemberStorageInfo[] = {\n  297: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_OUTPUT_SYNCHRONOUS),HX_HCSTRING(\"DEBUG_OUTPUT_SYNCHRONOUS\",\"\\xb7\",\"\\x6c\",\"\\x34\",\"\\xb8\")},\n  298: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_NEXT_LOGGED_MESSAGE_LENGTH),HX_HCSTRING(\"DEBUG_NEXT_LOGGED_MESSAGE_LENGTH\",\"\\x5b\",\"\\xea\",\"\\xd6\",\"\\xb8\")},\n  299: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_CALLBACK_FUNCTION),HX_HCSTRING(\"DEBUG_CALLBACK_FUNCTION\",\"\\xc6\",\"\\xdf\",\"\\xcb\",\"\\xcf\")},\n  300: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_CALLBACK_USER_PARAM),HX_HCSTRING(\"DEBUG_CALLBACK_USER_PARAM\",\"\\x67\",\"\\x50\",\"\\x4b\",\"\\xb2\")},\n  301: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_SOURCE_API),HX_HCSTRING(\"DEBUG_SOURCE_API\",\"\\xa2\",\"\\x9d\",\"\\xa7\",\"\\xfc\")},\n  302: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_SOURCE_WINDOW_SYSTEM),HX_HCSTRING(\"DEBUG_SOURCE_WINDOW_SYSTEM\",\"\\xc6\",\"\\xf9\",\"\\xdc\",\"\\x4e\")},\n  303: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_SOURCE_SHADER_COMPILER),HX_HCSTRING(\"DEBUG_SOURCE_SHADER_COMPILER\",\"\\x61\",\"\\xd0\",\"\\xc4\",\"\\x2b\")},\n  304: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_SOURCE_THIRD_PARTY),HX_HCSTRING(\"DEBUG_SOURCE_THIRD_PARTY\",\"\\xf6\",\"\\x6f\",\"\\x06\",\"\\x29\")},\n  305: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_SOURCE_APPLICATION),HX_HCSTRING(\"DEBUG_SOURCE_APPLICATION\",\"\\x58\",\"\\x24\",\"\\xb6\",\"\\x0f\")},\n  306: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_SOURCE_OTHER),HX_HCSTRING(\"DEBUG_SOURCE_OTHER\",\"\\xd8\",\"\\x3d\",\"\\x44\",\"\\x3e\")},\n  307: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_TYPE_ERROR),HX_HCSTRING(\"DEBUG_TYPE_ERROR\",\"\\xef\",\"\\x26\",\"\\x40\",\"\\xe9\")},\n  308: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_TYPE_DEPRECATED_BEHAVIOR),HX_HCSTRING(\"DEBUG_TYPE_DEPRECATED_BEHAVIOR\",\"\\xa5\",\"\\xcf\",\"\\x17\",\"\\x8c\")},\n  309: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_TYPE_UNDEFINED_BEHAVIOR),HX_HCSTRING(\"DEBUG_TYPE_UNDEFINED_BEHAVIOR\",\"\\xda\",\"\\x37\",\"\\x6a\",\"\\x74\")},\n  310: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_TYPE_PORTABILITY),HX_HCSTRING(\"DEBUG_TYPE_PORTABILITY\",\"\\xb0\",\"\\x1e\",\"\\x6b\",\"\\x9d\")},\n  311: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_TYPE_PERFORMANCE),HX_HCSTRING(\"DEBUG_TYPE_PERFORMANCE\",\"\\x57\",\"\\x2c\",\"\\xfb\",\"\\xeb\")},\n  312: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_TYPE_OTHER),HX_HCSTRING(\"DEBUG_TYPE_OTHER\",\"\\xf7\",\"\\xc1\",\"\\x8c\",\"\\xac\")},\n  313: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_TYPE_MARKER),HX_HCSTRING(\"DEBUG_TYPE_MARKER\",\"\\x93\",\"\\xdc\",\"\\xe9\",\"\\x97\")},\n  314: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_TYPE_PUSH_GROUP),HX_HCSTRING(\"DEBUG_TYPE_PUSH_GROUP\",\"\\x13\",\"\\x87\",\"\\x6b\",\"\\xca\")},\n  315: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_TYPE_POP_GROUP),HX_HCSTRING(\"DEBUG_TYPE_POP_GROUP\",\"\\x58\",\"\\x29\",\"\\x6a\",\"\\xb8\")},\n  316: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_SEVERITY_NOTIFICATION),HX_HCSTRING(\"DEBUG_SEVERITY_NOTIFICATION\",\"\\xa1\",\"\\xb3\",\"\\xa6\",\"\\x11\")},\n  317: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,MAX_DEBUG_GROUP_STACK_DEPTH),HX_HCSTRING(\"MAX_DEBUG_GROUP_STACK_DEPTH\",\"\\xa5\",\"\\x1e\",\"\\xfc\",\"\\xf4\")},\n  318: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_GROUP_STACK_DEPTH),HX_HCSTRING(\"DEBUG_GROUP_STACK_DEPTH\",\"\\xa0\",\"\\xe0\",\"\\x2d\",\"\\x54\")},\n  319: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,BUFFER),HX_HCSTRING(\"BUFFER\",\"\\x00\",\"\\x69\",\"\\x17\",\"\\x83\")},\n  320: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,SHADER),HX_HCSTRING(\"SHADER\",\"\\x25\",\"\\x6b\",\"\\xa3\",\"\\xcf\")},\n  321: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,PROGRAM),HX_HCSTRING(\"PROGRAM\",\"\\x64\",\"\\x1e\",\"\\xcd\",\"\\x73\")},\n  322: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,QUERY),HX_HCSTRING(\"QUERY\",\"\\xe8\",\"\\xc2\",\"\\xd8\",\"\\xdb\")},\n  323: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,SAMPLER),HX_HCSTRING(\"SAMPLER\",\"\\xe8\",\"\\x98\",\"\\x9d\",\"\\x03\")},\n  324: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,MAX_LABEL_LENGTH),HX_HCSTRING(\"MAX_LABEL_LENGTH\",\"\\x0c\",\"\\x59\",\"\\xf0\",\"\\xf1\")},\n  325: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,MAX_DEBUG_MESSAGE_LENGTH),HX_HCSTRING(\"MAX_DEBUG_MESSAGE_LENGTH\",\"\\x65\",\"\\x08\",\"\\x17\",\"\\x87\")},\n  326: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,MAX_DEBUG_LOGGED_MESSAGES),HX_HCSTRING(\"MAX_DEBUG_LOGGED_MESSAGES\",\"\\xe2\",\"\\x62\",\"\\x56\",\"\\xd5\")},\n  327: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_LOGGED_MESSAGES),HX_HCSTRING(\"DEBUG_LOGGED_MESSAGES\",\"\\x1d\",\"\\x20\",\"\\x32\",\"\\xf8\")},\n  328: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_SEVERITY_HIGH),HX_HCSTRING(\"DEBUG_SEVERITY_HIGH\",\"\\x18\",\"\\xbe\",\"\\x8d\",\"\\x35\")},\n  329: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_SEVERITY_MEDIUM),HX_HCSTRING(\"DEBUG_SEVERITY_MEDIUM\",\"\\xab\",\"\\x58\",\"\\x3f\",\"\\xb3\")},\n  330: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_SEVERITY_LOW),HX_HCSTRING(\"DEBUG_SEVERITY_LOW\",\"\\x7e\",\"\\xfa\",\"\\x43\",\"\\xa3\")},\n  331: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,DEBUG_OUTPUT),HX_HCSTRING(\"DEBUG_OUTPUT\",\"\\xcd\",\"\\x3e\",\"\\x9f\",\"\\xda\")},\n  332: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,CONTEXT_FLAG_DEBUG_BIT),HX_HCSTRING(\"CONTEXT_FLAG_DEBUG_BIT\",\"\\x7e\",\"\\x17\",\"\\xc3\",\"\\xb0\")},\n  333: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,STACK_OVERFLOW),HX_HCSTRING(\"STACK_OVERFLOW\",\"\\x79\",\"\\xa6\",\"\\x54\",\"\\xa5\")},\n  334: \t{hx::fsInt,(int)offsetof(KHR_debug_obj,STACK_UNDERFLOW),HX_HCSTRING(\"STACK_UNDERFLOW\",\"\\xcf\",\"\\x21\",\"\\x6e\",\"\\xb5\")},\n  335  \t{ hx::fsUnknown, 0, null()}\n  336  };\n  337: static hx::StaticInfo *KHR_debug_obj_sStaticStorageInfo = 0;\n  338  #endif\n  339  \n  340: static ::String KHR_debug_obj_sMemberFields[] = {\n  341: \tHX_HCSTRING(\"DEBUG_OUTPUT_SYNCHRONOUS\",\"\\xb7\",\"\\x6c\",\"\\x34\",\"\\xb8\"),\n  342: \tHX_HCSTRING(\"DEBUG_NEXT_LOGGED_MESSAGE_LENGTH\",\"\\x5b\",\"\\xea\",\"\\xd6\",\"\\xb8\"),\n  343: \tHX_HCSTRING(\"DEBUG_CALLBACK_FUNCTION\",\"\\xc6\",\"\\xdf\",\"\\xcb\",\"\\xcf\"),\n  344: \tHX_HCSTRING(\"DEBUG_CALLBACK_USER_PARAM\",\"\\x67\",\"\\x50\",\"\\x4b\",\"\\xb2\"),\n  345: \tHX_HCSTRING(\"DEBUG_SOURCE_API\",\"\\xa2\",\"\\x9d\",\"\\xa7\",\"\\xfc\"),\n  346: \tHX_HCSTRING(\"DEBUG_SOURCE_WINDOW_SYSTEM\",\"\\xc6\",\"\\xf9\",\"\\xdc\",\"\\x4e\"),\n  347: \tHX_HCSTRING(\"DEBUG_SOURCE_SHADER_COMPILER\",\"\\x61\",\"\\xd0\",\"\\xc4\",\"\\x2b\"),\n  348: \tHX_HCSTRING(\"DEBUG_SOURCE_THIRD_PARTY\",\"\\xf6\",\"\\x6f\",\"\\x06\",\"\\x29\"),\n  349: \tHX_HCSTRING(\"DEBUG_SOURCE_APPLICATION\",\"\\x58\",\"\\x24\",\"\\xb6\",\"\\x0f\"),\n  350: \tHX_HCSTRING(\"DEBUG_SOURCE_OTHER\",\"\\xd8\",\"\\x3d\",\"\\x44\",\"\\x3e\"),\n  351: \tHX_HCSTRING(\"DEBUG_TYPE_ERROR\",\"\\xef\",\"\\x26\",\"\\x40\",\"\\xe9\"),\n  352: \tHX_HCSTRING(\"DEBUG_TYPE_DEPRECATED_BEHAVIOR\",\"\\xa5\",\"\\xcf\",\"\\x17\",\"\\x8c\"),\n  353: \tHX_HCSTRING(\"DEBUG_TYPE_UNDEFINED_BEHAVIOR\",\"\\xda\",\"\\x37\",\"\\x6a\",\"\\x74\"),\n  354: \tHX_HCSTRING(\"DEBUG_TYPE_PORTABILITY\",\"\\xb0\",\"\\x1e\",\"\\x6b\",\"\\x9d\"),\n  355: \tHX_HCSTRING(\"DEBUG_TYPE_PERFORMANCE\",\"\\x57\",\"\\x2c\",\"\\xfb\",\"\\xeb\"),\n  356: \tHX_HCSTRING(\"DEBUG_TYPE_OTHER\",\"\\xf7\",\"\\xc1\",\"\\x8c\",\"\\xac\"),\n  357: \tHX_HCSTRING(\"DEBUG_TYPE_MARKER\",\"\\x93\",\"\\xdc\",\"\\xe9\",\"\\x97\"),\n  358: \tHX_HCSTRING(\"DEBUG_TYPE_PUSH_GROUP\",\"\\x13\",\"\\x87\",\"\\x6b\",\"\\xca\"),\n  359: \tHX_HCSTRING(\"DEBUG_TYPE_POP_GROUP\",\"\\x58\",\"\\x29\",\"\\x6a\",\"\\xb8\"),\n  360: \tHX_HCSTRING(\"DEBUG_SEVERITY_NOTIFICATION\",\"\\xa1\",\"\\xb3\",\"\\xa6\",\"\\x11\"),\n  361: \tHX_HCSTRING(\"MAX_DEBUG_GROUP_STACK_DEPTH\",\"\\xa5\",\"\\x1e\",\"\\xfc\",\"\\xf4\"),\n  362: \tHX_HCSTRING(\"DEBUG_GROUP_STACK_DEPTH\",\"\\xa0\",\"\\xe0\",\"\\x2d\",\"\\x54\"),\n  363  \tHX_HCSTRING(\"BUFFER\",\"\\x00\",\"\\x69\",\"\\x17\",\"\\x83\"),\n  364  \tHX_HCSTRING(\"SHADER\",\"\\x25\",\"\\x6b\",\"\\xa3\",\"\\xcf\"),\n  ...\n  367  \tHX_HCSTRING(\"SAMPLER\",\"\\xe8\",\"\\x98\",\"\\x9d\",\"\\x03\"),\n  368  \tHX_HCSTRING(\"MAX_LABEL_LENGTH\",\"\\x0c\",\"\\x59\",\"\\xf0\",\"\\xf1\"),\n  369: \tHX_HCSTRING(\"MAX_DEBUG_MESSAGE_LENGTH\",\"\\x65\",\"\\x08\",\"\\x17\",\"\\x87\"),\n  370: \tHX_HCSTRING(\"MAX_DEBUG_LOGGED_MESSAGES\",\"\\xe2\",\"\\x62\",\"\\x56\",\"\\xd5\"),\n  371: \tHX_HCSTRING(\"DEBUG_LOGGED_MESSAGES\",\"\\x1d\",\"\\x20\",\"\\x32\",\"\\xf8\"),\n  372: \tHX_HCSTRING(\"DEBUG_SEVERITY_HIGH\",\"\\x18\",\"\\xbe\",\"\\x8d\",\"\\x35\"),\n  373: \tHX_HCSTRING(\"DEBUG_SEVERITY_MEDIUM\",\"\\xab\",\"\\x58\",\"\\x3f\",\"\\xb3\"),\n  374: \tHX_HCSTRING(\"DEBUG_SEVERITY_LOW\",\"\\x7e\",\"\\xfa\",\"\\x43\",\"\\xa3\"),\n  375: \tHX_HCSTRING(\"DEBUG_OUTPUT\",\"\\xcd\",\"\\x3e\",\"\\x9f\",\"\\xda\"),\n  376: \tHX_HCSTRING(\"CONTEXT_FLAG_DEBUG_BIT\",\"\\x7e\",\"\\x17\",\"\\xc3\",\"\\xb0\"),\n  377  \tHX_HCSTRING(\"STACK_OVERFLOW\",\"\\x79\",\"\\xa6\",\"\\x54\",\"\\xa5\"),\n  378  \tHX_HCSTRING(\"STACK_UNDERFLOW\",\"\\xcf\",\"\\x21\",\"\\x6e\",\"\\xb5\"),\n  379  \t::String(null()) };\n  380  \n  381: static void KHR_debug_obj_sMarkStatics(HX_MARK_PARAMS) {\n  382: \tHX_MARK_MEMBER_NAME(KHR_debug_obj::__mClass,\"__mClass\");\n  383  };\n  384  \n  385  #ifdef HXCPP_VISIT_ALLOCS\n  386: static void KHR_debug_obj_sVisitStatics(HX_VISIT_PARAMS) {\n  387: \tHX_VISIT_MEMBER_NAME(KHR_debug_obj::__mClass,\"__mClass\");\n  388  };\n  389  \n  390  #endif\n  391  \n  392: hx::Class KHR_debug_obj::__mClass;\n  393  \n  394: void KHR_debug_obj::__register()\n  395  {\n  396: \thx::Object *dummy = new KHR_debug_obj;\n  397: \tKHR_debug_obj::_hx_vtable = *(void **)dummy;\n  398  \thx::Static(__mClass) = new hx::Class_obj();\n  399: \t__mClass->mName = HX_HCSTRING(\"lime.graphics.opengl.ext.KHR_debug\",\"\\x87\",\"\\x84\",\"\\xb9\",\"\\x11\");\n  400  \t__mClass->mSuper = &super::__SGetClass();\n  401  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  ...\n  403  \t__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;\n  404  \t__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;\n  405: \t__mClass->mMarkFunc = KHR_debug_obj_sMarkStatics;\n  406  \t__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);\n  407: \t__mClass->mMembers = hx::Class_obj::dupFunctions(KHR_debug_obj_sMemberFields);\n  408: \t__mClass->mCanCast = hx::TCanCast< KHR_debug_obj >;\n  409  #ifdef HXCPP_VISIT_ALLOCS\n  410: \t__mClass->mVisitFunc = KHR_debug_obj_sVisitStatics;\n  411  #endif\n  412  #ifdef HXCPP_SCRIPTABLE\n  413: \t__mClass->mMemberStorageInfo = KHR_debug_obj_sMemberStorageInfo;\n  414  #endif\n  415  #ifdef HXCPP_SCRIPTABLE\n  416: \t__mClass->mStaticStorageInfo = KHR_debug_obj_sStaticStorageInfo;\n  417  #endif\n  418  \thx::_hx_RegisterClass(__mClass->mName, __mClass);\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/lime/system/CFFI.cpp:\n  190  void CFFI_obj::_hx___loaderTrace(::String message){\n  191              \tHX_STACKFRAME(&_hx_pos_9b11a74d7222574a_265___loaderTrace)\n  192: HXLINE( 272)\t\tbool debug = hx::IsNotNull( ::Sys_obj::getEnv(HX_(\"OPENFL_LOAD_DEBUG\",a9,1b,ff,9b)) );\n  193: HXLINE( 275)\t\tif (debug) {\n  194  HXLINE( 277)\t\t\t::Sys_obj::println(message);\n  195              \t\t}\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/lime/utils/Log.cpp:\n   10  \n   11  HX_LOCAL_STACK_FRAME(_hx_pos_9de1e3bb9bd9260d_130___init__,\"::lime::utils::Log_obj\",\"__init__\",0xc6d9689e,\"::lime::utils::Log_obj.__init__\",\"lime/utils/Log.hx\",130,0x300eb2b2)\n   12: HX_LOCAL_STACK_FRAME(_hx_pos_66fab05f10e06d2c_21_debug,\"lime.utils.Log\",\"debug\",0x08fb4af3,\"lime.utils.Log.debug\",\"lime/utils/Log.hx\",21,0x300eb2b2)\n   13  HX_LOCAL_STACK_FRAME(_hx_pos_66fab05f10e06d2c_36_error,\"lime.utils.Log\",\"error\",0xa505c468,\"lime.utils.Log.error\",\"lime/utils/Log.hx\",36,0x300eb2b2)\n   14  HX_LOCAL_STACK_FRAME(_hx_pos_66fab05f10e06d2c_61_info,\"lime.utils.Log\",\"info\",0xefdb33ce,\"lime.utils.Log.info\",\"lime/utils/Log.hx\",61,0x300eb2b2)\n   ..\n   62  bool Log_obj::throwErrors;\n   63  \n   64: void Log_obj::debug(::String message, ::Dynamic info){\n   65:             \tHX_STACKFRAME(&_hx_pos_66fab05f10e06d2c_21_debug)\n   66  HXDLIN(  21)\t\tif ((::lime::utils::Log_obj::level >= (int)4)) {\n   67  HXLINE(  26)\t\t\t::Sys_obj::println((((HX_(\"[\",5b,00,00,00) + ( (::String)(info->__Field(HX_(\"className\",a3,92,3d,dc),hx::paccDynamic)) )) + HX_(\"] \",23,51,00,00)) + message));\n   ..\n   70  \n   71  \n   72: STATIC_HX_DEFINE_DYNAMIC_FUNC2(Log_obj,debug,(void))\n   73  \n   74  void Log_obj::error(::String message, ::Dynamic info){\n   ..\n  148  \tcase 5:\n  149  \t\tif (HX_FIELD_EQ(inName,\"level\") ) { outValue = ( level ); return true; }\n  150: \t\tif (HX_FIELD_EQ(inName,\"debug\") ) { outValue = debug_dyn(); return true; }\n  151  \t\tif (HX_FIELD_EQ(inName,\"error\") ) { outValue = error_dyn(); return true; }\n  152  \t\tif (HX_FIELD_EQ(inName,\"print\") ) { outValue = print_dyn(); return true; }\n  ...\n  203  \tHX_HCSTRING(\"level\",\"\\x84\",\"\\x15\",\"\\x63\",\"\\x72\"),\n  204  \tHX_HCSTRING(\"throwErrors\",\"\\x71\",\"\\xb5\",\"\\xe0\",\"\\x19\"),\n  205: \tHX_HCSTRING(\"debug\",\"\\x53\",\"\\x52\",\"\\x1f\",\"\\xd7\"),\n  206  \tHX_HCSTRING(\"error\",\"\\xc8\",\"\\xcb\",\"\\x29\",\"\\x73\"),\n  207  \tHX_HCSTRING(\"info\",\"\\x6e\",\"\\x38\",\"\\xbb\",\"\\x45\"),\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/lime/utils/_Log/LogLevel_Impl_.cpp:\n   45  int LogLevel_Impl__obj::INFO;\n   46  \n   47: int LogLevel_Impl__obj::DEBUG;\n   48  \n   49  int LogLevel_Impl__obj::VERBOSE;\n   ..\n  107  \t{hx::fsInt,(void *) &LogLevel_Impl__obj::WARN,HX_HCSTRING(\"WARN\",\"\\x46\",\"\\x2a\",\"\\xb3\",\"\\x39\")},\n  108  \t{hx::fsInt,(void *) &LogLevel_Impl__obj::INFO,HX_HCSTRING(\"INFO\",\"\\x6e\",\"\\x00\",\"\\x7c\",\"\\x30\")},\n  109: \t{hx::fsInt,(void *) &LogLevel_Impl__obj::DEBUG,HX_HCSTRING(\"DEBUG\",\"\\x33\",\"\\x8a\",\"\\x0d\",\"\\x55\")},\n  110  \t{hx::fsInt,(void *) &LogLevel_Impl__obj::VERBOSE,HX_HCSTRING(\"VERBOSE\",\"\\x62\",\"\\xab\",\"\\x8d\",\"\\xf1\")},\n  111  \t{ hx::fsUnknown, 0, null()}\n  ...\n  119  \tHX_MARK_MEMBER_NAME(LogLevel_Impl__obj::WARN,\"WARN\");\n  120  \tHX_MARK_MEMBER_NAME(LogLevel_Impl__obj::INFO,\"INFO\");\n  121: \tHX_MARK_MEMBER_NAME(LogLevel_Impl__obj::DEBUG,\"DEBUG\");\n  122  \tHX_MARK_MEMBER_NAME(LogLevel_Impl__obj::VERBOSE,\"VERBOSE\");\n  123  };\n  ...\n  130  \tHX_VISIT_MEMBER_NAME(LogLevel_Impl__obj::WARN,\"WARN\");\n  131  \tHX_VISIT_MEMBER_NAME(LogLevel_Impl__obj::INFO,\"INFO\");\n  132: \tHX_VISIT_MEMBER_NAME(LogLevel_Impl__obj::DEBUG,\"DEBUG\");\n  133  \tHX_VISIT_MEMBER_NAME(LogLevel_Impl__obj::VERBOSE,\"VERBOSE\");\n  134  };\n  ...\n  143  \tHX_HCSTRING(\"WARN\",\"\\x46\",\"\\x2a\",\"\\xb3\",\"\\x39\"),\n  144  \tHX_HCSTRING(\"INFO\",\"\\x6e\",\"\\x00\",\"\\x7c\",\"\\x30\"),\n  145: \tHX_HCSTRING(\"DEBUG\",\"\\x33\",\"\\x8a\",\"\\x0d\",\"\\x55\"),\n  146  \tHX_HCSTRING(\"VERBOSE\",\"\\x62\",\"\\xab\",\"\\x8d\",\"\\xf1\"),\n  147  \tHX_HCSTRING(\"gt\",\"\\x2d\",\"\\x5a\",\"\\x00\",\"\\x00\"),\n  ...\n  199  {\n  200              \tHX_STACKFRAME(&_hx_pos_7301aa71ca1f1265_177_boot)\n  201: HXDLIN( 177)\t\tDEBUG = (int)4;\n  202              \t}\n  203  {\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/mphx/utils/Log.cpp:\n   37  }\n   38  \n   39: int Log_obj::debugLevel;\n   40  \n   41  bool Log_obj::usePrintLn;\n   ..\n   68              \t\t}\n   69  HXLINE(  33)\t\tif (::mphx::utils::Log_obj::usePrintLn) {\n   70: HXLINE(  36)\t\t\tif ((((int)::mphx::utils::Log_obj::debugLevel & (int)level) != (int)0)) {\n   71  HXLINE(  37)\t\t\t\t::Sys_obj::println(((l + location) + message));\n   72              \t\t\t}\n   73              \t\t}\n   74              \t\telse {\n   75: HXLINE(  44)\t\t\tif ((((int)::mphx::utils::Log_obj::debugLevel & (int)level) != (int)0)) {\n   76  HXLINE(  45)\t\t\t\t ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;\n   77  HXDLIN(  45)\t\t\t\t_hx_tmp(((l + location) + message),hx::SourceInfo(HX_(\"Log.hx\",da,0c,d2,90),45,HX_(\"mphx.utils.Log\",ac,b4,2b,f9),HX_(\"message\",c7,35,11,9a)));\n   ..\n   95  \t\tbreak;\n   96  \tcase 10:\n   97: \t\tif (HX_FIELD_EQ(inName,\"debugLevel\") ) { outValue = ( debugLevel ); return true; }\n   98  \t\tif (HX_FIELD_EQ(inName,\"usePrintLn\") ) { outValue = ( usePrintLn ); return true; }\n   99  \t\tif (HX_FIELD_EQ(inName,\"printLevel\") ) { outValue = ( printLevel ); return true; }\n  ...\n  109  \tswitch(inName.length) {\n  110  \tcase 10:\n  111: \t\tif (HX_FIELD_EQ(inName,\"debugLevel\") ) { debugLevel=ioValue.Cast< int >(); return true; }\n  112  \t\tif (HX_FIELD_EQ(inName,\"usePrintLn\") ) { usePrintLn=ioValue.Cast< bool >(); return true; }\n  113  \t\tif (HX_FIELD_EQ(inName,\"printLevel\") ) { printLevel=ioValue.Cast< bool >(); return true; }\n  ...\n  122  static hx::StorageInfo *Log_obj_sMemberStorageInfo = 0;\n  123  static hx::StaticInfo Log_obj_sStaticStorageInfo[] = {\n  124: \t{hx::fsInt,(void *) &Log_obj::debugLevel,HX_HCSTRING(\"debugLevel\",\"\\x31\",\"\\xe6\",\"\\x46\",\"\\x71\")},\n  125  \t{hx::fsBool,(void *) &Log_obj::usePrintLn,HX_HCSTRING(\"usePrintLn\",\"\\x88\",\"\\xe2\",\"\\xe6\",\"\\x86\")},\n  126  \t{hx::fsBool,(void *) &Log_obj::printLevel,HX_HCSTRING(\"printLevel\",\"\\x17\",\"\\x6a\",\"\\xf5\",\"\\xca\")},\n  ...\n  132  static void Log_obj_sMarkStatics(HX_MARK_PARAMS) {\n  133  \tHX_MARK_MEMBER_NAME(Log_obj::__mClass,\"__mClass\");\n  134: \tHX_MARK_MEMBER_NAME(Log_obj::debugLevel,\"debugLevel\");\n  135  \tHX_MARK_MEMBER_NAME(Log_obj::usePrintLn,\"usePrintLn\");\n  136  \tHX_MARK_MEMBER_NAME(Log_obj::printLevel,\"printLevel\");\n  ...\n  141  static void Log_obj_sVisitStatics(HX_VISIT_PARAMS) {\n  142  \tHX_VISIT_MEMBER_NAME(Log_obj::__mClass,\"__mClass\");\n  143: \tHX_VISIT_MEMBER_NAME(Log_obj::debugLevel,\"debugLevel\");\n  144  \tHX_VISIT_MEMBER_NAME(Log_obj::usePrintLn,\"usePrintLn\");\n  145  \tHX_VISIT_MEMBER_NAME(Log_obj::printLevel,\"printLevel\");\n  ...\n  152  \n  153  static ::String Log_obj_sStaticFields[] = {\n  154: \tHX_HCSTRING(\"debugLevel\",\"\\x31\",\"\\xe6\",\"\\x46\",\"\\x71\"),\n  155  \tHX_HCSTRING(\"usePrintLn\",\"\\x88\",\"\\xe2\",\"\\xe6\",\"\\x86\"),\n  156  \tHX_HCSTRING(\"printLevel\",\"\\x17\",\"\\x6a\",\"\\xf5\",\"\\xca\"),\n  ...\n  191  {\n  192              \tHX_STACKFRAME(&_hx_pos_45be084beb6fab8e_15_boot)\n  193: HXDLIN(  15)\t\tdebugLevel = ((int)((int)(int)2 | (int)(int)1) | (int)(int)4);\n  194              \t}\n  195  {\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/mphx/utils/_Log/DebugLevel_Impl_.cpp:\n    2  #include <hxcpp.h>\n    3  \n    4: #ifndef INCLUDED_mphx_utils__Log_DebugLevel_Impl_\n    5: #include <mphx/utils/_Log/DebugLevel_Impl_.h>\n    6  #endif\n    7  \n    8: HX_LOCAL_STACK_FRAME(_hx_pos_34aad2be6c69006a_11_value,\"mphx.utils._Log.DebugLevel_Impl_\",\"value\",0x861dbb25,\"mphx.utils._Log.DebugLevel_Impl_.value\",\"mphx/utils/Log.hx\",11,0xaf46b5d4)\n    9: HX_LOCAL_STACK_FRAME(_hx_pos_34aad2be6c69006a_5_boot,\"mphx.utils._Log.DebugLevel_Impl_\",\"boot\",0x08163afe,\"mphx.utils._Log.DebugLevel_Impl_.boot\",\"mphx/utils/Log.hx\",5,0xaf46b5d4)\n   10: HX_LOCAL_STACK_FRAME(_hx_pos_34aad2be6c69006a_6_boot,\"mphx.utils._Log.DebugLevel_Impl_\",\"boot\",0x08163afe,\"mphx.utils._Log.DebugLevel_Impl_.boot\",\"mphx/utils/Log.hx\",6,0xaf46b5d4)\n   11: HX_LOCAL_STACK_FRAME(_hx_pos_34aad2be6c69006a_7_boot,\"mphx.utils._Log.DebugLevel_Impl_\",\"boot\",0x08163afe,\"mphx.utils._Log.DebugLevel_Impl_.boot\",\"mphx/utils/Log.hx\",7,0xaf46b5d4)\n   12: HX_LOCAL_STACK_FRAME(_hx_pos_34aad2be6c69006a_8_boot,\"mphx.utils._Log.DebugLevel_Impl_\",\"boot\",0x08163afe,\"mphx.utils._Log.DebugLevel_Impl_.boot\",\"mphx/utils/Log.hx\",8,0xaf46b5d4)\n   13: HX_LOCAL_STACK_FRAME(_hx_pos_34aad2be6c69006a_9_boot,\"mphx.utils._Log.DebugLevel_Impl_\",\"boot\",0x08163afe,\"mphx.utils._Log.DebugLevel_Impl_.boot\",\"mphx/utils/Log.hx\",9,0xaf46b5d4)\n   14  namespace mphx{\n   15  namespace utils{\n   16  namespace _Log{\n   17  \n   18: void DebugLevel_Impl__obj::__construct() { }\n   19  \n   20: Dynamic DebugLevel_Impl__obj::__CreateEmpty() { return new DebugLevel_Impl__obj; }\n   21  \n   22: void *DebugLevel_Impl__obj::_hx_vtable = 0;\n   23  \n   24: Dynamic DebugLevel_Impl__obj::__Create(hx::DynamicArray inArgs)\n   25  {\n   26: \thx::ObjectPtr< DebugLevel_Impl__obj > _hx_result = new DebugLevel_Impl__obj();\n   27  \t_hx_result->__construct();\n   28  \treturn _hx_result;\n   29  }\n   30  \n   31: bool DebugLevel_Impl__obj::_hx_isInstanceOf(int inClassId) {\n   32  \treturn inClassId==(int)0x00000001 || inClassId==(int)0x272e3090;\n   33  }\n   34  \n   35: int DebugLevel_Impl__obj::None;\n   36  \n   37: int DebugLevel_Impl__obj::Warnings;\n   38  \n   39: int DebugLevel_Impl__obj::Errors;\n   40  \n   41: int DebugLevel_Impl__obj::Info;\n   42  \n   43: int DebugLevel_Impl__obj::Networking;\n   44  \n   45: int DebugLevel_Impl__obj::value(int index){\n   46              \tHX_STACKFRAME(&_hx_pos_34aad2be6c69006a_11_value)\n   47  HXDLIN(  11)\t\treturn ((int)(int)1 << (int)index);\n   ..\n   49  \n   50  \n   51: STATIC_HX_DEFINE_DYNAMIC_FUNC1(DebugLevel_Impl__obj,value,return )\n   52  \n   53  \n   54: DebugLevel_Impl__obj::DebugLevel_Impl__obj()\n   55  {\n   56  }\n   57  \n   58: bool DebugLevel_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)\n   59  {\n   60  \tswitch(inName.length) {\n   ..\n   66  \n   67  #if HXCPP_SCRIPTABLE\n   68: static hx::StorageInfo *DebugLevel_Impl__obj_sMemberStorageInfo = 0;\n   69: static hx::StaticInfo DebugLevel_Impl__obj_sStaticStorageInfo[] = {\n   70: \t{hx::fsInt,(void *) &DebugLevel_Impl__obj::None,HX_HCSTRING(\"None\",\"\\xd8\",\"\\x3e\",\"\\xe3\",\"\\x33\")},\n   71: \t{hx::fsInt,(void *) &DebugLevel_Impl__obj::Warnings,HX_HCSTRING(\"Warnings\",\"\\xb7\",\"\\xf2\",\"\\x44\",\"\\x62\")},\n   72: \t{hx::fsInt,(void *) &DebugLevel_Impl__obj::Errors,HX_HCSTRING(\"Errors\",\"\\xcb\",\"\\xf7\",\"\\xfc\",\"\\x85\")},\n   73: \t{hx::fsInt,(void *) &DebugLevel_Impl__obj::Info,HX_HCSTRING(\"Info\",\"\\x8e\",\"\\x64\",\"\\x94\",\"\\x30\")},\n   74: \t{hx::fsInt,(void *) &DebugLevel_Impl__obj::Networking,HX_HCSTRING(\"Networking\",\"\\x14\",\"\\xed\",\"\\x99\",\"\\x5b\")},\n   75  \t{ hx::fsUnknown, 0, null()}\n   76  };\n   77  #endif\n   78  \n   79: static void DebugLevel_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {\n   80: \tHX_MARK_MEMBER_NAME(DebugLevel_Impl__obj::__mClass,\"__mClass\");\n   81: \tHX_MARK_MEMBER_NAME(DebugLevel_Impl__obj::None,\"None\");\n   82: \tHX_MARK_MEMBER_NAME(DebugLevel_Impl__obj::Warnings,\"Warnings\");\n   83: \tHX_MARK_MEMBER_NAME(DebugLevel_Impl__obj::Errors,\"Errors\");\n   84: \tHX_MARK_MEMBER_NAME(DebugLevel_Impl__obj::Info,\"Info\");\n   85: \tHX_MARK_MEMBER_NAME(DebugLevel_Impl__obj::Networking,\"Networking\");\n   86  };\n   87  \n   88  #ifdef HXCPP_VISIT_ALLOCS\n   89: static void DebugLevel_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {\n   90: \tHX_VISIT_MEMBER_NAME(DebugLevel_Impl__obj::__mClass,\"__mClass\");\n   91: \tHX_VISIT_MEMBER_NAME(DebugLevel_Impl__obj::None,\"None\");\n   92: \tHX_VISIT_MEMBER_NAME(DebugLevel_Impl__obj::Warnings,\"Warnings\");\n   93: \tHX_VISIT_MEMBER_NAME(DebugLevel_Impl__obj::Errors,\"Errors\");\n   94: \tHX_VISIT_MEMBER_NAME(DebugLevel_Impl__obj::Info,\"Info\");\n   95: \tHX_VISIT_MEMBER_NAME(DebugLevel_Impl__obj::Networking,\"Networking\");\n   96  };\n   97  \n   98  #endif\n   99  \n  100: hx::Class DebugLevel_Impl__obj::__mClass;\n  101  \n  102: static ::String DebugLevel_Impl__obj_sStaticFields[] = {\n  103  \tHX_HCSTRING(\"None\",\"\\xd8\",\"\\x3e\",\"\\xe3\",\"\\x33\"),\n  104  \tHX_HCSTRING(\"Warnings\",\"\\xb7\",\"\\xf2\",\"\\x44\",\"\\x62\"),\n  ...\n  110  };\n  111  \n  112: void DebugLevel_Impl__obj::__register()\n  113  {\n  114: \thx::Object *dummy = new DebugLevel_Impl__obj;\n  115: \tDebugLevel_Impl__obj::_hx_vtable = *(void **)dummy;\n  116  \thx::Static(__mClass) = new hx::Class_obj();\n  117: \t__mClass->mName = HX_HCSTRING(\"mphx.utils._Log.DebugLevel_Impl_\",\"\\x22\",\"\\x1d\",\"\\xed\",\"\\x4b\");\n  118  \t__mClass->mSuper = &super::__SGetClass();\n  119  \t__mClass->mConstructEmpty = &__CreateEmpty;\n  120  \t__mClass->mConstructArgs = &__Create;\n  121: \t__mClass->mGetStaticField = &DebugLevel_Impl__obj::__GetStatic;\n  122  \t__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;\n  123: \t__mClass->mMarkFunc = DebugLevel_Impl__obj_sMarkStatics;\n  124: \t__mClass->mStatics = hx::Class_obj::dupFunctions(DebugLevel_Impl__obj_sStaticFields);\n  125  \t__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);\n  126: \t__mClass->mCanCast = hx::TCanCast< DebugLevel_Impl__obj >;\n  127  #ifdef HXCPP_VISIT_ALLOCS\n  128: \t__mClass->mVisitFunc = DebugLevel_Impl__obj_sVisitStatics;\n  129  #endif\n  130  #ifdef HXCPP_SCRIPTABLE\n  131: \t__mClass->mMemberStorageInfo = DebugLevel_Impl__obj_sMemberStorageInfo;\n  132  #endif\n  133  #ifdef HXCPP_SCRIPTABLE\n  134: \t__mClass->mStaticStorageInfo = DebugLevel_Impl__obj_sStaticStorageInfo;\n  135  #endif\n  136  \thx::_hx_RegisterClass(__mClass->mName, __mClass);\n  137  }\n  138  \n  139: void DebugLevel_Impl__obj::__boot()\n  140  {\n  141  {\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/openfl/_internal/stage3D/GLUtils.cpp:\n   44  }\n   45  \n   46: bool GLUtils_obj::debug;\n   47  \n   48  void GLUtils_obj::CheckGLError(){\n   49              \tHX_GC_STACKFRAME(&_hx_pos_dd57334273da7235_20_CheckGLError)\n   50: HXLINE(  21)\t\tif (!(::openfl::_internal::stage3D::GLUtils_obj::debug)) {\n   51  HXLINE(  21)\t\t\treturn;\n   52              \t\t}\n   ..\n   99  \tswitch(inName.length) {\n  100  \tcase 5:\n  101: \t\tif (HX_FIELD_EQ(inName,\"debug\") ) { outValue = ( debug ); return true; }\n  102  \t\tbreak;\n  103  \tcase 12:\n  ...\n  111  \tswitch(inName.length) {\n  112  \tcase 5:\n  113: \t\tif (HX_FIELD_EQ(inName,\"debug\") ) { debug=ioValue.Cast< bool >(); return true; }\n  114  \t}\n  115  \treturn false;\n  ...\n  119  static hx::StorageInfo *GLUtils_obj_sMemberStorageInfo = 0;\n  120  static hx::StaticInfo GLUtils_obj_sStaticStorageInfo[] = {\n  121: \t{hx::fsBool,(void *) &GLUtils_obj::debug,HX_HCSTRING(\"debug\",\"\\x53\",\"\\x52\",\"\\x1f\",\"\\xd7\")},\n  122  \t{ hx::fsUnknown, 0, null()}\n  123  };\n  ...\n  126  static void GLUtils_obj_sMarkStatics(HX_MARK_PARAMS) {\n  127  \tHX_MARK_MEMBER_NAME(GLUtils_obj::__mClass,\"__mClass\");\n  128: \tHX_MARK_MEMBER_NAME(GLUtils_obj::debug,\"debug\");\n  129  };\n  130  \n  ...\n  132  static void GLUtils_obj_sVisitStatics(HX_VISIT_PARAMS) {\n  133  \tHX_VISIT_MEMBER_NAME(GLUtils_obj::__mClass,\"__mClass\");\n  134: \tHX_VISIT_MEMBER_NAME(GLUtils_obj::debug,\"debug\");\n  135  };\n  136  \n  ...\n  140  \n  141  static ::String GLUtils_obj_sStaticFields[] = {\n  142: \tHX_HCSTRING(\"debug\",\"\\x53\",\"\\x52\",\"\\x1f\",\"\\xd7\"),\n  143  \tHX_HCSTRING(\"CheckGLError\",\"\\xbb\",\"\\x73\",\"\\x32\",\"\\xda\"),\n  144  \t::String(null())\n  ...\n  176  {\n  177              \tHX_STACKFRAME(&_hx_pos_dd57334273da7235_15_boot)\n  178: HXDLIN(  15)\t\tdebug = false;\n  179              \t}\n  180  }\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/openfl/_internal/stage3D/opengl/GLContext3D.cpp:\n  597  void GLContext3D_obj::setEnableErrorChecking(bool value){\n  598              \tHX_STACKFRAME(&_hx_pos_829f03b13519819f_470_setEnableErrorChecking)\n  599: HXDLIN( 470)\t\t::openfl::_internal::stage3D::GLUtils_obj::debug = value;\n  600              \t}\n  601  \n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/openfl/_internal/stage3D/opengl/GLStage3D.cpp:\n   70              \t\t\t}\n   71              \t\t}\n   72: HXLINE(  43)\t\tif (::openfl::_internal::stage3D::GLUtils_obj::debug) {\n   73  HXLINE(  45)\t\t\trenderer->gl->getError();\n   74              \t\t}\n\n/home/e1sif/Haxe/Leaderships/export/linux/obj/src/openfl/display/Stage3D.cpp:\n  261              \t\t\t\t\t}\n  262              \t\t\t\t}\n  263: HXDLIN( 277)\t\t\t\tif (::openfl::_internal::stage3D::GLUtils_obj::debug) {\n  264  HXLINE( 277)\t\t\t\t\trenderer->gl->getError();\n  265              \t\t\t\t}\n\n/home/e1sif/Haxe/Leaderships/server/Main.hx.n:\n    <binary>\n\n/home/e1sif/Haxe/Leaderships/source/PlayState.hx:\n   81  \t\tsuper.create();\n   82  \n   83:     FlxG.debugger.drawDebug = true;\n   84  \n   85      FlxG.worldBounds.set(-16, -16, FlxG.width + 16, FlxG.height + 16);\n\n/home/e1sif/haxelib/flixel/4,4,2/CHANGELOG.md:\n   26  #### Bugfixes:\n   27  \n   28: - `FlxDebugger` console: fixed enum completion on non-Flash targets ([404c16b3](https://github.com/HaxeFlixel/flixel/commit/404c16b3))\n   29  - `FlxMouseEventManager`:\n   30  \t- fixed mouseOver being fired before mouseOut ([#2103](https://github.com/HaxeFlixel/flixel/issues/2103))\n   31  \t- fixed items with `mouseChildren = false` still allowing events for overlapping objects ([#2110](https://github.com/HaxeFlixel/flixel/issues/2110))\n   32  - `FlxAssetPaths`: fixed `filterExtensions` for files with multiple dots ([#2107](https://github.com/HaxeFlixel/flixel/issues/2107))\n   33: - `FlxDebugger` interaction tool: fixed custom cursors not showing on native targets ([ca52e7a2](https://github.com/HaxeFlixel/flixel/commit/ca52e7a2))\n   34: - `FlxDebugger` console: fixed tab not focusing the text field on native targets\n   35  - `FlxMath`: fixed `roundDecimals()` for large inputs ([#2127](https://github.com/HaxeFlixel/flixel/issues/2127))\n   36  - `FlxG.sound`: fixed sounds not being removed from the default groups on state switches ([#2124](https://github.com/HaxeFlixel/flixel/issues/2124))\n   ..\n   54  \t- added `clipRect` support ([#2051](https://github.com/HaxeFlixel/flixel/issues/2051))\n   55  - `FlxSoundGroup`: added `pause()` and `resume()` ([#2043](https://github.com/HaxeFlixel/flixel/issues/2043))\n   56: - `FlxDebugger` interaction tool:\n   57  \t- added tooltips ([#2006](https://github.com/HaxeFlixel/flixel/issues/2006))\n   58  \t- added a selection rectangle ([#1995](https://github.com/HaxeFlixel/flixel/issues/1995))\n   59: - `FlxDebugger` console: added an \"Entry Type\" quick watch entry ([d354352](https://github.com/HaxeFlixel/flixel/commit/d354352))\n   60  - `FlxStringUtil`: added `getHost()` ([#1996](https://github.com/HaxeFlixel/flixel/issues/1996))\n   61  - `FlxPoint`: added `toVector()` ([#2061](https://github.com/HaxeFlixel/flixel/issues/2061))\n   ..\n   78  - `FlxAnimationController`: fixed `flipX` / `Y` not being copied in `copyFrom()` ([#2027](https://github.com/HaxeFlixel/flixel/issues/2027))\n   79  - `haxelib run flixel`: fixed the working directory not being passed on ([61f2c20](https://github.com/HaxeFlixel/flixel/commit/61f2c20))\n   80: - `FlxDebugger` interaction tool:\n   81  \t- fixed selection of `FlxSpriteGroup` members ([89a4ee2](https://github.com/HaxeFlixel/flixel/commit/89a4ee2))\n   82  \t- fixed selection of objects in substates ([69042ab](https://github.com/HaxeFlixel/flixel/commit/69042ab))\n   83: \t- fixed selections being canceled on interaction with debugger UI ([897f21f](https://github.com/HaxeFlixel/flixel/commit/897f21f))\n   84  - `FlxG.html5`: fixed `platform` detecting iPhone and iPod as \"Mac\" ([#2052](https://github.com/HaxeFlixel/flixel/issues/2052))\n   85  - `FlxTilemap`: fixed a missing bounds check in `getTileIndexByCoords()` ([#2024](https://github.com/HaxeFlixel/flixel/issues/2024))\n   ..\n   96  - `FlxAtlasFrames`: allowed passing a parsed `Description` in `fromTexturePackerJson()` ([#2021](https://github.com/HaxeFlixel/flixel/issues/2021))\n   97  - `FlxG.watch`: optimized expression watch entries ([#2004](https://github.com/HaxeFlixel/flixel/issues/2004))\n   98: - `FlxDebugger` console:\n   99  \t- allowed `null` objects in `registerObject()` to unregister ([f52c73e](https://github.com/HaxeFlixel/flixel/commit/f52c73e))\n  100  \t- registered a reference to the current `selection` of the interaction tool ([1bb7b48](https://github.com/HaxeFlixel/flixel/commit/1bb7b48))\n  ...\n  124  \t* added a `this` return to some methods ([#1875](https://github.com/HaxeFlixel/flixel/issues/1875))\n  125  * `FlxG.cameras`: added `cameraAdded`, `cameraRemoved` and `cameraResized` signals ([edf93b5](https://github.com/HaxeFlixel/flixel/commit/edf93b5))\n  126: * `FlxDebugger`: added a tools panel to interact with objects ([#1862](https://github.com/HaxeFlixel/flixel/issues/1862))\n  127  * `ConsoleCommands`: added a `step()` command ([#1910](https://github.com/HaxeFlixel/flixel/issues/1910))\n  128  * `FlxG.console`: added `stepAfterCommand` ([#1910](https://github.com/HaxeFlixel/flixel/issues/1910))\n  ...\n  137  \t* added support for cycling through enum values with up / down ([5702c92](https://github.com/HaxeFlixel/flixel/commit/5702c92))\n  138  * `FlxAnimation`: added support for changing `frames` ([#1967](https://github.com/HaxeFlixel/flixel/issues/1967))\n  139: * `FlxObject`: added `debugBoundingBoxColorSolid`, -`NotSolid` and -`Partial` ([#1847](https://github.com/HaxeFlixel/flixel/issues/1847))\n  140  * `FlxTilemap`:\n  141: \t* `drawDebug` now colors partially collidable tiles differently ([#1847](https://github.com/HaxeFlixel/flixel/issues/1847))\n  142: \t* non-colliding tiles are now transparent by default in `drawDebug` ([#1847](https://github.com/HaxeFlixel/flixel/issues/1847))\n  143  * Added an HTML5 template to center games horizontally ([#1918](https://github.com/HaxeFlixel/flixel/issues/1918))\n  144  * Added support for `haxelib run flixel` as an alias for `haxelib run flixel-tools` ([#1950](https://github.com/HaxeFlixel/flixel/issues/1950))\n  ...\n  153  * `FlxTilemap`: fixed buffers not being resized on camera changes ([#1801](https://github.com/HaxeFlixel/flixel/issues/1801))\n  154  * `FlxSpriteGroup`:\n  155: \t* fixed `drawDebug()` not being called ([#1905](https://github.com/HaxeFlixel/flixel/issues/1905))\n  156  \t* fixed `revive()` not setting children's `alive` ([#1891](https://github.com/HaxeFlixel/flixel/issues/1891))\n  157  * `flixel.input.gamepad.mappings`: fixed some mappings for digitized stick movements ([c04ce96](https://github.com/HaxeFlixel/flixel/commit/c04ce96))\n  158  * `FlxAtlasFrames`: fixed offset parsing for whitespace-stripped atlases in `fromLibGdx` ([#1923](https://github.com/HaxeFlixel/flixel/issues/1923))\n  159: * `FlxKeyboard`: fixed some `FlxG.debugger.toggleKeys` and `FlxG.vcr.cancelKeys` not working on native ([470c8e8](https://github.com/HaxeFlixel/flixel/commit/470c8e8))\n  160  * `FlxMouse`: fixed `FlxButton` presses during VCR playback ([#1729](https://github.com/HaxeFlixel/flixel/issues/1729))\n  161  * `FlxSprite`:\n  ...\n  175  * `FlxGitSHA`: optimized for compiler completion ([f5dca1d](https://github.com/HaxeFlixel/flixel/commit/f5dca1d))\n  176  * `FlxRect`: added an optional `result` argument to `intersection()` ([c52b534](https://github.com/HaxeFlixel/flixel/commit/c52b534))\n  177: * `FlxG.debugger`: added `F2` to `toggleKeys` ([f3f029c](https://github.com/HaxeFlixel/flixel/commit/f3f029c))\n  178  * `FlxRandom`: deprecated `shuffleArray()` in favor of `shuffle()` ([#1947](https://github.com/HaxeFlixel/flixel/issues/1947))\n  179  * `FlxEmitter`: `emitParticle()` now returns the particle ([#1957](https://github.com/HaxeFlixel/flixel/issues/1957))\n  ...\n  207  * `WatchEntry`:\n  208  \t* added a remove button\n  209: \t* added `Float` rounding (to `FlxG.debugger.precision` decimals)\n  210  \t* added support for in- / decrement of numeric values via up / down keys\n  211  \t* added support for moving selection to start / end via up / down keys (non-numeric values)\n  212  * `FlxStringUtil`: added `isNullOrEmpty()`\n  213: * `FlxDefines`: added inverted versions of all `FLX_NO`-defines (e.g. `FLX_DEBUG` for `FLX_NO_DEBUG`)\n  214  * `FlxTileFrames`: added `spacing` and `border` arguments to `combineTileSets()` and `combineTileFrames()` ([#1807](https://github.com/HaxeFlixel/flixel/issues/1807))\n  215  * `FlxBitmapDataUtil`: added `copyBorderPixels()`\n  ...\n  222  * Added GLSL `shader` support for `FlxSprite`, `FlxTilemap`, `FlxBar` and `FlxBitmapText` ([#1848](https://github.com/HaxeFlixel/flixel/issues/1848))\n  223  * `FlxGraphic`: added an optional `Cache` argument to `fromFrame()`\n  224: * `FlxG.debugger`: added `visibilityChanged` ([#1865](https://github.com/HaxeFlixel/flixel/issues/1865))\n  225  \n  226  #### Bugfixes:\n  ...\n  251  * `FlxSpriteUtil`: changed `alphaMask()` arguments from `Dynamic` to `FlxGraphicAsset` ([#1806](https://github.com/HaxeFlixel/flixel/issues/1806))\n  252  * `FlxG.signals`: changed `preUpdate` to be dispatched _after_ `FlxG.elapsed` is updated ([#1836](https://github.com/HaxeFlixel/flixel/issues/1836))\n  253: * `FlxG.debugger`: changed `drawDebugChanged` to be dispatched _after_ `drawDebug` is updated\n  254  * `FlxDefines`: added a check for incompatible OpenFL / Lime versions (should be < 4.0.0 / < 3.0.0 respectively) \n  255  \n  ...\n  257  ------------------------------\n  258  \n  259: * `FlxDebugger`: [HTML5] fixed version text color ([#1727](https://github.com/HaxeFlixel/flixel/issues/1727))\n  260  * `FlxFlicker` / `LabelValuePair`: fixed DCE issues ([#1757](https://github.com/HaxeFlixel/flixel/issues/1757))\n  261  * `FlxMouse`: fixed `useSystemCursor = true` not always working with native cursor API\n  262: * `FlxDebugger` mouse handling fixes ([#1775](https://github.com/HaxeFlixel/flixel/issues/1775)):\n  263  \t* fixed `FlxMouse`'s `visible` and `useSystemCursor` not being restored properly\n  264  \t* fixed cursor disappearing after losing Console focus with native cursor API\n  ...\n  270  \t* fixed formatting for negative amounts\n  271  \t* [HTML5] fixed formatting for amounts > Int32 \n  272: * Debugger Stats window: fixed paused time being taken into account for average FPS\n  273  \n  274  4.0.0 (February 16, 2016)\n  ...\n  316  ### flixel.FlxG:\n  317  \n  318: * `debugger`: fixed a crash when calling `addTrackerProfile()` before `track()`\n  319  * `signals`:\n  320   * split `gameReset` into pre/post signals\n  ...\n  516   * added `FlxSoundGroup` ([#1316](https://github.com/HaxeFlixel/flixel/issues/1316))\n  517  \n  518: ### flixel.system.debug:\n  519  \n  520  * `Console`:\n  ...\n  722  * Updated the Xbox 360 button IDs to work with OpenFL 1.4.0\n  723  * FlxBitmapTextField: fixed graphic \"corrupting\" after state switches\n  724: * Added a bitmapLog window to the debugger to view BitmapData, used via FlxG.bitmapLog\n  725  * Added a way to view the graphics cache via FlxG.bitmapLog.viewCache() or by typing \"viewCache\" / \"vc\" into the console\n  726  * CachedGraphics: destroyOnNoUse is now true by default\n  ...\n  747   * FlxGamepad.getAxis() has been split into getXAxis() and getYAxis() for consistency across targets\n  748   * FlxGamepad.dpadUp / Down / Left / Right don't work in flash, use getButton() in conjunction with the IDs in the button ID classes instead\n  749: * Added \"tracker\" window to the debugger which creates a Watch window with the most important properties of an object\n  750:  * Use FlxG.debugger.track(Object); to create a new tracker window\n  751:  * Use FlxG.debugger.addTrackerProfile() to add a profile for classes don't have one yet or override existing ones\n  752   * Use the \"track [object]\" command to open a tracker window from the console\n  753  * FlxCamera: \n  ...\n  755   * Fixed a bug where following a target would prevent you from setting the coordinates of the camera\n  756  * Added pooling for FlxPoint, FlxVector, and FlxRect. Usage: var point = FlxPoint.get(); /* do stuff with point */ point.put(); // recycle point. FlxPoint.weak() should be used instead of get() when passing points into flixel functions, that way they'll be recycled automatically.\n  757: * Debugger windows:\n  758   * Fixed dragging of overlapping windows\n  759   * Fixed the visibility of windows on native targets (now saving correctly)\n  760   * Fixed resizing when moving the mouse to the left / above the window\n  761: * FlxPath: fixed a bug with drawDebug()\n  762  * FlxG:\n  763   * fullscreen: fixed offset in flash\n  ...\n  808   * Removed rayHit(), ray() provides the same functionality\n  809  * Added FlxDestroyUtil (FlxG.safeDestroy() -> FlxDestroyUtil.destroy())\n  810: * Debugger stats window: added a button to expand the window and show two more graphs (draw and update time)\n  811  * Added buildFileReferences() macro to FlxAssets.hx (auto-completion for asset string paths)\n  812  * FlxTilemap.computePathDistance() is now public and has a new StopOnEnd parameter\n  ...\n  842   * Added anyPressed(), anyJustPressed() and anyJustReleased()\n  843   * Added PS4ButtonID\n  844: * Traces are not being redirected to the debugger log window anymore by default\n  845  * Fixed mouse cursor scale at initial camera zoom levels different from 1\n  846  * FlxState: active, visible and exists are now respected\n  ...\n  886  * FlxMath.computeVelocity() -> FlxVelocity.computeVelocity()\n  887  * FlxState.setSubState() -> FlxState.openSubState()\n  888: * Added FlxStringUtil.getDebugString()\n  889  * Improvements to FlxSystemButton\n  890  * Window: add optional close button\n  ...\n  945    * Revive param has been added to recycle()\n  946    * Fixed a bug with callAll()'s Args parameter which would get lost in recursive mode \n  947: * FlxRect, FlxPoint and FlxBasic and FlxObject now have toString() functions used for traces and the flixel debugger\n  948  * The focus lost screen and the sound tray now react to window resizes\n  949  * BUG: Fixed numpad minus not working as a default volume down key\n  ...\n  951   * added sameClassName() \n  952   * added getDomain()\n  953: * The stats window of the debugger has been refactored, now has fancy FPS and memory graphs\n  954  * FlxGame.focusLostFramerate added\n  955  * BUG: Fixed flixel cursor reappearing after regaining focus\n  ...\n  977    * FlxG.gamepads.get() -> getByID()\n  978  * Ported scale modes from flixel for moneky (FlxG.scaleMode / flixel.system.scaleModes) and removed FlxG.autoResize\n  979: * Renamed FlxG.debugger.visualDebug to drawDebug\n  980  * FlxTween:\n  981   * optimizations\n  ...\n 1044  * FlxAnimationController: Additional null checks to prevent errors with FlxSpriteFilter\n 1045  * FlxG: addChildBelowMouse() and removeChild() added\n 1046: * FlxG.debugger.removeButton() added\n 1047  * Added toString() functions to FlxPoint and FlxRect\n 1048  * Console: Refactor which includes removing some commands and making it more flexible\n ....\n 1083  * FlxSpriteGroup has been reworked and now extends FlxSprite instead of FlxTypedGroup<FlxSprite>\n 1084  * FlxCollisionType introduced\n 1085: * FlxDebugger: UI improvements, now remembers visibility settings of the windows\n 1086  * Compiler fix for Blackberry target.\n 1087  * FlxAssets: Fonts are no longer inlined so they can be changed\n ....\n 1135  * Added loadFromSprite() method for FlxSprite \n 1136  * Added support for animated sprites in FlxTrail\n 1137: * Added functions to hide, show and toggle the debugger to FlxG. Thanks @Gama11\n 1138  * Slightly better texture atlas handling. Now you can easily add support for new atlas format\n 1139  * Fixed tilesheet rendering (for latest openfl release) \n ....\n 1159  * Added method for updating tilemap buffers, useful for camera resizing. Thanks @impaler\n 1160  * FlxEmitter Improvements: added scaling, fading and coloring. Thanks @Gama11 for the idea and help\n 1161: * Added powerful Console to FlxDebugger. Thanks @Gama11\n 1162  * Improved logging and variable watching functionality. Thanks @Gama11\n 1163  * Added move function to FlxObject. Thanks @sergey-miryanov\n ....\n 1176  * Refactored input system (thanks @impaler). Added new compiler conditionals for switching off unnecessary inputs - see template nmml-file.\n 1177  * Tilesheet rendering for html5 target (it is much faster than blitting)\n 1178: * Added new compiler conditionals for switching off debugger and recording systems - see template nmml-file (thanks @impaler)\n 1179  * Improved Joystick support (thanks @crazysam)\n 1180  * Added FlxTypedGroup - much less casting in the engine's code. Plus you can use it too\n ....\n 1207  * New layer system for cpp and neko targets. See https://github.com/Beeblerox/HaxeFlixel/wiki/Introduction-in-layer-system-%5BEN%5D\n 1208  * Fixed draw position round issue for cpp and neko targets. It uses less math methods and more accurate now.\n 1209: * Added drawTiles() counter in debugger output (on cpp and neko targets).\n 1210  * Added BACKWARD and PINGPONG tween types. Thanks @devolonter!\n 1211  * Added cancel() method to FlxTween\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/FlxBasic.hx:\n   10  class FlxBasic implements IFlxDestroyable\n   11  {\n   12: \t#if FLX_DEBUG\n   13  \t/**\n   14  \t * Static counters for performance tracking.\n   ..\n  108  \tpublic function update(elapsed:Float):Void \n  109  \t{ \n  110: \t\t#if FLX_DEBUG\n  111  \t\tactiveCount++;\n  112  \t\t#end\n  ...\n  119  \tpublic function draw():Void\n  120  \t{\n  121: \t\t#if FLX_DEBUG\n  122  \t\tvisibleCount++;\n  123  \t\t#end\n  ...\n  126  \tpublic function toString():String\n  127  \t{\n  128: \t\treturn FlxStringUtil.getDebugString([\n  129  \t\t\tLabelValuePair.weak(\"active\", active),\n  130  \t\t\tLabelValuePair.weak(\"visible\", visible),\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/FlxCamera.hx:\n   45   *                                    Everything is rendered on buffer in blit render mode)\n   46   *         |-> `canvas:Sprite`        (its graphics is used for rendering objects in tile render mode)\n   47:  *         |-> `debugLayer:Sprite`    (this sprite is used in tile render mode for rendering debug info, like bounding boxes)\n   48   */\n   49  class FlxCamera extends FlxBasic\n   ..\n  400  \tpublic var canvas:Sprite;\n  401  \t\n  402: \t#if FLX_DEBUG\n  403  \t/**\n  404: \t * Sprite for visual effects (flash and fade) and drawDebug information \n  405  \t * (bounding boxes are drawn on it) for tile render mode.\n  406  \t * It is a child of `_scrollRect` `Sprite` (which trims graphics that should be invisible).\n  407  \t * Its position is modified by `updateInternalSpritePositions()`, which is called on camera's resize and scale events.\n  408  \t */\n  409: \tpublic var debugLayer:Sprite;\n  410  \t#end\n  411  \t\n  ...\n  757  \t\t\t\t\n  758  \t\t\t\tbuffer.draw(trianglesSprite, _helperMatrix);\n  759: \t\t\t\t#if FLX_DEBUG\n  760: \t\t\t\tif (FlxG.debugger.drawDebug)\n  761  \t\t\t\t{\n  762  \t\t\t\t\tvar gfx:Graphics = FlxSpriteUtil.flashGfx;\n  ...\n  782  \t\n  783  \t/**\n  784: \t * Helper method preparing debug rectangle for rendering in blit render mode\n  785  \t * @param\trect\trectangle to prepare for rendering\n  786  \t * @return\ttransformed rectangle with respect to camera's zoom factor\n  ...\n  805  \t\n  806  \t/**\n  807: \t * Helper method preparing debug point for rendering in blit render mode (for debug path rendering, for example)\n  808  \t * @param\tpoint\t\tpoint to prepare for rendering\n  809  \t * @return\ttransformed point with respect to camera's zoom factor\n  ...\n  823  \t\n  824  \t/**\n  825: \t * Helper method preparing debug vectors (relative positions) for rendering in blit render mode\n  826  \t * @param\tvector\trelative position to prepare for rendering\n  827  \t * @return\ttransformed vector with respect to camera's zoom factor\n  ...\n  838  \t * Helper method for applying transformations (scaling and offsets) \n  839  \t * to specified display objects which has been added to the camera display list.\n  840: \t * For example, debug sprite for nape debug rendering.\n  841  \t * @param\tobject\tdisplay object to apply transformations to.\n  842  \t * @return\ttransformed object.\n  ...\n  898  \t\t\t_scrollRect.addChild(canvas);\n  899  \t\t\t\n  900: \t\t\t#if FLX_DEBUG\n  901: \t\t\tdebugLayer = new Sprite();\n  902: \t\t\t_scrollRect.addChild(debugLayer);\n  903  \t\t\t#end\n  904  \t\t}\n  ...\n  934  \t\telse\n  935  \t\t{\n  936: \t\t\t#if FLX_DEBUG\n  937: \t\t\tFlxDestroyUtil.removeChild(_scrollRect, debugLayer);\n  938: \t\t\tdebugLayer = null;\n  939  \t\t\t#end\n  940  \t\t\t\n  ...\n 1227  \t\n 1228  \t/**\n 1229: \t * Modifies position of `_flashBitmap` in blit render mode and `canvas` and `debugSprite`\n 1230  \t * in tile render mode (these objects are children of `_scrollRect` sprite).\n 1231  \t * It takes camera's size and game's scale into account.\n ....\n 1252  \t\t\t\tcanvas.scaleY = totalScaleY;\n 1253  \t\t\t\t\n 1254: \t\t\t\t#if FLX_DEBUG\n 1255: \t\t\t\tif (debugLayer != null)\n 1256  \t\t\t\t{\n 1257: \t\t\t\t\tdebugLayer.x = canvas.x;\n 1258: \t\t\t\t\tdebugLayer.y = canvas.y;\n 1259  \t\t\t\t\t\n 1260: \t\t\t\t\tdebugLayer.scaleX = totalScaleX;\n 1261: \t\t\t\t\tdebugLayer.scaleY = totalScaleY;\n 1262  \t\t\t\t}\n 1263  \t\t\t\t#end\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/FlxG.hx:\n   16  import flixel.system.frontEnds.CameraFrontEnd;\n   17  import flixel.system.frontEnds.ConsoleFrontEnd;\n   18: import flixel.system.frontEnds.DebuggerFrontEnd;\n   19  import flixel.system.frontEnds.InputFrontEnd;\n   20  import flixel.system.frontEnds.LogFrontEnd;\n   ..\n   60  \n   61  /**\n   62:  * Global helper class for audio, input, the camera system, the debugger and other global properties.\n   63   */\n   64  class FlxG\n   ..\n  266  \tpublic static var watch(default, null):WatchFrontEnd = new WatchFrontEnd();\n  267  \t/**\n  268: \t * Used it to show / hide the debugger, change its layout,\n  269: \t * activate debug drawing or change the key used to toggle it.\n  270  \t */\n  271: \tpublic static var debugger(default, null):DebuggerFrontEnd = new DebuggerFrontEnd();\n  272  \n  273  \t/**\n  ...\n  445  \t\n  446  \t/**\n  447: \t * Regular `DisplayObject`s are normally displayed over the Flixel cursor and the Flixel debugger if simply\n  448  \t * added to `stage`. This function simplifies things by adding a `DisplayObject` directly below mouse level.\n  449  \t * \n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/FlxGame.hx:\n   21  #end\n   22  \n   23: #if FLX_DEBUG\n   24: import flixel.system.debug.FlxDebugger;\n   25  #end\n   26  \n   ..\n   72  \t#end\n   73  \t\n   74: \t#if FLX_DEBUG\n   75  \t/**\n   76: \t * The debugger overlay object.\n   77  \t */\n   78: \tpublic var debugger(default, null):FlxDebugger;\n   79  \t#end\n   80  \t\n   ..\n  244  \t * @param UpdateFramerate How frequently the game should update (default is `60` times per second).\n  245  \t * @param DrawFramerate   Sets the actual display / draw framerate for the game (default is `60` times per second).\n  246: \t * @param SkipSplash      Whether you want to skip the flixel splash screen with `FLX_NO_DEBUG`.\n  247  \t * @param StartFullscreen Whether to start the game in fullscreen mode (desktop targets only).\n  248  \t */\n  ...\n  319  \t\t#end\n  320  \t\t\n  321: \t\t// Creating the debugger overlay\n  322: \t\t#if FLX_DEBUG\n  323: \t\tdebugger = new FlxDebugger(FlxG.stage.stageWidth, FlxG.stage.stageHeight);\n  324: \t\taddChild(debugger);\n  325  \t\t#end\n  326  \t\t\n  ...\n  402  \t\t#end \n  403  \t\t\n  404: \t\t#if FLX_DEBUG\n  405: \t\tdebugger.stats.onFocus();\n  406  \t\t#end\n  407  \t\t\n  ...\n  437  \t\t#end \n  438  \t\t\n  439: \t\t#if FLX_DEBUG\n  440: \t\tdebugger.stats.onFocusLost();\n  441  \t\t#end\n  442  \t\t\n  ...\n  471  \t\tFlxG.signals.gameResized.dispatch(width, height);\n  472  \t\t\n  473: \t\t#if FLX_DEBUG\n  474: \t\tdebugger.onResize(width, height);\n  475  \t\t#end\n  476  \t\t\n  ...\n  515  \t\t\t\telse if (_state == _requestedState) // don't pause a state switch request\n  516  \t\t\t\t{\n  517: \t\t\t\t\t#if FLX_DEBUG\n  518: \t\t\t\t\tdebugger.update();\n  519: \t\t\t\t\t// If the interactive debug is active, the screen must\n  520  \t\t\t\t\t// be rendered because the user might be doing changes\n  521  \t\t\t\t\t// to game objects (e.g. moving things around).\n  522: \t\t\t\t\tif (debugger.interaction.isActive())\n  523  \t\t\t\t\t{\n  524  \t\t\t\t\t\tdraw();\n  ...\n  545  \t\t\t}\n  546  \t\t\t\n  547: \t\t\t#if FLX_DEBUG\n  548  \t\t\tFlxBasic.visibleCount = 0;\n  549  \t\t\t#end\n  ...\n  551  \t\t\tdraw();\n  552  \t\t\t\n  553: \t\t\t#if FLX_DEBUG\n  554: \t\t\tdebugger.stats.visibleObjects(FlxBasic.visibleCount);\n  555: \t\t\tdebugger.update();\n  556  \t\t\t#end\n  557  \t\t}\n  ...\n  566  \t\tFlxG.signals.preGameReset.dispatch();\n  567  \t\t\n  568: \t\t#if FLX_DEBUG\n  569  \t\t_skipSplash = true;\n  570  \t\t#end\n  ...\n  583  \t\t}\n  584  \t\t\n  585: \t\t#if FLX_DEBUG\n  586  \t\tif (Std.is(_requestedState, FlxSubState))\n  587  \t\t\tthrow \"You can't set FlxSubState class instance as the state for you game\";\n  ...\n  630  \t\t\tgameStart();\n  631  \t\t\n  632: \t\t#if FLX_DEBUG\n  633: \t\tdebugger.console.registerObject(\"state\", _state);\n  634  \t\t#end\n  635  \t}\n  ...\n  658  \t\thandleReplayRequests();\n  659  \t\t\n  660: \t\t#if FLX_DEBUG\n  661  \t\t// Finally actually step through the game physics\n  662  \t\tFlxBasic.activeCount = 0;\n  ...\n  665  \t\tupdate();\n  666  \t\t\n  667: \t\t#if FLX_DEBUG\n  668: \t\tdebugger.stats.activeObjects(FlxBasic.activeCount);\n  669  \t\t#end\n  670  \t}\n  ...\n  680  \t\t\trecording = true;\n  681  \t\t\t\n  682: \t\t\t#if FLX_DEBUG\n  683: \t\t\tdebugger.vcr.recording();\n  684  \t\t\tFlxG.log.notice(\"Starting new flixel gameplay record.\");\n  685  \t\t\t#end\n  ...\n  691  \t\t\tFlxG.random.initialSeed = _replay.seed;\n  692  \t\t\t\n  693: \t\t\t#if FLX_DEBUG\n  694: \t\t\tdebugger.vcr.playingReplay();\n  695  \t\t\t#end\n  696  \t\t\t\n  ...\n  712  \t\t\tswitchState();\n  713  \t\t\n  714: \t\t#if FLX_DEBUG\n  715: \t\tif (FlxG.debugger.visible)\n  716  \t\t\tticks = getTicks();\n  717  \t\t#end\n  ...\n  738  \t\tFlxG.signals.postUpdate.dispatch();\n  739  \t\t\n  740: \t\t#if FLX_DEBUG\n  741: \t\tdebugger.stats.flixelUpdate(getTicks() - ticks);\n  742  \t\t#end\n  743  \t\t\n  ...\n  801  \t\t\t}\n  802  \t\t\t\n  803: \t\t\t#if FLX_DEBUG\n  804: \t\t\tdebugger.vcr.updateRuntime(_stepMS);\n  805  \t\t\t#end\n  806  \t\t}\n  ...\n  818  \t\t\t_replay.recordFrame();\n  819  \t\t\t\n  820: \t\t\t#if FLX_DEBUG\n  821: \t\t\tdebugger.vcr.updateRuntime(_stepMS);\n  822  \t\t\t#end\n  823  \t\t}\n  ...\n  833  \t\t\treturn;\n  834  \t\t\n  835: \t\t#if FLX_DEBUG\n  836: \t\tif (FlxG.debugger.visible)\n  837  \t\t\tticks = getTicks();\n  838  \t\t#end\n  ...\n  858  \t\t\tFlxG.cameras.render();\n  859  \t\t\t\n  860: \t\t\t#if FLX_DEBUG\n  861: \t\t\tdebugger.stats.drawCalls(FlxDrawBaseItem.drawCalls);\n  862  \t\t\t#end\n  863  \t\t}\n  ...\n  867  \t\tFlxG.signals.postDraw.dispatch();\n  868  \t\t\n  869: \t\t#if FLX_DEBUG\n  870: \t\tdebugger.stats.flixelDraw(getTicks() - ticks);\n  871  \t\t#end\n  872  \t}\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/FlxObject.hx:\n  539  \tpublic var collisonXDrag:Bool = true;\n  540  \t\n  541: \t#if FLX_DEBUG\n  542  \t/**\n  543: \t * Overriding this will force a specific color to be used for debug rect\n  544: \t * (ignoring any of the other debug bounding box colors specified).\n  545  \t */\n  546: \tpublic var debugBoundingBoxColor:Null<FlxColor> = null;\n  547  \t\n  548  \t/**\n  549: \t * Color used for the debug rect if `allowCollisions == FlxObject.ANY`.\n  550  \t * @since 4.2.0\n  551  \t */\n  552: \tpublic var debugBoundingBoxColorSolid(default, set):FlxColor = FlxColor.RED;\n  553  \n  554  \t/**\n  555: \t * Color used for the debug rect if `allowCollisions == FlxObject.NONE`.\n  556  \t * @since 4.2.0\n  557  \t */\n  558: \tpublic var debugBoundingBoxColorNotSolid(default, set):FlxColor = FlxColor.BLUE;\n  559  \n  560  \t/**\n  561: \t * Color used for the debug rect if this object collides partially\n  562  \t * (`immovable` in the case of `FlxObject`, or `allowCollisions` not equal to\n  563  \t * `FlxObject.ANY` or `FlxObject.NONE` in the case of tiles in `FlxTilemap`).\n  564  \t * @since 4.2.0\n  565  \t */\n  566: \tpublic var debugBoundingBoxColorPartial(default, set):FlxColor = FlxColor.GREEN;\n  567  \n  568  \t/**\n  569  \t * Setting this to `true` will prevent the object from appearing\n  570: \t * when `FlxG.debugger.drawDebug` is `true`.\n  571  \t */\n  572: \tpublic var ignoreDrawDebug:Bool = false;\n  573  \t#end\n  574  \t\n  ...\n  660  \toverride public function update(elapsed:Float):Void \n  661  \t{\n  662: \t\t#if FLX_DEBUG\n  663  \t\t// this just increments FlxBasic.activeCount, no need to waste a function call on release\n  664  \t\tsuper.update(elapsed);\n  ...\n  704  \t\n  705  \t/**\n  706: \t * Rarely called, and in this case just increments the visible objects count and calls `drawDebug()` if necessary.\n  707  \t */\n  708  \toverride public function draw():Void\n  709  \t{\n  710: \t\t#if FLX_DEBUG\n  711  \t\tsuper.draw();\n  712: \t\tif (FlxG.debugger.drawDebug)\n  713: \t\t\tdrawDebug();\n  714  \t\t#end\n  715  \t}\n  ...\n 1045  \t}\n 1046  \t\n 1047: \t#if FLX_DEBUG\n 1048: \tpublic function drawDebug():Void\n 1049  \t{\n 1050: \t\tif (ignoreDrawDebug)\n 1051  \t\t\treturn;\n 1052  \t\t\n 1053  \t\tfor (camera in cameras)\n 1054  \t\t{\n 1055: \t\t\tdrawDebugOnCamera(camera);\n 1056  \t\t\t\n 1057: \t\t\tif (path != null && !path.ignoreDrawDebug)\n 1058: \t\t\t\tpath.drawDebug();\n 1059  \t\t}\n 1060  \t}\n 1061  \t\n 1062  \t/**\n 1063: \t * Override this function to draw custom \"debug mode\" graphics to the\n 1064: \t * specified camera while the debugger's `drawDebug` mode is toggled on.\n 1065  \t * \n 1066: \t * @param   Camera   Which camera to draw the debug visuals to.\n 1067  \t */\n 1068: \tpublic function drawDebugOnCamera(camera:FlxCamera):Void\n 1069  \t{\n 1070  \t\tif (!camera.visible || !camera.exists || !isOnScreen(camera))\n ....\n 1072  \t\t\n 1073  \t\tvar rect = getBoundingBox(camera);\n 1074: \t\tvar gfx:Graphics = beginDrawDebug(camera);\n 1075: \t\tdrawDebugBoundingBox(gfx, rect, allowCollisions, immovable);\n 1076: \t\tendDrawDebug(camera);\n 1077  \t}\n 1078  \t\n 1079: \tfunction drawDebugBoundingBox(gfx:Graphics, rect:FlxRect, allowCollisions:Int, partial:Bool)\n 1080  \t{\n 1081  \t\t// Find the color to use\n 1082: \t\tvar color:Null<Int> = debugBoundingBoxColor;\n 1083  \t\tif (color == null)\n 1084  \t\t{\n 1085  \t\t\tif (allowCollisions != FlxObject.NONE)\n 1086  \t\t\t{\n 1087: \t\t\t\tcolor = partial ? debugBoundingBoxColorPartial : debugBoundingBoxColorSolid;\n 1088  \t\t\t}\n 1089  \t\t\telse\n 1090  \t\t\t{\n 1091: \t\t\t\tcolor = debugBoundingBoxColorNotSolid;\n 1092  \t\t\t}\n 1093  \t\t}\n ....\n 1098  \t}\n 1099  \n 1100: \tinline function beginDrawDebug(camera:FlxCamera):Graphics\n 1101  \t{\n 1102  \t\tif (FlxG.renderBlit)\n ....\n 1107  \t\telse\n 1108  \t\t{\n 1109: \t\t\treturn camera.debugLayer.graphics;\n 1110  \t\t}\n 1111  \t}\n 1112  \t\n 1113: \tinline function endDrawDebug(camera:FlxCamera)\n 1114  \t{\n 1115  \t\tif (FlxG.renderBlit)\n ....\n 1135  \t\n 1136  \t/**\n 1137: \t * Convert object to readable string name. Useful for debugging, save games, etc.\n 1138  \t */\n 1139  \toverride public function toString():String\n 1140  \t{\n 1141: \t\treturn FlxStringUtil.getDebugString([\n 1142  \t\t\tLabelValuePair.weak(\"x\", x), \n 1143  \t\t\tLabelValuePair.weak(\"y\", y), \n ....\n 1163  \tfunction set_width(Width:Float):Float\n 1164  \t{\n 1165: \t\t#if FLX_DEBUG\n 1166  \t\tif (Width < 0)\n 1167  \t\t{\n ....\n 1177  \tfunction set_height(Height:Float):Float\n 1178  \t{\n 1179: \t\t#if FLX_DEBUG\n 1180  \t\tif (Height < 0)\n 1181  \t\t{\n ....\n 1243  \t}\n 1244  \n 1245: \t#if FLX_DEBUG\n 1246  \t@:noCompletion\n 1247: \tfunction set_debugBoundingBoxColorSolid(color:FlxColor)\n 1248  \t{\n 1249: \t\treturn debugBoundingBoxColorSolid = color;\n 1250  \t}\n 1251  \n 1252  \t@:noCompletion\n 1253: \tfunction set_debugBoundingBoxColorNotSolid(color:FlxColor)\n 1254  \t{\n 1255: \t\treturn debugBoundingBoxColorNotSolid = color;\n 1256  \t}\n 1257  \t\n 1258  \t@:noCompletion\n 1259: \tfunction set_debugBoundingBoxColorPartial(color:FlxColor)\n 1260  \t{\n 1261: \t\treturn debugBoundingBoxColorPartial = color;\n 1262  \t}\n 1263  \t#end\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/FlxSprite.hx:\n  662  \t\t\t\tdrawComplex(camera);\n  663  \t\t\t\n  664: \t\t\t#if FLX_DEBUG\n  665  \t\t\tFlxBasic.visibleCount++;\n  666  \t\t\t#end\n  667  \t\t}\n  668  \t\t\n  669: \t\t#if FLX_DEBUG\n  670: \t\tif (FlxG.debugger.drawDebug)\n  671: \t\t\tdrawDebug();\n  672  \t\t#end\n  673  \t}\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/graphics/atlas/FlxAtlas.hx:\n  179  \t\tif (key == null)\n  180  \t\t{\n  181: \t\t\t#if FLX_DEBUG\n  182  \t\t\tthrow \"addNode can't find the key for specified BitmapData. Please provide not null value as a Key argument.\";\n  183  \t\t\t#end\n  ...\n  192  \t\tif (data == null)\n  193  \t\t{\n  194: \t\t\t#if FLX_DEBUG\n  195  \t\t\tthrow \"addNode can't find BitmapData with specified key: \" + Graphic + \". Please provide valid value.\";\n  196  \t\t\t#end\n  ...\n  380  \t\t\tif ((maxWidth > 0 && rootWidth > maxWidth) || (maxHeight > 0 && rootHeight > maxHeight))\n  381  \t\t\t{\n  382: \t\t\t\t#if FLX_DEBUG\n  383  \t\t\t\tthrow \"Can't insert node \" + key + \" with the size of (\" + data.width + \"; \" + data.height +\n  384  \t\t\t\t\t\") in atlas \" + name + \" with the max size of (\" + maxWidth + \"; \" + maxHeight +\n  ...\n  464  \t\t\tif (!canExpandRight && !canExpandBottom && !canExpandRightRotate && !canExpandBottomRotate)\n  465  \t\t\t{\n  466: \t\t\t\t#if FLX_DEBUG\n  467  \t\t\t\tthrow \"Can't insert node \" + key + \" with the size of (\" + data.width + \"; \" + data.height +\n  468  \t\t\t\t\t\") in atlas \" + name + \" with the max size of (\" + maxWidth + \"; \" + maxHeight +\n  ...\n  616  \t\tif (key == null) \n  617  \t\t{\n  618: \t\t\t#if FLX_DEBUG\n  619  \t\t\tthrow \"addNodeWithSpacings can't find the key for specified BitmapData.\" +\n  620  \t\t\t\t\" Please provide not null value as a Key argument.\";\n  ...\n  632  \t\tif (data == null) \n  633  \t\t{\n  634: \t\t\t#if FLX_DEBUG\n  635  \t\t\tthrow \"addNodeWithSpacings can't find BitmapData with specified key: \"\n  636  \t\t\t\t+ Graphic + \". Please provide valid value.\";\n  ...\n  644  \t\tif (node == null) \n  645  \t\t{\n  646: \t\t\t#if FLX_DEBUG\n  647  \t\t\tthrow \"addNodeWithSpacings can't insert provided image: \" + Graphic +\n  648  \t\t\t\t\") in atlas. It's probably too big.\";\n  ...\n  735  \t\tif (numBitmaps != numKeys)\n  736  \t\t{\n  737: \t\t\t#if FLX_DEBUG\n  738  \t\t\tthrow \"The number of bitmaps (\" + numBitmaps + \") should be equal to number of keys (\" + numKeys + \")\";\n  739  \t\t\t#end\n  ...\n 1101  \t\t\t\tif ((maxWidth > 0 && nextWidth > maxWidth) || (maxHeight > 0 && nextHeight > maxHeight))\n 1102  \t\t\t\t{\n 1103: \t\t\t\t\t#if FLX_DEBUG\n 1104  \t\t\t\t\tthrow \"Can't set powerOfTwo property to true,\" +\n 1105  \t\t\t\t\t\t\" since it requires to increase atlas size which is bigger that max size\";\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/graphics/frames/FlxBitmapFont.hx:\n  244  \t\t\tcharStr = null;\n  245  \t\t\t\n  246: \t\t\tif (char.has.letter) // The ASCII value of the character this line is describing. Helpful for debugging\n  247  \t\t\t{\n  248  \t\t\t\tcharStr = char.att.letter;\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/graphics/frames/FlxFrame.hx:\n  662  \tpublic function toString():String\n  663  \t{\n  664: \t\treturn FlxStringUtil.getDebugString([\n  665  \t\t\tLabelValuePair.weak(\"name\", name)]);\n  666  \t}\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/graphics/frames/FlxFramesCollection.hx:\n  191  \t *\n  192  \t * @param   frame   Frame area to check.\n  193: \t * @param   name    Optional frame name for debugging info.\n  194  \t * @return  Checked and trimmed frame rectangle.\n  195  \t */\n  ...\n  245  \tpublic function toString():String\n  246  \t{\n  247: \t\treturn FlxStringUtil.getDebugString([\n  248  \t\t\tLabelValuePair.weak(\"frames\", frames),\n  249  \t\t\tLabelValuePair.weak(\"type\", type)]);\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/graphics/tile/FlxDrawTrianglesItem.hx:\n   55  \t\t#end\n   56  \t\tcamera.canvas.graphics.endFill();\n   57: \t\t#if FLX_DEBUG\n   58: \t\tif (FlxG.debugger.drawDebug)\n   59  \t\t{\n   60: \t\t\tvar gfx:Graphics = camera.debugLayer.graphics;\n   61  \t\t\tgfx.lineStyle(1, FlxColor.BLUE, 0.5);\n   62  \t\t\tgfx.drawTriangles(vertices, indices);\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/group/FlxSpriteGroup.hx:\n  202  \t\tgroup.draw();\n  203  \t\t\n  204: \t\t#if FLX_DEBUG\n  205: \t\tif (FlxG.debugger.drawDebug)\n  206: \t\t\tdrawDebug();\n  207  \t\t#end\n  208  \t}\n  ...\n  920  \toverride public function loadGraphicFromSprite(Sprite:FlxSprite):FlxSprite \n  921  \t{\n  922: \t\t#if FLX_DEBUG\n  923  \t\tthrow \"This function is not supported in FlxSpriteGroup\";\n  924  \t\t#end\n  ...\n  943  \t\tAntiAliasing:Bool = false, AutoBuffer:Bool = false, ?Key:String):FlxSprite \n  944  \t{\n  945: \t\t#if FLX_DEBUG\n  946  \t\tthrow \"This function is not supported in FlxSpriteGroup\";\n  947  \t\t#end\n  ...\n  956  \t\t?Key:String):FlxSprite \n  957  \t{\n  958: \t\t#if FLX_DEBUG\n  959  \t\tthrow \"This function is not supported in FlxSpriteGroup\";\n  960  \t\t#end\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/input/FlxKeyManager.hx:\n  142  \t\t\t}\n  143  \t\t}\n  144: \t\t#if FLX_DEBUG\n  145  \t\telse\n  146  \t\t{\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/input/FlxPointer.hx:\n  151  \tpublic function toString():String\n  152  \t{\n  153: \t\treturn FlxStringUtil.getDebugString([ \n  154  \t\t\tLabelValuePair.weak(\"x\", x),\n  155  \t\t\tLabelValuePair.weak(\"y\", y)]);\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/input/FlxSwipe.hx:\n   37  \tinline function toString():String\n   38  \t{\n   39: \t\treturn FlxStringUtil.getDebugString([\n   40  \t\t\tLabelValuePair.weak(\"ID\", ID), \n   41  \t\t\tLabelValuePair.weak(\"start\", startPosition),\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/input/gamepad/FlxGamepad.hx:\n  851  \tpublic function toString():String\n  852  \t{\n  853: \t\treturn FlxStringUtil.getDebugString([\n  854  \t\t\tLabelValuePair.weak(\"id\", id),\n  855  \t\t\tLabelValuePair.weak(\"model\", model),\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/input/gamepad/FlxGamepadAnalogStick.hx:\n   53  \tpublic function toString():String\n   54  \t{\n   55: \t\treturn FlxStringUtil.getDebugString([\n   56  \t\t\tLabelValuePair.weak(\"x\", x),\n   57  \t\t\tLabelValuePair.weak(\"y\", y),\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/input/keyboard/FlxKeyboard.hx:\n   98  \t\tsuper.onKeyUp(event);\n   99  \t\t\n  100: \t\t// Debugger toggle\n  101: \t\t#if FLX_DEBUG\n  102: \t\t\tif (FlxG.game.debugger != null && inKeyArray(FlxG.debugger.toggleKeys, event))\n  103  \t\t\t{\n  104: \t\t\t\tFlxG.debugger.visible = !FlxG.debugger.visible;\n  105  \t\t\t}\n  106  \t\t#end\n  ...\n  113  \t\t// Attempted to cancel the replay?\n  114  \t\t#if FLX_RECORD\n  115: \t\t\tif (FlxG.game.replaying && !inKeyArray(FlxG.debugger.toggleKeys, event) && inKeyArray(FlxG.vcr.cancelKeys, event))\n  116  \t\t\t{\n  117  \t\t\t\tFlxG.vcr.cancelReplay();\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/math/FlxPoint.hx:\n  430  \t\n  431  \t/**\n  432: \t * Convert object to readable string name. Useful for debugging, save games, etc.\n  433  \t */\n  434  \tpublic inline function toString():String\n  435  \t{\n  436: \t\treturn FlxStringUtil.getDebugString([ \n  437  \t\t\tLabelValuePair.weak(\"x\", x),\n  438  \t\t\tLabelValuePair.weak(\"y\", y)]);\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/math/FlxRect.hx:\n  394  \t\n  395  \t/**\n  396: \t * Convert object to readable string name. Useful for debugging, save games, etc.\n  397  \t */\n  398  \tpublic inline function toString():String\n  399  \t{\n  400: \t\treturn FlxStringUtil.getDebugString([\n  401  \t\t\tLabelValuePair.weak(\"x\", x),\n  402  \t\t\tLabelValuePair.weak(\"y\", y),\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/FlxAssets.hx:\n   77  \t// fonts\n   78  \tpublic static var FONT_DEFAULT:String = \"Nokia Cellphone FC Small\";\n   79: \tpublic static var FONT_DEBUGGER:String = \"Monsterrat\";\n   80  \t\n   81  \tpublic static function drawLogo(graph:Graphics):Void\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/FlxBGSprite.hx:\n   32  \t\t\tcamera.drawPixels(frame, _matrix, colorTransform);\n   33  \t\t\t\n   34: \t\t\t#if FLX_DEBUG\n   35  \t\t\tFlxBasic.visibleCount++;\n   36  \t\t\t#end\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/FlxSound.hx:\n  738  \toverride public function toString():String\n  739  \t{\n  740: \t\treturn FlxStringUtil.getDebugString([\n  741  \t\t\tLabelValuePair.weak(\"playing\", playing),\n  742  \t\t\tLabelValuePair.weak(\"time\", time),\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/DebuggerUtil.hx:\n    1: package flixel.system.debug;\n    2  \n    3  import flash.display.BitmapData;\n    .\n   13  #end\n   14  \n   15: class DebuggerUtil\n   16  {\n   17  \tpublic static function createTextField(X:Float = 0, Y:Float = 0, Color:FlxColor = FlxColor.WHITE, Size:Int = 12):TextField\n   ..\n   32  \t\ttf.gridFitType = GridFitType.PIXEL;\n   33  \t\t#end\n   34: \t\ttf.defaultTextFormat = new TextFormat(FlxAssets.FONT_DEBUGGER, Size, Color.to24Bit());\n   35  \t\ttf.alpha = Color.alphaFloat;\n   36  \t\ttf.autoSize = TextFieldAutoSize.LEFT;\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/FlxDebugger.hx:\n    1: package flixel.system.debug;\n    2  \n    3  import flash.display.BitmapData;\n    .\n   11  import openfl.display.DisplayObject;\n   12  import flixel.FlxG;\n   13: import flixel.system.debug.console.Console;\n   14: import flixel.system.debug.log.Log;\n   15: import flixel.system.debug.stats.Stats;\n   16: import flixel.system.debug.watch.Watch;\n   17: import flixel.system.debug.watch.Tracker;\n   18: import flixel.system.debug.completion.CompletionList;\n   19: import flixel.system.debug.log.BitmapLog;\n   20: import flixel.system.debug.interaction.Interaction;\n   21  import flixel.system.FlxAssets;\n   22  import flixel.system.ui.FlxSystemButton;\n   ..\n   24  using flixel.util.FlxArrayUtil;\n   25  \n   26: @:bitmap(\"assets/images/debugger/flixel.png\")\n   27  private class GraphicFlixel extends BitmapData {}\n   28  \n   29: @:bitmap(\"assets/images/debugger/buttons/drawDebug.png\")\n   30: private class GraphicDrawDebug extends BitmapData {}\n   31  \n   32: @:bitmap(\"assets/images/debugger/buttons/log.png\")\n   33  class GraphicLog extends BitmapData {}\n   34  \n   35: @:bitmap(\"assets/images/debugger/buttons/stats.png\") \n   36  class GraphicStats extends BitmapData {}\n   37  \n   38: @:bitmap(\"assets/images/debugger/buttons/watch.png\")\n   39  class GraphicWatch extends BitmapData {}\n   40  \n   41: @:bitmap(\"assets/images/debugger/buttons/bitmapLog.png\")\n   42  class GraphicBitmapLog extends BitmapData {}\n   43  \n   44: @:bitmap(\"assets/images/debugger/buttons/console.png\") \n   45  class GraphicConsole extends BitmapData {}\n   46  \n   47: @:bitmap(\"assets/images/debugger/buttons/arrowLeft.png\") \n   48  class GraphicArrowLeft extends BitmapData {}\n   49  \n   50: @:bitmap(\"assets/images/debugger/buttons/arrowRight.png\") \n   51  class GraphicArrowRight extends BitmapData {}\n   52  \n   53: @:bitmap(\"assets/images/debugger/buttons/close.png\")\n   54  class GraphicCloseButton extends BitmapData {}\n   55  \n   56: @:bitmap(\"assets/images/debugger/buttons/interactive.png\")\n   57  class GraphicInteractive extends BitmapData {}\n   58  \n   59  /**\n   60:  * Container for the new debugger overlay. Most of the functionality is in the debug folder widgets,\n   61   * but this class instantiates the widgets and handles their basic formatting and arrangement.\n   62   */\n   63: class FlxDebugger extends Sprite\n   64  {\n   65: \t#if FLX_DEBUG\n   66  \t/**\n   67  \t * Internal, used to space out windows from the edges.\n   ..\n   83  \n   84  \t/**\n   85: \t * Internal, tracks what debugger window layout user has currently selected.\n   86  \t */\n   87: \tvar _layout:FlxDebuggerLayout = FlxDebuggerLayout.STANDARD;\n   88  \t/**\n   89  \t * Internal, stores width and height of the game.\n   ..\n   99  \t\n  100  \t/**\n  101: \t * The flash Sprite used for the top bar of the debugger ui\n  102  \t **/\n  103  \tvar _topBar:Sprite;\n  ...\n  110  \n  111  \t/**\n  112: \t * Instantiates the debugger overlay.\n  113  \t * \n  114  \t * @param   Width    The width of the screen.\n  ...\n  136  \t\ttxt.multiline = false;\n  137  \t\ttxt.embedFonts = true;\n  138: \t\tvar format = new TextFormat(FlxAssets.FONT_DEBUGGER, 12, 0xffffff);\n  139  \t\ttxt.defaultTextFormat = format;\n  140  \t\ttxt.autoSize = TextFieldAutoSize.LEFT;\n  ...\n  162  \t\taddWindowToggleButton(stats, GraphicStats);\n  163  \t\t\n  164: \t\tvar drawDebugButton = addButton(RIGHT, new GraphicDrawDebug(0, 0), toggleDrawDebug, true);\n  165: \t\tdrawDebugButton.toggled = !FlxG.debugger.drawDebug;\n  166: \t\tFlxG.debugger.drawDebugChanged.add(function()\n  167  \t\t{ \n  168: \t\t\tdrawDebugButton.toggled = !FlxG.debugger.drawDebug;\n  169  \t\t});\n  170  \t\t\n  ...\n  238  \t\n  239  \t/**\n  240: \t * Change the way the debugger's windows are laid out.\n  241  \t * \n  242: \t * @param   Layout   The layout codes can be found in FlxDebugger, for example FlxDebugger.MICRO\n  243  \t */\n  244: \tpublic inline function setLayout(Layout:FlxDebuggerLayout):Void\n  245  \t{\n  246  \t\t_layout = Layout;\n  ...\n  249  \t\n  250  \t/**\n  251: \t * Forces the debugger windows to reset to the last specified layout.\n  252  \t * The default layout is STANDARD.\n  253  \t */\n  ...\n  343  \n  344  \t/**\n  345: \t * Align an array of debugger buttons, used for the middle and right layouts\n  346  \t */\n  347  \tfunction hAlignButtons(Sprites:Array<FlxSystemButton>, Padding:Float = 0, Set:Bool = true, LeftOffset:Float = 0):Float\n  ...\n  363  \n  364  \t/**\n  365: \t * Position the debugger buttons\n  366  \t */\n  367  \tfunction resetButtonLayout():Void\n  ...\n  377  \t\n  378  \t/**\n  379: \t * Create and add a new debugger button.\n  380  \t * \n  381  \t * @param   Position       Either LEFT, CENTER or RIGHT.\n  ...\n  400  \t\n  401  \t/**\n  402: \t * Removes and destroys a button from the debugger.\n  403  \t * \n  404  \t * @param   Button         The FlxSystemButton instance to remove.\n  ...\n  481  \t}\n  482  \t\n  483: \t@:allow(flixel.system.debug)\n  484  \tfunction onMouseFocusLost():Void\n  485  \t{\n  ...\n  494  \t}\n  495  \n  496: \tinline function toggleDrawDebug():Void\n  497  \t{\n  498: \t\tFlxG.debugger.drawDebug = !FlxG.debugger.drawDebug;\n  499  \t}\n  500  \t\n  ...\n  516  }\n  517  \n  518: enum FlxDebuggerLayout\n  519  {\n  520  \tSTANDARD;\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/Tooltip.hx:\n    1: package flixel.system.debug;\n    2  \n    3  import flash.display.Bitmap;\n    .\n   12  \n   13  /**\n   14:  * Manages tooltips to be used within the debugger.\n   15   */\n   16  class Tooltip\n   ..\n   52  \n   53  /**\n   54:  * A generic, Flash-based tooltip class, created for use in FlxDebugger.\n   55   */\n   56  class TooltipOverlay extends Sprite\n   ..\n  122  \t\t_background = new Bitmap(new BitmapData(1, 1, true, BG_COLOR));\n  123  \t\t\n  124: \t\t_text = DebuggerUtil.createTextField(2, 1);\n  125  \t\t_text.alpha = TEXT_ALPHA;\n  126  \t\t_text.text = text;\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/VCR.hx:\n    1: package flixel.system.debug;\n    2  \n    3: #if FLX_DEBUG\n    4  import flash.display.BitmapData;\n    5  import flash.text.TextField;\n    6  import flixel.FlxG;\n    7  import flixel.system.ui.FlxSystemButton;\n    8: import flixel.system.debug.FlxDebugger.GraphicArrowRight;\n    9  #if FLX_RECORD\n   10  import flixel.util.FlxStringUtil;\n   11  #end\n   12  \n   13: @:bitmap(\"assets/images/debugger/buttons/open.png\")\n   14  private class GraphicOpen extends BitmapData {}\n   15  \n   16: @:bitmap(\"assets/images/debugger/buttons/pause.png\")\n   17  private class GraphicPause extends BitmapData {}\n   18  \n   19: @:bitmap(\"assets/images/debugger/buttons/record_off.png\") \n   20  private class GraphicRecordOff extends BitmapData {}\n   21  \n   22: @:bitmap(\"assets/images/debugger/buttons/record_on.png\")\n   23  private class GraphicRecordOn extends BitmapData {}\n   24  \n   25: @:bitmap(\"assets/images/debugger/buttons/restart.png\")\n   26  private class GraphicRestart extends BitmapData {}\n   27  \n   28: @:bitmap(\"assets/images/debugger/buttons/step.png\")\n   29  private class GraphicStep extends BitmapData {}\n   30  \n   31: @:bitmap(\"assets/images/debugger/buttons/stop.png\")\n   32  private class GraphicStop extends BitmapData {}\n   33  \n   34  /**\n   35:  * This class contains the record, stop, play, and step 1 frame buttons seen on the top edge of the debugger overlay.\n   36   */\n   37  class VCR\n   ..\n   45  \n   46  \t/**\n   47: \t * `true` if the pause happened via the debugger UI, `false` if it happened programmatically\n   48  \t * (or if the VCR is not paused at all right now).\n   49  \t */\n   ..\n   57  \n   58  \t/**\n   59: \t * Creates the \"VCR\" control panel for debugger pausing, stepping, and recording.\n   60  \t */\n   61: \tpublic function new(Debugger:FlxDebugger)\n   62  \t{\n   63: \t\trestartBtn = Debugger.addButton(CENTER, new GraphicRestart(0, 0), FlxG.resetState);\n   64  \t\t#if FLX_RECORD\n   65: \t\trecordBtn = Debugger.addButton(CENTER, new GraphicRecordOff(0, 0), FlxG.vcr.startRecording.bind(true));\n   66: \t\topenBtn = Debugger.addButton(CENTER, new GraphicOpen(0, 0), FlxG.vcr.onOpen);\n   67  \t\t#if !flash\n   68  \t\topenBtn.enabled = false;\n   ..\n   70  \t\t#end\n   71  \t\t#end\n   72: \t\tplaybackToggleBtn = Debugger.addButton(CENTER, new GraphicPause(0, 0), onManualPause);\n   73: \t\tstepBtn = Debugger.addButton(CENTER, new GraphicStep(0, 0), onStep);\n   74  \t\t\n   75  \t\t#if FLX_RECORD\n   76: \t\truntimeDisplay = DebuggerUtil.createTextField(0, -9);\n   77  \t\tupdateRuntime(0);\n   78  \t\t\n   79: \t\tvar runtimeBtn = Debugger.addButton(CENTER);\n   80  \t\truntimeBtn.addChild(runtimeDisplay);\n   81  \t\t#end\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/Window.hx:\n    1: package flixel.system.debug;\n    2  \n    3  import flash.display.Bitmap;\n    .\n   11  import flixel.FlxG;\n   12  import flixel.math.FlxMath;\n   13: import flixel.system.debug.FlxDebugger.GraphicCloseButton;\n   14  import flixel.system.ui.FlxSystemButton;\n   15  import flixel.util.FlxColor;\n   16  import flixel.util.FlxDestroyUtil;\n   17  \n   18: @:bitmap(\"assets/images/debugger/windowHandle.png\")\n   19  private class GraphicWindowHandle extends BitmapData {}\n   20  \n   21  /**\n   22:  * A generic, Flash-based window class, created for use in FlxDebugger.\n   23   */\n   24  class Window extends Sprite\n   ..\n   83  \t\n   84  \t/**\n   85: \t * Creates a new window object.  This Flash-based class is mainly (only?) used by FlxDebugger.\n   86  \t * \n   87  \t * @param   Title       The name of the window, displayed in the header bar.\n   ..\n  112  \t\t_background.y = _header.height;\n  113  \t\t\n  114: \t\t_title = DebuggerUtil.createTextField(2, -1);\n  115  \t\t_title.alpha = HEADER_ALPHA;\n  116  \t\t_title.text = Title;\n  ...\n  123  \t\tif (Icon != null)\n  124  \t\t{\n  125: \t\t\tDebuggerUtil.fixSize(Icon);\n  126  \t\t\tvar icon = new Bitmap(Icon);\n  127  \t\t\ticon.x = 5;\n  ...\n  134  \t\tif (_resizable)\n  135  \t\t{\n  136: \t\t\t_handle = new Bitmap(DebuggerUtil.fixSize(new GraphicWindowHandle(0, 0)));\n  137  \t\t\taddChild(_handle);\n  138  \t\t}\n  ...\n  437  \t{\n  438  \t\tdestroy();\n  439: \t\t#if FLX_DEBUG\n  440: \t\tFlxG.game.debugger.removeWindow(this);\n  441  \t\t#end\n  442  \t}\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/completion/CompletionHandler.hx:\n    1: package flixel.system.debug.completion;\n    2  \n    3  import openfl.events.KeyboardEvent;\n    .\n    9  \n   10  #if hscript\n   11: import flixel.system.debug.console.ConsoleUtil;\n   12  #end\n   13  \n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/completion/CompletionList.hx:\n    1: package flixel.system.debug.completion;\n    2  \n    3  import flixel.math.FlxMath;\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/completion/CompletionListEntry.hx:\n    1: package flixel.system.debug.completion;\n    2  \n    3  import openfl.display.Bitmap;\n    .\n   33  \t\tbackground.bitmapData = normalBitmapData;\n   34  \t\t\n   35: \t\tlabel = DebuggerUtil.createTextField();\n   36  \t\tlabel.x = GUTTER;\n   37  \t\taddChild(label);\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/completion/CompletionListScrollBar.hx:\n    1: package flixel.system.debug.completion;\n    2  \n    3  import flixel.math.FlxMath;\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/console/Console.hx:\n    1: package flixel.system.debug.console;\n    2  \n    3: #if FLX_DEBUG\n    4  import openfl.text.TextField;\n    5  import openfl.text.TextFormat;\n    6  import flixel.FlxG;\n    7  import flixel.FlxObject;\n    8: import flixel.system.debug.FlxDebugger.GraphicConsole;\n    9: import flixel.system.debug.completion.CompletionList;\n   10: import flixel.system.debug.completion.CompletionHandler;\n   11  import flixel.util.FlxStringUtil;\n   12  \n   ..\n   24  \n   25  /**\n   26:  * A powerful console for the flixel debugger screen with supports custom commands, registering \n   27   * objects and functions and saves the last 25 commands used. Inspired by Eric Smith's \"CoolConsole\".\n   28   * @see http://www.youtube.com/watch?v=QWfpw7elWk8\n   ..\n   88  \t\t\n   89  \t\t// Install commands\n   90: \t\t#if FLX_DEBUG\n   91  \t\tnew ConsoleCommands(this);\n   92  \t\t#end\n   ..\n   99  \t\tinput.embedFonts = true;\n  100  \t\tinput.defaultTextFormat = new TextFormat(\n  101: \t\t\tFlxAssets.FONT_DEBUGGER, 12, 0xFFFFFF, false, false, false);\n  102  \t\tinput.text = Console.DEFAULT_TEXT;\n  103  \t\tinput.width = _width - 4;\n  ...\n  120  \t\tFlxG.stage.addEventListener(KeyboardEvent.KEY_DOWN, function(e:KeyboardEvent)\n  121  \t\t{\n  122: \t\t\tif (FlxG.debugger.visible && FlxG.game.debugger.console.visible && e.keyCode == Keyboard.TAB)\n  123  \t\t\t\tFlxG.stage.focus = input;\n  124  \t\t});\n  ...\n  159  \tfunction onFocus(_)\n  160  \t{\n  161: \t\t#if FLX_DEBUG\n  162  \t\t// Pause game\n  163  \t\tif (FlxG.console.autoPause)\n  ...\n  177  \tfunction onFocusLost(_)\n  178  \t{\n  179: \t\t#if FLX_DEBUG\n  180  \t\t// Unpause game\n  181: \t\tif (FlxG.console.autoPause && !FlxG.game.debugger.vcr.manualPause)\n  182  \t\t\tFlxG.vcr.resume();\n  183  \t\t\n  ...\n  192  \t\t\n  193  \t\tcompletionList.close();\n  194: \t\tFlxG.game.debugger.onMouseFocusLost();\n  195  \t}\n  196  \t\n  ...\n  249  \t\t\t\n  250  \t\t\t// Step forward one frame to see the results of the command\n  251: \t\t\t#if FLX_DEBUG\n  252  \t\t\tif (FlxG.vcr.paused && FlxG.console.stepAfterCommand)\n  253: \t\t\t\tFlxG.game.debugger.vcr.onStep();\n  254  \t\t\t#end\n  255  \t\t\t\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/console/ConsoleCommands.hx:\n    1: package flixel.system.debug.console;\n    2  \n    3: #if FLX_DEBUG\n    4  import flixel.FlxG;\n    5  import flixel.FlxObject;\n    .\n   10  import flixel.math.FlxRect;\n   11  import flixel.util.FlxStringUtil;\n   12: import flixel.system.debug.FlxDebugger.FlxDebuggerLayout;\n   13  using StringTools;\n   14  \n   ..\n   26  \t\t\n   27  \t\tconsole.registerFunction(\"help\", help, \"Displays the help text of a registered object or function. See \\\"help\\\".\");\n   28: \t\tconsole.registerFunction(\"close\", close, \"Closes the debugger overlay.\");\n   29  \t\t\n   30: \t\tconsole.registerFunction(\"clearHistory\", _console.history.clear, \"Closes the debugger overlay.\");\n   31  \t\tconsole.registerFunction(\"clearLog\", FlxG.log.clear, \"Clears the command history.\");\n   32  \t\t\n   ..\n   47  \t\tconsole.registerFunction(\"watchExpression\", FlxG.watch.addExpression, \"Adds the specified expression to the watch window. Be sure any objects, functions, and classes used are registered!\");\n   48  \t\tconsole.registerFunction(\"watchMouse\", watchMouse, \"Adds the mouse coordinates to the watch window.\");\n   49: \t\tconsole.registerFunction(\"track\", FlxG.debugger.track, \"Adds a tracker window for the specified object or class.\");\n   50  \t\t\n   51  \t\t// Default classes to include\n   ..\n   68  \t\tconsole.registerClass(FlxRect);\n   69  \t\t\n   70: \t\tconsole.registerEnum(FlxDebuggerLayout);\n   71  \n   72  \t\tconsole.registerObject(\"selection\", null);\n   ..\n  105  \tinline function close():Void\n  106  \t{\n  107: \t\tFlxG.debugger.visible = false;\n  108  \t}\n  109  \t\n  ...\n  187  \t{\n  188  \t\tif (FlxG.vcr.paused)\n  189: \t\t\tFlxG.game.debugger.vcr.onStep();\n  190  \t}\n  191  }\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/console/ConsoleHistory.hx:\n    1: package flixel.system.debug.console;\n    2  \n    3  class ConsoleHistory\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/console/ConsoleUtil.hx:\n    1: package flixel.system.debug.console;\n    2  \n    3  import flixel.FlxG;\n    4: import flixel.system.debug.log.LogStyle;\n    5  using flixel.util.FlxStringUtil;\n    6  using flixel.util.FlxArrayUtil;\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/interaction/Interaction.hx:\n    1: package flixel.system.debug.interaction;\n    2  \n    3  import flash.display.BitmapData;\n    .\n   12  import flixel.math.FlxPoint;\n   13  import flixel.math.FlxRect;\n   14: import flixel.system.debug.FlxDebugger.GraphicInteractive;\n   15: import flixel.system.debug.Window;\n   16: import flixel.system.debug.interaction.tools.Eraser;\n   17: import flixel.system.debug.interaction.tools.Mover;\n   18: import flixel.system.debug.interaction.tools.Pointer;\n   19: import flixel.system.debug.interaction.tools.Tool;\n   20  import flixel.util.FlxDestroyUtil;\n   21  import flixel.util.FlxSpriteUtil;\n   ..\n   26  \n   27  /**\n   28:  * Adds a new functionality to Flixel debugger that allows any object\n   29   * on the screen to be dragged, moved or deleted while the game is\n   30   * still running.\n   ..\n   50  \tvar _wasMouseVisible:Bool;\n   51  \tvar _wasUsingSystemCursor:Bool;\n   52: \tvar _debuggerInteraction:Bool = false;\n   53  \tvar _flixelPointer:FlxPointer = new FlxPointer();\n   54  \t\n   ..\n   69  \t\t\n   70  \t\tFlxG.signals.postDraw.add(postDraw);\n   71: \t\tFlxG.debugger.visibilityChanged.add(handleDebuggerVisibilityChanged);\n   72  \t\t\n   73  \t\tFlxG.stage.addEventListener(MouseEvent.MOUSE_MOVE, updateMouse);\n   ..\n   77  \t\tFlxG.stage.addEventListener(KeyboardEvent.KEY_UP, handleKeyEvent);\n   78  \t\t\n   79: \t\t_container.addEventListener(MouseEvent.MOUSE_OVER, handleMouseInDebugger);\n   80: \t\t_container.addEventListener(MouseEvent.MOUSE_OUT, handleMouseInDebugger);\n   81  \t}\n   82  \t\n   83: \tfunction handleDebuggerVisibilityChanged():Void\n   84  \t{\n   85: \t\tif (FlxG.debugger.visible)\n   86  \t\t\tsaveSystemCursorInfo();\n   87  \t\telse\n   ..\n  127  \tfunction handleMouseClick(event:MouseEvent):Void \n  128  \t{\n  129: \t\t// Did the user click a debugger UI element instead of performing\n  130  \t\t// a click related to a tool?\n  131: \t\tif (event.type == MouseEvent.MOUSE_DOWN && belongsToDebugger(cast event.target))\n  132  \t\t\treturn;\n  133  \t\t\n  ...\n  141  \t}\n  142  \n  143: \tfunction belongsToDebugger(object:DisplayObject):Bool\n  144  \t{\n  145  \t\tif (object == null)\n  146  \t\t\treturn false;\n  147: \t\telse if (Std.is(object, FlxDebugger))\n  148  \t\t\treturn true;\n  149: \t\treturn belongsToDebugger(object.parent);\n  150  \t}\n  151  \t\n  152: \tfunction handleMouseInDebugger(event:MouseEvent):Void \n  153  \t{\n  154  \t\t// If we are not active, we don't really care about\n  155: \t\t// mouse events in the debugger.\n  156  \t\tif (!isActive())\n  157  \t\t\treturn;\n  158  \t\t\n  159  \t\tif (event.type == MouseEvent.MOUSE_OVER)\n  160: \t\t\t_debuggerInteraction = true;\n  161  \t\telse if (event.type == MouseEvent.MOUSE_OUT)\n  162: \t\t\t_debuggerInteraction = false;\n  163  \t\t\n  164  \t\tevent.stopPropagation();\n  ...\n  199  \t{\n  200  \t\tFlxG.signals.postDraw.remove(postDraw);\n  201: \t\tFlxG.debugger.visibilityChanged.remove(handleDebuggerVisibilityChanged);\n  202  \t\t\n  203  \t\tFlxG.stage.removeEventListener(MouseEvent.MOUSE_MOVE, updateMouse);\n  ...\n  209  \t\tif (_container != null)\n  210  \t\t{\n  211: \t\t\t_container.removeEventListener(MouseEvent.MOUSE_OVER, handleMouseInDebugger);\n  212: \t\t\t_container.removeEventListener(MouseEvent.MOUSE_OUT, handleMouseInDebugger);\n  213  \t\t}\n  214  \t\t\n  ...\n  229  \tpublic function isActive():Bool\n  230  \t{\n  231: \t\treturn FlxG.debugger.visible && visible;\n  232  \t}\n  233  \t\n  ...\n  261  \t}\n  262  \t\n  263: \tpublic function getDebugGraphics():Graphics\n  264  \t{\n  265  \t\tif (FlxG.renderBlit)\n  ...\n  269  \t\t}\n  270  \t\t\n  271: \t\t#if FLX_DEBUG\n  272: \t\treturn FlxG.camera.debugLayer.graphics;\n  273  \t\t#end\n  274  \t\t\n  ...\n  278  \tfunction drawItemsSelection():Void \n  279  \t{\n  280: \t\tvar gfx:Graphics = getDebugGraphics();\n  281  \t\tif (gfx == null)\n  282  \t\t\treturn;\n  ...\n  294  \t\t}\n  295  \t\t\n  296: \t\t// Draw the debug info to the main camera buffer.\n  297  \t\tif (FlxG.renderBlit)\n  298  \t\t\tFlxG.camera.buffer.draw(FlxSpriteUtil.flashGfxSprite);\n  ...\n  339  \t\t#if FLX_MOUSE\n  340  \t\t// Do we have an active tool and we are not interacting\n  341: \t\t// with the debugger (e.g. moving the cursor over the\n  342  \t\t// tools bar or the top bar)?\n  343: \t\tif (activeTool != null && !_debuggerInteraction)\n  344  \t\t{\n  345  \t\t\t// Yes, there is an active tool. Does it has a cursor of its own?\n  ...\n  372  \t\telse\n  373  \t\t{\n  374: \t\t\t// No active tool or we are using the debugger.\n  375  \t\t\t// Let's show the system cursor for navigation.\n  376  \t\t\tFlxG.mouse.useSystemCursor = true;\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/interaction/tools/Eraser.hx:\n    1: package flixel.system.debug.interaction.tools;\n    2  \n    3  import flash.display.BitmapData;\n    .\n    6  import flixel.FlxG;\n    7  import flixel.group.FlxGroup;\n    8: import flixel.system.debug.interaction.Interaction;\n    9  \n   10: @:bitmap(\"assets/images/debugger/buttons/eraser.png\") \n   11  class GraphicEraserTool extends BitmapData {}\n   12  \n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/interaction/tools/Mover.hx:\n    1: package flixel.system.debug.interaction.tools;\n    2  \n    3  import flash.display.BitmapData;\n    .\n    5  import flixel.FlxObject;\n    6  import flixel.math.FlxPoint;\n    7: import flixel.system.debug.interaction.Interaction;\n    8  \n    9: @:bitmap(\"assets/images/debugger/buttons/mover.png\") \n   10  class GraphicMoverTool extends BitmapData {}\n   11  \n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/interaction/tools/Pointer.hx:\n    1: package flixel.system.debug.interaction.tools;\n    2  \n    3  import flash.display.BitmapData;\n    .\n    7  import flixel.math.FlxPoint;\n    8  import flixel.math.FlxRect;\n    9: import flixel.system.debug.interaction.Interaction;\n   10  import flixel.util.FlxSpriteUtil;\n   11  using flixel.util.FlxArrayUtil;\n   12  \n   13: @:bitmap(\"assets/images/debugger/cursorCross.png\")\n   14  class GraphicCursorCross extends BitmapData {}\n   15  \n   ..\n  184  \toverride public function draw():Void \n  185  \t{\n  186: \t\tvar gfx:Graphics = _brain.getDebugGraphics();\n  187  \t\tif (gfx == null)\n  188  \t\t\treturn;\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/interaction/tools/Tool.hx:\n    1: package flixel.system.debug.interaction.tools;\n    2  \n    3  import flash.display.BitmapData;\n    4  import flash.display.Sprite;\n    5: import flixel.system.debug.interaction.Interaction;\n    6  import flixel.system.ui.FlxSystemButton;\n    7  import flixel.util.FlxDestroyUtil.IFlxDestroyable;\n    8  \n    9  /**\n   10:  * The base class of all tools in the interactive debug. \n   11   * \n   12   * @author Fernando Bevilacqua (dovyski@gmail.com)\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/log/BitmapLog.hx:\n    1: package flixel.system.debug.log;\n    2  \n    3: #if FLX_DEBUG\n    4  import flash.display.Bitmap;\n    5  import flash.display.BitmapData;\n    .\n   17  import flixel.util.FlxSpriteUtil;\n   18  import flixel.util.FlxStringUtil;\n   19: import flixel.system.debug.FlxDebugger.GraphicArrowLeft;\n   20: import flixel.system.debug.FlxDebugger.GraphicArrowRight;\n   21: import flixel.system.debug.FlxDebugger.GraphicBitmapLog;\n   22  using flixel.util.FlxBitmapDataUtil;\n   23  \n   24  /**\n   25:  * An output window that lets you paste BitmapData in the debugger overlay.\n   26   */\n   27  class BitmapLog extends Window\n   ..\n   90  \t\t_buttonLeft = new FlxSystemButton(new GraphicArrowLeft(0, 0), previous);\n   91  \n   92: \t\t_dimensionsText = DebuggerUtil.createTextField();\n   93  \n   94: \t\t_counterText = DebuggerUtil.createTextField(0, -3);\n   95  \t\t_counterText.text = \"0/0\";\n   96  \n   ..\n  120  \t\taddChild(_footer);\n  121  \n  122: \t\t_footerText = DebuggerUtil.createTextField();\n  123  \t\taddChild(_footerText);\n  124  \t}\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/log/Log.hx:\n    1: package flixel.system.debug.log;\n    2  \n    3: #if FLX_DEBUG\n    4  import flash.text.TextField;\n    5  import flash.text.TextFormat;\n    6: import flixel.system.debug.FlxDebugger.GraphicLog;\n    7  \n    8  /**\n    9:  * A simple trace output window for use in the debugger overlay.\n   10   */\n   11  class Log extends Window\n   ..\n   31  \t\t_text.selectable = true;\n   32  \t\t_text.embedFonts = true;\n   33: \t\t_text.defaultTextFormat = new TextFormat(FlxAssets.FONT_DEBUGGER, 12, 0xffffff);\n   34  \t\taddChild(_text);\n   35  \t\t\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/log/LogStyle.hx:\n    1: package flixel.system.debug.log;\n    2  \n    3  /**\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/stats/Stats.hx:\n    1: package flixel.system.debug.stats;\n    2  \n    3  import flash.display.BitmapData;\n    .\n    8  import flixel.system.FlxLinkedList;\n    9  import flixel.system.FlxQuadTree;\n   10: import flixel.system.debug.DebuggerUtil;\n   11: import flixel.system.debug.FlxDebugger.GraphicStats;\n   12  import flixel.system.ui.FlxSystemButton;\n   13  import flixel.util.FlxColor;\n   14  \n   15: @:bitmap(\"assets/images/debugger/buttons/minimize.png\")\n   16  private class GraphicMinimizeButton extends BitmapData {}\n   17  \n   18: @:bitmap(\"assets/images/debugger/buttons/maximize.png\")\n   19  private class GraphicMaximizeButton extends BitmapData {}\n   20  \n   21  /**\n   22:  * A simple performance monitor widget, for use in the debugger overlay.\n   23   * \n   24   * @author Adam \"Atomic\" Saltsman\n   25   * @author Anton Karlov\n   26   */\n   27: #if FLX_DEBUG\n   28  class Stats extends Window\n   29  {\n   ..\n   92  \t\n   93  \t/**\n   94: \t * Creates a new window with fps and memory graphs, as well as other useful stats for debugging.\n   95  \t */\n   96  \tpublic function new()\n   ..\n  151  \t\taddChild(drawTimeGraph);\n  152  \t\t\n  153: \t\taddChild(_leftTextField = DebuggerUtil.createTextField(gutter, (graphHeight * 2) + 45, LABEL_COLOR, TEXT_SIZE));\n  154: \t\taddChild(_rightTextField = DebuggerUtil.createTextField(gutter + 70, (graphHeight * 2) + 45, FlxColor.WHITE, TEXT_SIZE));\n  155  \t\t\n  156  \t\t_leftTextField.multiline = _rightTextField.multiline = true;\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/stats/StatsGraph.hx:\n    1: package flixel.system.debug.stats;\n    2  \n    3  import flash.display.Graphics;\n    .\n   13   * This is a helper function for the stats window to draw a graph with given values.\n   14   */\n   15: #if FLX_DEBUG\n   16  class StatsGraph extends Sprite\n   17  {\n   ..\n   54  \t\t_axis.x = _labelWidth + 10;\n   55  \t\t\n   56: \t\tmaxLabel = DebuggerUtil.createTextField(0, 0, Stats.LABEL_COLOR, Stats.TEXT_SIZE);\n   57: \t\tcurLabel = DebuggerUtil.createTextField(0, (_height / 2) - (Stats.TEXT_SIZE / 2), graphColor, Stats.TEXT_SIZE);\n   58: \t\tminLabel = DebuggerUtil.createTextField(0, _height - Stats.TEXT_SIZE, Stats.LABEL_COLOR, Stats.TEXT_SIZE);\n   59  \t\t\n   60: \t\tavgLabel = DebuggerUtil.createTextField(_labelWidth + 20, (_height / 2) - (Stats.TEXT_SIZE / 2) - 10, Stats.LABEL_COLOR, Stats.TEXT_SIZE);\n   61  \t\tavgLabel.width = _width;\n   62  \t\tavgLabel.defaultTextFormat.align = TextFormatAlign.CENTER;\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/watch/EditableTextField.hx:\n    1: package flixel.system.debug.watch;\n    2  \n    3  import flixel.math.FlxMath;\n    .\n  114  \n  115  \t\tvalue += modifier;\n  116: \t\tvalue = FlxMath.roundDecimal(value, FlxG.debugger.precision);\n  117  \t\ttext = Std.string(value);\n  118  \t}\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/watch/Tracker.hx:\n    1: package flixel.system.debug.watch;\n    2  \n    3: #if FLX_DEBUG\n    4  import flash.display.DisplayObject;\n    5  import flash.geom.Matrix;\n    .\n   37  class Tracker extends Watch\n   38  {\n   39: \t#if FLX_DEBUG\n   40  \t/**\n   41  \t * Order matters here, as the last profile is the most relevant - i.e., if the \n   ..\n  239  \tpublic function toString():String\n  240  \t{\n  241: \t\treturn FlxStringUtil.getDebugString([\n  242  \t\t\tLabelValuePair.weak(\"variables\", variables),\n  243  \t\t\tLabelValuePair.weak(\"extensions\", extensions)]);\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/watch/Watch.hx:\n    1: package flixel.system.debug.watch;\n    2  \n    3  import flixel.FlxG;\n    4  import flixel.math.FlxPoint;\n    5: import flixel.system.debug.FlxDebugger.GraphicWatch;\n    6  import openfl.display.Sprite;\n    7  using flixel.util.FlxStringUtil;\n    .\n    9  \n   10  /**\n   11:  * A Visual Studio-style \"watch\" window, for use in the debugger overlay.\n   12   * Track the values of any public variable in real-time, and/or edit their values on the fly.\n   13   */\n   14  class Watch extends Window\n   15  {\n   16: \t#if FLX_DEBUG\n   17  \tstatic inline var LINE_HEIGHT:Int = 15;\n   18  \t\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/watch/WatchEntry.hx:\n    1: package flixel.system.debug.watch;\n    2  \n    3  import flixel.math.FlxMath;\n    4  import flixel.system.FlxAssets;\n    5: import flixel.system.debug.FlxDebugger.GraphicCloseButton;\n    6  import flixel.system.ui.FlxSystemButton;\n    7  import flixel.util.FlxColor;\n    .\n   15  \n   16  #if hscript\n   17: import flixel.system.debug.console.ConsoleUtil;\n   18  #end\n   19  \n   ..\n   39  \t\tthis.data = data;\n   40  \n   41: \t\tdefaultFormat = new TextFormat(FlxAssets.FONT_DEBUGGER, 12, getTextColor());\n   42: \t\tnameText = initTextField(DebuggerUtil.createTextField());\n   43  \t\tvar expectedType = Type.typeof(getValue());\n   44: \t\tvalueText = initTextField(DebuggerUtil.initTextField(\n   45  \t\t\tnew EditableTextField(data.match(FIELD(_, _)), defaultFormat, submitValue, expectedType)));\n   46  \n   ..\n  128  \t\tvar value:Dynamic = getValue();\n  129  \t\tif (Std.is(value, Float))\n  130: \t\t\tvalue = FlxMath.roundDecimal(cast value, FlxG.debugger.precision);\n  131  \t\treturn Std.string(value);\n  132  \t}\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/debug/watch/WatchEntryData.hx:\n    1: package flixel.system.debug.watch;\n    2  \n    3  #if hscript\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/frontEnds/BitmapLogFrontEnd.hx:\n    8  \tpublic inline function add(Data:BitmapData, Name:String = \"\"):Void\n    9  \t{\n   10: \t\t#if FLX_DEBUG\n   11: \t\tFlxG.game.debugger.bitmapLog.add(Data, Name);\n   12  \t\t#end\n   13  \t}\n   ..\n   18  \tpublic inline function clear():Void\n   19  \t{\n   20: \t\t#if FLX_DEBUG\n   21: \t\tFlxG.game.debugger.bitmapLog.clear();\n   22  \t\t#end\n   23  \t}\n   ..\n   29  \tpublic inline function clearAt(Index:Int = -1):Void \n   30  \t{\n   31: \t\t#if FLX_DEBUG\n   32: \t\tFlxG.game.debugger.bitmapLog.clearAt(Index);\n   33  \t\t#end\n   34  \t}\n   ..\n   39  \tpublic function viewCache():Void\n   40  \t{\n   41: \t\t#if FLX_DEBUG\n   42  \t\tclear();\n   43  \t\tfor (cachedGraphic in FlxG.bitmap._cache)\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/frontEnds/CameraFrontEnd.hx:\n  193  \t\t\t\tcamera.clearDrawStack();\n  194  \t\t\t\tcamera.canvas.graphics.clear();\n  195: \t\t\t\t// Clearing camera's debug sprite\n  196: \t\t\t\t#if FLX_DEBUG\n  197: \t\t\t\tcamera.debugLayer.graphics.clear();\n  198  \t\t\t\t#end\n  199  \t\t\t}\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/frontEnds/ConsoleFrontEnd.hx:\n   26  \tpublic inline function registerFunction(FunctionAlias:String, Function:Dynamic):Void\n   27  \t{\n   28: \t\t#if FLX_DEBUG\n   29: \t\tFlxG.game.debugger.console.registerFunction(FunctionAlias, Function);\n   30  \t\t#end\n   31  \t}\n   ..\n   39  \tpublic inline function registerObject(ObjectAlias:String, AnyObject:Dynamic):Void\n   40  \t{\n   41: \t\t#if FLX_DEBUG\n   42: \t\tFlxG.game.debugger.console.registerObject(ObjectAlias, AnyObject);\n   43  \t\t#end\n   44  \t}\n   ..\n   51  \tpublic inline function registerClass(cl:Class<Dynamic>):Void\n   52  \t{\n   53: \t\t#if FLX_DEBUG\n   54: \t\tFlxG.game.debugger.console.registerClass(cl);\n   55  \t\t#end\n   56  \t}\n   ..\n   64  \tpublic inline function registerEnum(e:Enum<Dynamic>):Void\n   65  \t{\n   66: \t\t#if FLX_DEBUG\n   67: \t\tFlxG.game.debugger.console.registerEnum(e);\n   68  \t\t#end\n   69  \t}\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/frontEnds/DebuggerFrontEnd.hx:\n    4  import flixel.FlxG;\n    5  import flixel.input.keyboard.FlxKey;\n    6: import flixel.system.debug.FlxDebugger.FlxDebuggerLayout;\n    7: import flixel.system.debug.Window;\n    8: import flixel.system.debug.watch.Tracker;\n    9  import flixel.system.ui.FlxSystemButton;\n   10  import flixel.util.FlxHorizontalAlign;\n   ..\n   13  using flixel.util.FlxArrayUtil;\n   14  \n   15: class DebuggerFrontEnd\n   16  {\t\n   17  \t/**\n   18: \t * The amount of decimals Floats are rounded to in the debugger.\n   19  \t */\n   20  \tpublic var precision:Int = 3; \n   ..\n   22  \t#if FLX_KEYBOARD\n   23  \t/**\n   24: \t * The key codes used to toggle the debugger (see FlxG.keys for the keys available).\n   25  \t * Default keys: F2, ` and \\. Set to null to deactivate.\n   26  \t */\n   ..\n   31  \t * Whether to draw the hitboxes of FlxObjects.\n   32  \t */\n   33: \tpublic var drawDebug(default, set):Bool = false;\n   34  \t/**\n   35: \t * Dispatched when `drawDebug` is changed.\n   36  \t */\n   37: \tpublic var drawDebugChanged(default, null):FlxSignal = new FlxSignal();\n   38  \t/**\n   39  \t * Dispatched when `visible` is changed.\n   ..\n   45  \t\n   46  \t/**\n   47: \t * Change the way the debugger's windows are laid out.\n   48  \t * \n   49: \t * @param\tLayout\tThe layout codes can be found in FlxDebugger, for example FlxDebugger.MICRO\n   50  \t */\n   51: \tpublic inline function setLayout(Layout:FlxDebuggerLayout):Void\n   52  \t{\n   53: \t\t#if FLX_DEBUG\n   54: \t\tFlxG.game.debugger.setLayout(Layout);\n   55  \t\t#end\n   56  \t}\n   57  \t\n   58  \t/**\n   59: \t * Just resets the debugger windows to whatever the last selected layout was (STANDARD by default).\n   60  \t */\n   61  \tpublic inline function resetLayout():Void\n   62  \t{\n   63: \t\t#if FLX_DEBUG\n   64: \t\tFlxG.game.debugger.resetLayout();\n   65  \t\t#end\n   66  \t}\n   67  \t\n   68  \t/**\n   69: \t * Create and add a new debugger button.\n   70  \t * \n   71  \t * @param   Position       Either LEFT, CENTER or RIGHT.\n   ..\n   78  \tpublic function addButton(Alignment:FlxHorizontalAlign, Icon:BitmapData, UpHandler:Void->Void, ToggleMode:Bool = false, UpdateLayout:Bool = true):FlxSystemButton\n   79  \t{\n   80: \t\t#if FLX_DEBUG\n   81: \t\treturn FlxG.game.debugger.addButton(Alignment, Icon, UpHandler, ToggleMode, UpdateLayout);\n   82  \t\t#else\n   83  \t\treturn null;\n   ..\n   94  \tpublic function track(ObjectOrClass:Dynamic, ?WindowTitle:String):Window\n   95  \t{\n   96: \t\t#if FLX_DEBUG\n   97  \t\tif (Tracker.objectsBeingTracked.contains(ObjectOrClass))\n   98  \t\t\treturn null;\n   ..\n  106  \t\t}\n  107  \t\telse \n  108: \t\t\treturn FlxG.game.debugger.addWindow(new Tracker(profile, ObjectOrClass, WindowTitle));\n  109  \t\t#end\n  110  \t\treturn null;\n  ...\n  118  \tpublic inline function addTrackerProfile(Profile:TrackerProfile):Void\n  119  \t{\n  120: \t\t#if FLX_DEBUG\n  121  \t\tTracker.addProfile(Profile);\n  122  \t\t#end\n  ...\n  124  \t\n  125  \t/**\n  126: \t * Removes and destroys a button from the debugger.\n  127  \t * \n  128  \t * @param\tButton\t\t\tThe FlxSystemButton instance to remove.\n  ...\n  131  \tpublic function removeButton(Button:FlxSystemButton, UpdateLayout:Bool = true):Void\n  132  \t{\n  133: \t\t#if FLX_DEBUG\n  134: \t\tFlxG.game.debugger.removeButton(Button, UpdateLayout);\n  135  \t\t#end\n  136  \t}\n  ...\n  139  \tfunction new() {}\n  140  \t\n  141: \tfunction set_drawDebug(Value:Bool):Bool\n  142  \t{\n  143: \t\tif (drawDebug == Value)\n  144: \t\t\treturn drawDebug;\n  145  \t\n  146: \t\tdrawDebug = Value;\n  147: \t\t#if FLX_DEBUG\n  148: \t\tdrawDebugChanged.dispatch();\n  149  \t\t#end\n  150: \t\treturn drawDebug;\n  151  \t}\n  152  \t\n  ...\n  159  \t\tvisible = Value;\n  160  \t\n  161: \t\t#if FLX_DEBUG\n  162: \t\tFlxG.game.debugger.visible = Value;\n  163  \t\t\n  164: \t\t// if the debugger is non-visible, then we need to focus on game sprite, \n  165  \t\t// so the game still will be able to capture key presses\n  166  \t\tif (!Value)\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/frontEnds/LogFrontEnd.hx:\n    2  \n    3  import flixel.FlxG;\n    4: import flixel.system.debug.log.LogStyle;\n    5  import flixel.system.FlxAssets;\n    6  import haxe.Log;\n    .\n   18  \tpublic inline function add(Data:Dynamic):Void\n   19  \t{\n   20: \t\t#if FLX_DEBUG\n   21  \t\tadvanced(Data, LogStyle.NORMAL); \n   22  \t\t#end\n   ..\n   25  \tpublic inline function warn(Data:Dynamic):Void\n   26  \t{\n   27: \t\t#if FLX_DEBUG\n   28  \t\tadvanced(Data, LogStyle.WARNING, true); \n   29  \t\t#end\n   ..\n   32  \tpublic inline function error(Data:Dynamic):Void\n   33  \t{\n   34: \t\t#if FLX_DEBUG\n   35  \t\tadvanced(Data, LogStyle.ERROR, true); \n   36  \t\t#end\n   ..\n   39  \tpublic inline function notice(Data:Dynamic):Void\n   40  \t{\n   41: \t\t#if FLX_DEBUG\n   42  \t\tadvanced(Data, LogStyle.NOTICE); \n   43  \t\t#end\n   ..\n   45  \t\n   46  \t/**\n   47: \t * Add an advanced log message to the debugger by also specifying a LogStyle. Backend to FlxG.log.add(), FlxG.log.warn(), FlxG.log.error() and FlxG.log.notice().\n   48  \t * \n   49  \t * @param\tData  \t\tAny Data to log.\n   ..\n   53  \tpublic function advanced(Data:Dynamic, ?Style:LogStyle, FireOnce:Bool = false):Void\n   54  \t{\n   55: \t\t#if FLX_DEBUG\n   56: \t\tif (FlxG.game.debugger == null)\n   57  \t\t{\n   58  \t\t\t_standardTraceFunction(Data);\n   ..\n   70  \t\t}\n   71  \t\t\n   72: \t\tif (FlxG.game.debugger.log.add(Data, Style, FireOnce))\n   73  \t\t{\n   74  \t\t\t#if (FLX_SOUND_SYSTEM && !FLX_UNIT_TEST)\n   ..\n   85  \t\t\tif (Style.openConsole) \n   86  \t\t\t{\n   87: \t\t\t\tFlxG.debugger.visible = true;\n   88  \t\t\t}\n   89  \t\t\t\n   ..\n  101  \tpublic inline function clear():Void\n  102  \t{\n  103: \t\t#if FLX_DEBUG\n  104: \t\tFlxG.game.debugger.log.clear();\n  105  \t\t#end\n  106  \t}\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/frontEnds/VCRFrontEnd.hx:\n   30  \tpublic var replayCallback:Void->Void;\n   31  \t/**\n   32: \t * The keys used to toggle the debugger. \"MOUSE\" to cancel with the mouse.\n   33  \t * Handy for skipping cutscenes or getting out of attract modes!\n   34  \t */\n   ..\n   45  \n   46  \t/**\n   47: \t * Whether the debugger has been paused.\n   48  \t */\n   49  \tpublic var paused:Bool = false;\n   ..\n   67  \t\t\tpaused = true;\n   68  \t\t\t\n   69: \t\t\t#if FLX_DEBUG\n   70: \t\t\tFlxG.game.debugger.vcr.onPause();\n   71  \t\t\t#end\n   72  \t\t}\n   ..\n   87  \t\t\tpaused = false;\n   88  \t\t\t\n   89: \t\t\t#if FLX_DEBUG\n   90: \t\t\tFlxG.game.debugger.vcr.onResume();\n   91  \t\t\t#end\n   92  \t\t}\n   ..\n   98  \t * If Alt is NOT pressed, only the current state is reset. The GUI is updated accordingly.\n   99  \t * \n  100: \t * @param\tStandardMode\tWhether to reset the current game (== true), or just the current state.  Just resetting the current state can be very handy for debugging.\n  101  \t */\n  102  \tpublic function restartReplay(StandardMode:Bool = false):Void\n  ...\n  141  \t\t#end\n  142  \t\t\n  143: \t\t#if FLX_DEBUG\n  144: \t\tFlxG.game.debugger.vcr.runtime = 0;\n  145: \t\tFlxG.game.debugger.vcr.playingReplay();\n  146  \t\t#end\n  147  \t}\n  ...\n  177  \t\tFlxG.inputs.reset();\n  178  \t\t\n  179: \t\t#if FLX_DEBUG\n  180: \t\tFlxG.game.debugger.vcr.stoppedReplay();\n  181  \t\t#end\n  182  \t\t\n  ...\n  222  \t\t\n  223  \t\tFlxG.game._recordingRequested = true;\n  224: \t\t#if FLX_DEBUG\n  225: \t\tFlxG.game.debugger.vcr.recording();\n  226  \t\t#end\n  227  \t}\n  ...\n  238  \t\tFlxG.game.recording = false;\n  239  \t\t\n  240: \t\t#if FLX_DEBUG\n  241: \t\tFlxG.game.debugger.vcr.stoppedRecording();\n  242: \t\tFlxG.game.debugger.vcr.stoppedReplay();\n  243  \t\t#end\n  244  \t\t\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/frontEnds/WatchFrontEnd.hx:\n    4  \n    5  #if hscript\n    6: import flixel.system.debug.console.ConsoleUtil;\n    7  #end\n    8  \n    .\n   12  \n   13  \t/**\n   14: \t * Add a variable to the watch list in the debugger.\n   15  \t * This lets you see the value of the variable all the time.\n   16  \t * \n   ..\n   21  \tpublic inline function add(object:Dynamic, field:String, ?displayName:String):Void\n   22  \t{\n   23: \t\t#if FLX_DEBUG\n   24: \t\tFlxG.game.debugger.watch.add(displayName, FIELD(object, field));\n   25  \t\t#end\n   26  \t}\n   27  \t\n   28  \t/**\n   29: \t * Remove a variable from the watch list in the debugger.\n   30  \t * \n   31  \t * @param\tobject\tA reference to any object in your game, e.g. Player or Robot or this.\n   ..\n   34  \tpublic inline function remove(object:Dynamic, field:String):Void\n   35  \t{\n   36: \t\t#if FLX_DEBUG\n   37: \t\tFlxG.game.debugger.watch.remove(null, FIELD(object, field));\n   38  \t\t#end\n   39  \t}\n   40  \t\n   41  \t/**\n   42: \t * Add or update a quickWatch entry to the watch list in the debugger.\n   43  \t * Extremely useful when called in update() functions when there \n   44  \t * doesn't exist a variable for a value you want to watch - so you won't have to create one.\n   ..\n   49  \tpublic inline function addQuick(displayName:String, value:Dynamic):Void\n   50  \t{\n   51: \t\t#if FLX_DEBUG\n   52: \t\tFlxG.game.debugger.watch.add(displayName, QUICK(Std.string(value)));\n   53  \t\t#end\n   54  \t}\n   55  \t\n   56  \t/**\n   57: \t * Remove a quickWatch entry from the watch list of the debugger.\n   58  \t * \n   59  \t * @param\tdisplayName\tThe name of the quickWatch entry you want to remove.\n   ..\n   61  \tpublic inline function removeQuick(displayName:String):Void\n   62  \t{\n   63: \t\t#if FLX_DEBUG\n   64: \t\tFlxG.game.debugger.watch.remove(displayName, QUICK(null));\n   65  \t\t#end\n   66  \t}\n   67  \t\n   68  \t/**\n   69: \t * Add an expression to the watch list in the debugger.\n   70  \t * The expression gets evaluated with hscript, and you can see its current value all the time.\n   71  \t * \n   ..\n   76  \tpublic function addExpression(expression:String, ?displayName:String):Void\n   77  \t{\n   78: \t\t#if FLX_DEBUG\n   79  \t\tvar parsedExpr = null;\n   80  \t\t#if hscript\n   81  \t\tparsedExpr = ConsoleUtil.parseCommand(expression);\n   82  \t\t#end\n   83: \t\tFlxG.game.debugger.watch.add(displayName == null ? expression : displayName, EXPRESSION(expression, parsedExpr));\n   84  \t\t#end\n   85  \t}\n   86  \t\n   87  \t/**\n   88: \t * Remove an expression from the watch list in the debugger.\n   89  \t * \n   90  \t * @param   displayName   The display name of the registered expression, if you supplied one, or the Haxe expression that you want to remove, in string form.\n   ..\n   93  \tpublic function removeExpression(displayName:String):Void\n   94  \t{\n   95: \t\t#if FLX_DEBUG\n   96: \t\tFlxG.game.debugger.watch.remove(displayName, null);\n   97  \t\t#end\n   98  \t}\n   ..\n  104  \tpublic inline function addMouse():Void\n  105  \t{\n  106: \t\t#if FLX_DEBUG\n  107  \t\tadd(FlxG, \"mouse\", \"Mouse Position\");\n  108  \t\t#end\n  ...\n  114  \tpublic inline function removeMouse():Void\n  115  \t{\n  116: \t\t#if FLX_DEBUG\n  117  \t\tremove(FlxG, \"mouse\");\n  118  \t\t#end\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/macros/FlxDefines.hx:\n   18  \tFLX_NO_SOUND_TRAY;\n   19  \tFLX_NO_FOCUS_LOST_SCREEN;\n   20: \tFLX_NO_DEBUG;\n   21  \tFLX_RECORD;\n   22  \tFLX_UNIT_TEST;\n   ..\n   38  \tFLX_SOUND_SYSTEM;\n   39  \tFLX_FOCUS_LOST_SCREEN;\n   40: \tFLX_DEBUG;\n   41  \t\n   42  \tFLX_MOUSE_ADVANCED;\n   ..\n  122  \t\tdefineInversion(FLX_NO_SOUND_SYSTEM, FLX_SOUND_SYSTEM);\n  123  \t\tdefineInversion(FLX_NO_FOCUS_LOST_SCREEN, FLX_FOCUS_LOST_SCREEN);\n  124: \t\tdefineInversion(FLX_NO_DEBUG, FLX_DEBUG);\n  125  \t}\n  126  \n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/replay/FlxReplay.hx:\n   90  \t * Load replay data from a String object.\n   91  \t * Strings can come from embedded assets or external\n   92: \t * files loaded through the debugger overlay. \n   93  \t * @param\tFileContents\tA String object containing a gameplay recording.\n   94  \t */\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/system/ui/FlxSystemButton.hx:\n    5  import flash.display.Sprite;\n    6  import flash.events.MouseEvent;\n    7: import flixel.system.debug.DebuggerUtil;\n    8  import flixel.util.FlxDestroyUtil.IFlxDestroyable;\n    9  \n   10  /**\n   11: * A basic button for the debugger, extends flash.display.Sprite.\n   12  * Cannot be used in a FlxState.\n   13  */\n   ..\n   79  \t\t\tremoveChild(_icon);\n   80  \t\t\n   81: \t\tDebuggerUtil.fixSize(Icon);\n   82  \t\t_icon = new Bitmap(Icon);\n   83  \t\taddChild(_icon);\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/text/FlxBitmapText.hx:\n  442  \t\t\t\t}\n  443  \t\t\t\t\n  444: \t\t\t\t#if FLX_DEBUG\n  445  \t\t\t\tFlxBasic.visibleCount++;\n  446  \t\t\t\t#end\n  447  \t\t\t}\n  448  \t\t\t\n  449: \t\t\t#if FLX_DEBUG\n  450: \t\t\tif (FlxG.debugger.drawDebug)\n  451  \t\t\t{\n  452: \t\t\t\tdrawDebug();\n  453  \t\t\t}\n  454  \t\t\t#end\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/tile/FlxTilemap.hx:\n  124  \tvar _scaledTileHeight:Float = 0;\n  125  \t\n  126: \t#if FLX_DEBUG\n  127: \tvar _debugTileNotSolid:BitmapData;\n  128: \tvar _debugTilePartial:BitmapData;\n  129: \tvar _debugTileSolid:BitmapData;\n  130: \tvar _debugRect:Rectangle;\n  131  \t#end\n  132  \t\n  ...\n  164  \t\tFlxG.cameras.cameraResized.add(onCameraChanged);\n  165  \t\t\n  166: \t\t#if FLX_DEBUG\n  167: \t\tdebugBoundingBoxColorSolid = FlxColor.GREEN;\n  168: \t\tdebugBoundingBoxColorPartial = FlxColor.PINK;\n  169: \t\tdebugBoundingBoxColorNotSolid = FlxColor.TRANSPARENT;\n  170  \n  171  \t\tif (FlxG.renderBlit)\n  172: \t\t\tFlxG.debugger.drawDebugChanged.add(onDrawDebugChanged);\n  173  \t\t#end\n  174  \t}\n  ...\n  187  \t\tif (FlxG.renderBlit)\n  188  \t\t{\n  189: \t\t\t#if FLX_DEBUG\n  190: \t\t\t_debugRect = null;\n  191: \t\t\t_debugTileNotSolid = FlxDestroyUtil.dispose(_debugTileNotSolid);\n  192: \t\t\t_debugTilePartial = FlxDestroyUtil.dispose(_debugTilePartial);\n  193: \t\t\t_debugTileSolid = FlxDestroyUtil.dispose(_debugTileSolid);\n  194  \t\t\t#end\n  195  \t\t}\n  ...\n  214  \t\tFlxG.cameras.cameraResized.remove(onCameraChanged);\n  215  \t\t\n  216: \t\t#if FLX_DEBUG\n  217  \t\tif (FlxG.renderBlit)\n  218: \t\t\tFlxG.debugger.drawDebugChanged.remove(onDrawDebugChanged);\n  219  \t\t#end\n  220  \t\t\n  ...\n  289  \t\t\t_tileObjects[i] = new FlxTile(this, i, _tileWidth, _tileHeight, (i >= _drawIndex), (i >= _collideIndex) ? allowCollisions : FlxObject.NONE);\n  290  \t\t\n  291: \t\t// Create debug tiles for rendering bounding boxes on demand\n  292: \t\t#if FLX_DEBUG\n  293: \t\tupdateDebugTileBoundingBoxSolid();\n  294: \t\tupdateDebugTileBoundingBoxNotSolid();\n  295: \t\tupdateDebugTileBoundingBoxPartial();\n  296  \t\t#end\n  297  \t}\n  298  \t\n  299: \t#if FLX_DEBUG\n  300: \tfunction updateDebugTileBoundingBoxSolid():Void \n  301  \t{\n  302: \t\t_debugTileSolid = updateDebugTile(_debugTileSolid, debugBoundingBoxColorSolid);\n  303  \t}\n  304  \t\n  305: \tfunction updateDebugTileBoundingBoxNotSolid():Void \n  306  \t{\n  307: \t\t_debugTileNotSolid = updateDebugTile(_debugTileNotSolid, debugBoundingBoxColorNotSolid);\n  308  \t}\n  309  \t\n  310: \tfunction updateDebugTileBoundingBoxPartial():Void \n  311  \t{\n  312: \t\t_debugTilePartial = updateDebugTile(_debugTilePartial, debugBoundingBoxColorPartial);\n  313  \t}\n  314  \t\n  315: \tfunction updateDebugTile(tileBitmap:BitmapData, color:FlxColor):BitmapData\n  316  \t{\n  317  \t\tif (FlxG.renderTile)\n  ...\n  325  \n  326  \t\tif (tileBitmap == null)\n  327: \t\t\ttileBitmap = makeDebugTile(color);\n  328  \t\telse\n  329  \t\t{\n  330  \t\t\ttileBitmap.fillRect(tileBitmap.rect, FlxColor.TRANSPARENT);\n  331: \t\t\tdrawDebugTile(tileBitmap, color);\n  332  \t\t}\n  333  \n  ...\n  349  \toverride function updateMap():Void \n  350  \t{\n  351: \t\t#if FLX_DEBUG\n  352  \t\tif (FlxG.renderBlit)\n  353: \t\t\t_debugRect = new Rectangle(0, 0, _tileWidth, _tileHeight);\n  354  \t\t#end\n  355  \t\t\n  ...\n  359  \t}\n  360  \t\n  361: \t#if FLX_DEBUG\n  362: \toverride public function drawDebugOnCamera(Camera:FlxCamera):Void\n  363  \t{\n  364  \t\tif (!FlxG.renderTile)\n  ...\n  417  \t\t\t\t\trect.x = _helperPoint.x + (columnIndex % widthInTiles) * rectWidth;\n  418  \t\t\t\t\trect.y = _helperPoint.y + Math.floor(columnIndex / widthInTiles) * rectHeight;\n  419: \t\t\t\t\tdrawDebugBoundingBox(Camera.debugLayer.graphics, rect,\n  420  \t\t\t\t\t\ttile.allowCollisions, tile.allowCollisions != FlxObject.ANY);\n  421  \t\t\t\t}\n  ...\n  494  \t\t\t}\n  495  \t\t\t\n  496: \t\t\t#if FLX_DEBUG\n  497  \t\t\tFlxBasic.visibleCount++;\n  498  \t\t\t#end\n  499  \t\t}\n  500  \t\t\n  501: \t\t#if FLX_DEBUG\n  502: \t\tif (FlxG.debugger.drawDebug)\n  503: \t\t\tdrawDebug();\n  504  \t\t#end\n  505  \t}\n  ...\n  931  \t\tvar frame:FlxFrame;\n  932  \t\t\n  933: \t\t#if FLX_DEBUG\n  934: \t\tvar debugTile:BitmapData;\n  935  \t\t#end\n  936  \t\t\n  ...\n  952  \t\t\t\t\t\tframe.paint(Buffer.pixels, _flashPoint, true);\n  953  \t\t\t\t\t\t\n  954: \t\t\t\t\t\t#if FLX_DEBUG\n  955: \t\t\t\t\t\tif (FlxG.debugger.drawDebug && !ignoreDrawDebug) \n  956  \t\t\t\t\t\t{\n  957  \t\t\t\t\t\t\tif (tile.allowCollisions <= FlxObject.NONE)\n  958  \t\t\t\t\t\t\t{\n  959: \t\t\t\t\t\t\t\tdebugTile = _debugTileNotSolid; \n  960  \t\t\t\t\t\t\t}\n  961  \t\t\t\t\t\t\telse if (tile.allowCollisions != FlxObject.ANY)\n  962  \t\t\t\t\t\t\t{\n  963: \t\t\t\t\t\t\t\tdebugTile = _debugTilePartial; \n  964  \t\t\t\t\t\t\t}\n  965  \t\t\t\t\t\t\telse\n  966  \t\t\t\t\t\t\t{\n  967: \t\t\t\t\t\t\t\tdebugTile = _debugTileSolid; \n  968  \t\t\t\t\t\t\t}\n  969  \t\t\t\t\t\t\t\n  970  \t\t\t\t\t\t\toffset.addToFlash(_flashPoint);\n  971: \t\t\t\t\t\t\tBuffer.pixels.copyPixels(debugTile, _debugRect, _flashPoint, null, null, true);\n  972  \t\t\t\t\t\t\toffset.subtractFromFlash(_flashPoint);\n  973  \t\t\t\t\t\t}\n  ...\n 1030  \t * Just generates a wireframe box the size of a tile with the specified color.\n 1031  \t */\n 1032: \t#if FLX_DEBUG\n 1033: \tfunction makeDebugTile(color:FlxColor):BitmapData\n 1034  \t{\n 1035  \t\tif (FlxG.renderTile)\n 1036  \t\t\treturn null;\n 1037  \n 1038: \t\tvar debugTile = new BitmapData(_tileWidth, _tileHeight, true, 0);\n 1039: \t\tdrawDebugTile(debugTile, color);\n 1040: \t\treturn debugTile;\n 1041  \t}\n 1042  \t\n 1043: \tfunction drawDebugTile(debugTile:BitmapData, color:FlxColor):Void\n 1044  \t{\n 1045  \t\tif (color != FlxColor.TRANSPARENT)\n ....\n 1054  \t\t\tgfx.lineTo(0, 0);\n 1055  \t\t\t\n 1056: \t\t\tdebugTile.draw(FlxSpriteUtil.flashGfxSprite);\n 1057  \t\t}\n 1058  \t}\n 1059  \n 1060: \tfunction onDrawDebugChanged():Void\n 1061  \t{\n 1062  \t\tsetDirty();\n ....\n 1217  \t}\n 1218  \n 1219: \t#if FLX_DEBUG\n 1220: \toverride function set_debugBoundingBoxColorSolid(color:FlxColor)\n 1221  \t{\n 1222: \t\tsuper.set_debugBoundingBoxColorSolid(color);\n 1223: \t\tupdateDebugTileBoundingBoxSolid();\n 1224  \t\treturn color;\n 1225  \t}\n 1226  \t\n 1227: \toverride function set_debugBoundingBoxColorNotSolid(color:FlxColor)\n 1228  \t{\n 1229: \t\tsuper.set_debugBoundingBoxColorNotSolid(color);\n 1230: \t\tupdateDebugTileBoundingBoxNotSolid();\n 1231  \t\treturn color;\n 1232  \t}\n 1233  \t\n 1234: \toverride function set_debugBoundingBoxColorPartial(color:FlxColor)\n 1235  \t{\n 1236: \t\tsuper.set_debugBoundingBoxColorPartial(color);\n 1237: \t\tupdateDebugTileBoundingBoxPartial();\n 1238  \t\treturn color;\n 1239  \t}\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/tweens/misc/VarTween.hx:\n   36  \tpublic function tween(object:Dynamic, properties:Dynamic, duration:Float):VarTween\n   37  \t{\n   38: \t\t#if FLX_DEBUG\n   39  \t\tif (object == null)\n   40  \t\t{\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/ui/FlxAnalog.hx:\n  137  \t\tbase.solid = false;\n  138  \t\t\n  139: \t\t#if FLX_DEBUG\n  140: \t\tbase.ignoreDrawDebug = true;\n  141  \t\t#end\n  142  \t\t\n  ...\n  159  \t\tthumb.solid = false;\n  160  \t\t\n  161: \t\t#if FLX_DEBUG\n  162: \t\tthumb.ignoreDrawDebug = true;\n  163  \t\t#end\n  164  \t\t\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/ui/FlxBar.hx:\n  876  \toverride public function toString():String\n  877  \t{\n  878: \t\treturn FlxStringUtil.getDebugString([ \n  879  \t\t\tLabelValuePair.weak(\"min\", min),\n  880  \t\t\tLabelValuePair.weak(\"max\", max),\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/ui/FlxButton.hx:\n  319  \t}\n  320  \t\n  321: \t#if FLX_DEBUG\n  322  \t/**\n  323: \t * Helper function to draw the debug graphic for the label as well.\n  324  \t */\n  325: \toverride public function drawDebug():Void \n  326  \t{\n  327: \t\tsuper.drawDebug();\n  328  \t\t\n  329  \t\tif (_spriteLabel != null) \n  330  \t\t{\n  331: \t\t\t_spriteLabel.drawDebug();\n  332  \t\t}\n  333  \t}\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/ui/FlxVirtualPad.hx:\n  135  \t\tbutton.scrollFactor.set();\n  136  \t\t\n  137: \t\t#if FLX_DEBUG\n  138: \t\tbutton.ignoreDrawDebug = true;\n  139  \t\t#end\n  140  \t\t\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/util/FlxPath.hx:\n    9  /**\n   10   * This is a simple path data container. Basically a list of points that\n   11:  * a `FlxObject` can follow.  Also has code for drawing debug visuals.\n   12   * `FlxTilemap.findPath()` returns a path usable by `FlxPath`, but you can\n   13   * also just make your own, using the `add()` functions below\n   ..\n  112  \tpublic var onComplete:FlxPath->Void;\n  113  \n  114: \t#if FLX_DEBUG\n  115  \t/**\n  116: \t * Specify a debug display color for the path. Default is white.\n  117  \t */\n  118: \tpublic var debugColor:FlxColor = 0xffffff;\n  119  \t/**\n  120  \t * Setting this to true will prevent the object from appearing\n  121: \t * when FlxG.debugger.drawDebug is true.\n  122  \t */\n  123: \tpublic var ignoreDrawDebug:Bool = false;\n  124  \t#end\n  125  \t\n  ...\n  163  \t\n  164  \t/**\n  165: \t * Just resets some debugging related variables (for debugger renderer).\n  166  \t * Also resets `autoCenter` to `true`.\n  167  \t * @return\tThis path object.\n  ...\n  169  \tpublic function reset():FlxPath\n  170  \t{\n  171: \t\t#if FLX_DEBUG\n  172: \t\tdebugColor = 0xffffff;\n  173: \t\tignoreDrawDebug = false;\n  174  \t\t#end\n  175  \t\tautoCenter = true;\n  ...\n  684  \t}\n  685  \t\n  686: \t#if FLX_DEBUG\n  687  \t/**\n  688: \t * While this doesn't override `FlxBasic.drawDebug()`, the behavior is very similar.\n  689  \t * Based on this path data, it draws a simple lines-and-boxes representation of the path\n  690: \t * if the `drawDebug` mode was toggled in the debugger overlay.\n  691: \t * You can use `debugColor` to control the path's appearance.\n  692  \t * \n  693  \t * @param\tCamera\t\tThe camera object the path will draw to.\n  694  \t */\n  695  \t@:access(flixel.FlxCamera)\n  696: \tpublic function drawDebug(?Camera:FlxCamera):Void\n  697  \t{\n  698  \t\tif (_nodes == null || _nodes.length <= 0)\n  ...\n  715  \t\telse\n  716  \t\t{\n  717: \t\t\tgfx = Camera.debugLayer.graphics;\n  718  \t\t}\n  719  \t\t\n  ...\n  740  \t\t\t\tnodeSize *= 2;\n  741  \t\t\t}\n  742: \t\t\tvar nodeColor:FlxColor = debugColor;\n  743  \t\t\tif (l > 1)\n  744  \t\t\t{\n  ...\n  772  \t\t\t//then draw a line to the next node\n  773  \t\t\tgfx.moveTo(_point.x, _point.y);\n  774: \t\t\tgfx.lineStyle(1, debugColor, lineAlpha);\n  775  \t\t\t_point.x = nextNode.x - (Camera.scroll.x * object.scrollFactor.x); //copied from getScreenPosition()\n  776  \t\t\t_point.y = nextNode.y - (Camera.scroll.y * object.scrollFactor.y);\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/util/FlxSpriteUtil.hx:\n   34  \t/**\n   35  \t * Useful helper objects for doing Flash-specific rendering.\n   36: \t * Primarily used for \"debug visuals\" like drawing bounding boxes directly to the screen buffer.\n   37  \t */\n   38  \tpublic static var flashGfxSprite(default, null):Sprite = new Sprite();\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/util/FlxStringUtil.hx:\n   21  \t/**\n   22  \t * Takes two \"ticks\" timestamps and formats them into the number of seconds that passed as a String.\n   23: \t * Useful for logging, debugging, the watch window, or whatever else.\n   24  \t * \n   25  \t * @param\tStartTicks\tThe first timestamp from the system.\n   ..\n   64  \t/**\n   65  \t * Generate a comma-separated string from an array.\n   66: \t * Especially useful for tracing or other debug output.\n   67  \t * \n   68  \t * @param\tAnyArray\tAny Array object.\n   ..\n  195  \t/**\n  196  \t * Format a text with html tags - useful for TextField.htmlText. \n  197: \t * Used by the log window of the debugger.\n  198  \t * \n  199  \t * @param\tText\t\tThe text to format\n  ...\n  578  \t\n  579  \t/**\n  580: \t * Helper function to create a string for toString() functions. Automatically rounds values according to FlxG.debugger.precision.\n  581  \t * Strings are formatted in the format: (x: 50 | y: 60 | visible: false)\n  582  \t * \n  583  \t * @param\tLabelValuePairs\t\tArray with the data for the string\n  584  \t */\n  585: \tpublic static function getDebugString(LabelValuePairs:Array<LabelValuePair>):String\n  586  \t{\n  587  \t\tvar output:String = \"(\";\n  ...\n  592  \t\t\tif (Std.is(value, Float))\n  593  \t\t\t{\n  594: \t\t\t\tvalue = FlxMath.roundDecimal(cast value, FlxG.debugger.precision);\n  595  \t\t\t}\n  596  \t\t\toutput += (value + \" | \");\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/util/helpers/FlxBounds.hx:\n   59  \t\n   60  \t/**\n   61: \t * Convert object to readable string name. Useful for debugging, save games, etc.\n   62  \t */\n   63  \tpublic function toString():String\n   64  \t{\n   65: \t\treturn FlxStringUtil.getDebugString([ \n   66  \t\t\tLabelValuePair.weak(\"min\", min),\n   67  \t\t\tLabelValuePair.weak(\"max\", max)]);\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/util/helpers/FlxPointRangeBounds.hx:\n   87  \t\n   88  \t/**\n   89: \t * Convert object to readable string name. Useful for debugging, save games, etc.\n   90  \t */\n   91  \tpublic function toString():String\n   92  \t{\n   93: \t\treturn FlxStringUtil.getDebugString([ \n   94  \t\t\tLabelValuePair.weak(\"start.min.x\", start.min.x),\n   95  \t\t\tLabelValuePair.weak(\"start.min.y\", start.min.y),\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/util/helpers/FlxRange.hx:\n   60  \t\n   61  \t/**\n   62: \t * Convert object to readable string name. Useful for debugging, save games, etc.\n   63  \t */\n   64  \tpublic function toString():String\n   65  \t{\n   66: \t\treturn FlxStringUtil.getDebugString([ \n   67  \t\t\tLabelValuePair.weak(\"start\", start),\n   68  \t\t\tLabelValuePair.weak(\"end\", end)]);\n\n/home/e1sif/haxelib/flixel/4,4,2/flixel/util/helpers/FlxRangeBounds.hx:\n   68  \t\n   69  \t/**\n   70: \t * Convert object to readable string name. Useful for debugging, save games, etc.\n   71  \t */\n   72  \tpublic function toString():String\n   73  \t{\n   74: \t\treturn FlxStringUtil.getDebugString([ \n   75  \t\t\tLabelValuePair.weak(\"start.min\", start.min),\n   76  \t\t\tLabelValuePair.weak(\"start.max\", start.min),\n\n/home/e1sif/haxelib/flixel-addons/2,6,0/CHANGELOG.md:\n   49  * `FlxFSM`: fixed a runtime error on HTML5 (#271)\n   50  * `FlxSliceSprite`: fixed incorrect vertex positions on the bottom part (#272)\n   51: * `FlxNapeSpace`: fixed `drawDebug` positioning with scaling (00b2b37)\n   52  \n   53  2.1.0 (July 10, 2016)\n   ..\n  112    * refactored `FlxNapeState` into a plugin called `FlxNapeSpace`, making it possible to use nape with other `FlxState` child classes like `FlxUIState`\n  113    * `FlxNapeSpace`: added `napePhysicsEnabled`\n  114:   * `FlxNapeSpace`: made `shapeDebug` public\n  115    * `FlxNapeSprite`: `setPosition()` is now overridden and sets `body.position`\n  116    * `FlxNapeSprite#new()`: the `EnablePhysics` argument is now no longer ignored if `CreateRectangularBody` is `false`\n  ...\n  169    * Added map and color vars\n  170  * FlxTypeText: added skip()\n  171: * FlxNapeState: fixed issue with nape debug draw not showing on native targets\n  172  * Refactored AntTaskManager:\n  173    * Switched to Bool->Void callbacks as opposed to Dynamic\n  ...\n  211  * TiledLayer: Bugfix for \"End of file error\"\n  212  * text.FlxTypeText added\n  213: * FlxNapeState: ShapeDebug works correctly with FlxCamera again, is now also drawn below the flixel debugger, added a button to toggle nape debugging to the debugger\n  214  * ui.FlxClickArea added\n  215  \n\n/home/e1sif/haxelib/flixel-addons/2,6,0/flixel/addons/api/FlxGameJolt.hx:\n   65  \t * Whether or not to log the URL that is contacted and messages returned from GameJolt.\n   66  \t * Useful if you're not getting the right data back.\n   67: \t * Only works in debug mode.\n   68  \t */\n   69  \tpublic static var verbose:Bool = false;\n   ..\n  317  \t\telse\n  318  \t\t{\n  319: \t\t\t#if debug\n  320  \t\t\tFlxG.log.warn(\"FlxGameJolt: Unable to access user name or token, and no user name or token was passed.\");\n  321  \t\t\t#end\n  ...\n  689  \t\t\t_loader = new URLLoader();\n  690  \t\t\n  691: \t\t#if debug\n  692  \t\tif (verbose)\n  693  \t\t\tFlxG.log.add(\"FlxGameJolt: Contacting \" + request.url);\n  ...\n  712  \t\tif (Std.string((cast e.currentTarget).data) == \"\")\n  713  \t\t{\n  714: \t\t\t#if debug\n  715  \t\t\tFlxG.log.warn(\"FlxGameJolt received no data back. This is probably because one of the values it was passed is wrong.\");\n  716  \t\t\t#end\n  ...\n  736  \t\t}\n  737  \t\t\n  738: \t\t#if debug\n  739  \t\tif (returnMap.exists(\"message\") && verbose)\n  740  \t\t{\n  ...\n  851  \t\telse\n  852  \t\t{\n  853: \t\t\t#if debug\n  854  \t\t\tFlxG.log.warn(\"FlxGameJolt: Failed to load image\");\n  855  \t\t\t#end\n  ...\n  896  \t\tif (_gameID == 0 || _privateKey == \"\")\n  897  \t\t{\n  898: \t\t\t#if debug\n  899  \t\t\tFlxG.log.warn(\"FlxGameJolt: You must run init() before you can do this. Game ID is \" + _gameID + \" and the key is \" + _privateKey + \".\");\n  900  \t\t\t#end\n  ...\n  912  \t\tif (!_initialized)\n  913  \t\t{\n  914: \t\t\t#if debug\n  915  \t\t\tFlxG.log.warn(\"FlxGameJolt: You must authenticate user before you can do this.\");\n  916  \t\t\t#end\n\n/home/e1sif/haxelib/flixel-addons/2,6,0/flixel/addons/display/FlxNestedSprite.hx:\n  157  \tpublic function preUpdate(elapsed:Float):Void \n  158  \t{\n  159: \t\t#if FLX_DEBUG\n  160  \t\tFlxBasic.activeCount++;\n  161  \t\t#end\n  ...\n  267  \t}\n  268  \t\n  269: \t#if FLX_DEBUG\n  270: \toverride public function drawDebug():Void \n  271  \t{\n  272: \t\tsuper.drawDebug();\n  273  \t\t\n  274  \t\tfor (child in children)\n  275  \t\t{\n  276  \t\t\tif (child.exists && child.visible)\n  277: \t\t\t\tchild.drawDebug();\n  278  \t\t}\n  279  \t}\n\n/home/e1sif/haxelib/flixel-addons/2,6,0/flixel/addons/editors/ogmo/FlxOgmoLoader.hx:\n   23  \t * IMPORTANT:\n   24  \t *  * Tile layers must have the Export Mode set to `\"CSV\"`.\n   25: \t *  * First tile in spritesheet must be blank or debug. It will never get drawn so don't place them in Ogmo!\n   26  \t *    (This is needed to support many other editors that use index `0` as empty)\n   27  \t * \n\n/home/e1sif/haxelib/flixel-addons/2,6,0/flixel/addons/effects/FlxClothSprite.hx:\n  188  \t}\n  189  \t\n  190: \t#if FLX_DEBUG\n  191  \t@:access(flixel.FlxCamera)\n  192: \toverride public function drawDebugOnCamera(camera:FlxCamera):Void \n  193  \t{\n  194  \t\tif (!camera.visible || !camera.exists || !isOnScreen(camera))\n  ...\n  198  \t\t\n  199  \t\t// Find the color to use\n  200: \t\tvar color:Null<Int> = debugBoundingBoxColor;\n  201  \t\tif (color == null)\n  202  \t\t{\n  ...\n  208  \t\t\n  209  \t\t//fill static graphics object with square shape\n  210: \t\tvar gfx:Graphics = beginDrawDebug(camera);\n  211  \t\tgfx.lineStyle(1, color, 0.5);\n  212  \t\tgfx.drawRect(rect.x, rect.y, rect.width, rect.height);\n  ...\n  241  \t\t}\n  242  \t\t\n  243: \t\tendDrawDebug(camera);\n  244  \t}\n  245  \t#end\n\n/home/e1sif/haxelib/flixel-addons/2,6,0/flixel/addons/nape/FlxNapeSpace.hx:\n   12  import nape.space.Space;\n   13  \n   14: #if FLX_DEBUG\n   15: import nape.util.ShapeDebug;\n   16  \n   17: @:bitmap(\"assets/images/napeDebug.png\")\n   18: class GraphicNapeDebug extends BitmapData {}\n   19  #end\n   20  \n   ..\n   41  \t\n   42  \t/**\n   43: \t * Whether or not the nape debug graphics are enabled.\n   44  \t */\n   45: \tpublic static var drawDebug(default, set):Bool;\n   46  \t\n   47: \t#if FLX_DEBUG\n   48  \t/**\n   49: \t * A useful \"canvas\" which can be used to draw debug information on.\n   50  \t * To get a better idea of its use, see the official Nape demo 'SpatialQueries'\n   51  \t * (http://napephys.com/samples.html#swf-SpatialQueries)\n   52  \t * where this is used to draw lines emitted from Rays.\n   53  \t * A sensible place to use this would be the state's draw() method.\n   54: \t * Note that shapeDebug is null if drawDebug is false.\n   55  \t */\n   56: \tpublic static var shapeDebug(default, null):ShapeDebug;\n   57: \tstatic var drawDebugButton:FlxSystemButton;\n   58  \t#end\n   59  \t\n   ..\n   71  \t\tFlxG.signals.stateSwitched.add(onStateSwitch);\n   72  \t\t\n   73: \t\t#if FLX_DEBUG\n   74: \t\t// Add a button to toggle Nape debug shapes to the debugger\n   75: \t\tdrawDebugButton = FlxG.debugger.addButton(RIGHT, new GraphicNapeDebug(0, 0), function()\n   76  \t\t{\n   77: \t\t\tdrawDebug = !drawDebug;\n   78  \t\t}, true, true);\n   79: \t\tdrawDebug = false;\n   80  \t\t#end\n   81  \t}\n   ..\n  119  \t}\n  120  \t\n  121: \tstatic function set_drawDebug(drawDebug:Bool):Bool\n  122  \t{\n  123: \t\t#if FLX_DEBUG\n  124: \t\tif (drawDebugButton != null)\n  125: \t\t\tdrawDebugButton.toggled = !drawDebug;\n  126  \t\t\n  127: \t\tif (drawDebug)\n  128  \t\t{\n  129: \t\t\tif (shapeDebug == null)\n  130  \t\t\t{\n  131: \t\t\t\tshapeDebug = new ShapeDebug(FlxG.width, FlxG.height);\n  132: \t\t\t\tshapeDebug.drawConstraints = true;\n  133: \t\t\t\tshapeDebug.display.scrollRect = null;\n  134: \t\t\t\tshapeDebug.thickness = 1;\n  135: \t\t\t\tFlxG.addChildBelowMouse(shapeDebug.display);\n  136  \t\t\t}\n  137  \t\t}\n  138: \t\telse if (shapeDebug != null)\n  139  \t\t{\n  140: \t\t\tFlxG.removeChild(shapeDebug.display);\n  141: \t\t\tshapeDebug = null;\n  142  \t\t}\n  143  \t\t#end\n  144  \t\t\n  145: \t\treturn FlxNapeSpace.drawDebug = drawDebug;\n  146  \t}\n  147  \t\n  ...\n  154  \t\t}\n  155  \t\t\n  156: \t\t#if FLX_DEBUG\n  157: \t\tdrawDebug = false;\n  158  \t\t\n  159: \t\tif (drawDebugButton != null)\n  160  \t\t{\n  161: \t\t\tFlxG.debugger.removeButton(drawDebugButton);\n  162: \t\t\tdrawDebugButton = null;\n  163  \t\t}\n  164  \t\t#end\n  ...\n  172  \t\n  173  \t/**\n  174: \t * Draws debug graphics.\n  175  \t */\n  176  \t@:access(flixel.FlxCamera)\n  177  \toverride public function draw():Void\n  178  \t{\n  179: \t\t#if FLX_DEBUG\n  180: \t\tif (shapeDebug == null || space == null)\n  181  \t\t\treturn;\n  182  \t\t\n  183: \t\tshapeDebug.clear();\n  184: \t\tshapeDebug.draw(space);\n  185  \t\t\n  186: \t\tvar sprite = shapeDebug.display;\n  187  \t\tsprite.x = 0;\n  188  \t\tsprite.y = 0;\n\n/home/e1sif/haxelib/flixel-addons/2,6,0/flixel/addons/nape/FlxNapeSprite.hx:\n  238  \t}\n  239  \t\n  240: \t#if FLX_DEBUG\n  241  \t/**\n  242: \t * Hide debug outline on physics sprites if the physics debug shapes are turned on\n  243  \t */\t\n  244: \toverride public function drawDebug():Void\n  245  \t{\n  246: \t\tif (!FlxNapeSpace.drawDebug)\n  247: \t\t\tsuper.drawDebug();\n  248  \t}\n  249  \t#end\n\n/home/e1sif/haxelib/flixel-addons/2,6,0/flixel/addons/nape/FlxNapeTilemap.hx:\n  169  \t}\n  170  \t\n  171: \t#if FLX_DEBUG\n  172: \toverride public function drawDebug():Void \n  173  \t{\n  174: \t\tif (!FlxNapeSpace.drawDebug)\n  175: \t\t\tsuper.drawDebug();\n  176  \t}\n  177  \t#end\n\n/home/e1sif/haxelib/flixel-addons/2,6,0/flixel/addons/text/FlxTextField.hx:\n  128  \t\tFlxG.camera.transformObject(textField);\n  129  \t\t\n  130: \t\t#if FLX_DEBUG\n  131  \t\tFlxBasic.visibleCount++;\n  132  \t\t#end\n\n/home/e1sif/haxelib/flixel-addons/2,6,0/flixel/addons/tile/FlxTilemapExt.hx:\n  142  \t\tvar special:FlxTileSpecial;\n  143  \n  144: \t\t#if FLX_DEBUG\n  145: \t\tvar debugTile:BitmapData;\n  146  \t\t#end \n  147  \t\t\n  ...\n  177  \t\t\t\t\t}\n  178  \t\t\t\t\n  179: \t\t\t\t\t#if FLX_DEBUG\n  180: \t\t\t\t\tif (FlxG.debugger.drawDebug && !ignoreDrawDebug) \n  181  \t\t\t\t\t{\n  182  \t\t\t\t\t\tif (tile != null)\n  ...\n  184  \t\t\t\t\t\t\tif (tile.allowCollisions <= FlxObject.NONE)\n  185  \t\t\t\t\t\t\t{\n  186: \t\t\t\t\t\t\t\tdebugTile = _debugTileNotSolid; \n  187  \t\t\t\t\t\t\t}\n  188  \t\t\t\t\t\t\telse if (tile.allowCollisions != FlxObject.ANY)\n  189  \t\t\t\t\t\t\t{\n  190: \t\t\t\t\t\t\t\tdebugTile = _debugTilePartial; \n  191  \t\t\t\t\t\t\t}\n  192  \t\t\t\t\t\t\telse\n  193  \t\t\t\t\t\t\t{\n  194: \t\t\t\t\t\t\t\tdebugTile = _debugTileSolid; \n  195  \t\t\t\t\t\t\t}\n  196  \t\t\t\t\t\t\n  197  \t\t\t\t\t\t\toffset.addToFlash(_flashPoint);\n  198: \t\t\t\t\t\t\tBuffer.pixels.copyPixels(debugTile, _debugRect, _flashPoint, null, null, true);\n  199  \t\t\t\t\t\t\toffset.subtractFromFlash(_flashPoint);\n  200  \t\t\t\t\t\t}\n\n8990 matches across 232 files\n\n\nSearching 5 files for \"debug\"\n\n/home/e1sif/Haxe/Leaderships/source/PlayState.hx:\n   81  \t\tsuper.create();\n   82  \n   83:     FlxG.debugger.drawDebug = true;\n   84  \n   85      FlxG.worldBounds.set(-16, -16, FlxG.width + 16, FlxG.height + 16);\n\n2 matches in 1 file\n\n\nSearching 5 files for \"debug\"\n\n/home/e1sif/Haxe/Leaderships/source/PlayState.hx:\n   81  \t\tsuper.create();\n   82  \n   83:     FlxG.debugger.drawDebug = true;\n   84  \n   85      FlxG.worldBounds.set(-16, -16, FlxG.width + 16, FlxG.height + 16);\n\n2 matches in 1 file\n",
			"settings":
			{
				"buffer_size": 962810,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "server/Main.hx",
			"settings":
			{
				"buffer_size": 1545,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "package ;"
			}
		},
		{
			"file": "source/MenuState.hx",
			"settings":
			{
				"buffer_size": 858,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "assets/xml/menustate.xml",
			"settings":
			{
				"buffer_size": 1313,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"json",
				"Set Syntax: JSON"
			],
			[
				"syntax hax",
				"Set Syntax: Haxe"
			],
			[
				"haxe",
				"Haxelib: List Installed"
			],
			[
				"previe",
				"Markdown Preview: Preview in Browser"
			],
			[
				"preview",
				"Markdown Preview: Preview in Browser"
			],
			[
				"synta hax",
				"Set Syntax: Haxe"
			],
			[
				"pack insta",
				"Package Control: Install Package"
			],
			[
				"pACK",
				"Install Package Control"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/e1sif/Haxe/Leaderships",
		"/home/e1sif/Haxe/Leaderships/assets",
		"/home/e1sif/Haxe/Leaderships/assets/images",
		"/home/e1sif/Haxe/Leaderships/source"
	],
	"file_history":
	[
		"/home/e1sif/Work/RD/index.html",
		"/home/e1sif/Work/RD/get_rd_data.rb",
		"/home/e1sif/Work/RD/equipment.json",
		"/home/e1sif/Work/get_rd_data.rb",
		"/home/e1sif/Work/redemption_equipment.json",
		"/home/e1sif/Haxe/SpidersSpidersSpiders/assets/xml/menustate.xml",
		"/home/e1sif/Haxe/Leaderships/source/MenuState.hx",
		"/home/e1sif/Haxe/Leaderships/source/Main.hx",
		"/home/e1sif/Haxe/Leaderships/Project.xml",
		"/home/e1sif/Haxe/Leaderships/export/html5/bin/Leaderships.js",
		"/home/e1sif/Desktop/edit_name_place.html",
		"/home/e1sif/Haxe/Net/Client/Main.hx",
		"/home/e1sif/Haxe/Net/Server/Main.hx",
		"/home/e1sif/Haxe/Leaderships/assets/xml/menustate.xml",
		"/home/e1sif/Haxe/Leaderships/server/main.hxml",
		"/home/e1sif/Haxe/Net/Client/untitled.hx",
		"/home/e1sif/Haxe/SpidersSpidersSpiders/source/MenuState.hx",
		"/home/e1sif/Haxe/Leaderships/.gitignore",
		"/home/e1sif/haxelib/mphx/git/example/basic/simple/client/Main.hx",
		"/home/e1sif/haxelib/mphx/git/example/basic/simple/server/Main.hx",
		"/home/e1sif/Haxe/Leaderships/source/Objects.hx",
		"/home/e1sif/Downloads/deploy.md",
		"/home/e1sif/Haxe/Leaderships/assets/data/interior.tmx",
		"/home/e1sif/Haxe/Leaderships/source/Mobile.hx",
		"/home/e1sif/Haxe/SpidersSpidersSpiders/source/Player.hx",
		"/home/e1sif/Haxe/SpidersSpidersSpiders/source/PlayState.hx",
		"/tmp/mozilla_e1sif0/deploy.md",
		"/home/e1sif/sdbmss/app/models/source.rb",
		"/home/e1sif/sdbmss/app/models/source_type.rb",
		"/home/e1sif/sdbmss/app/models/source_agent.rb",
		"/home/e1sif/sdbmss/app/models/sale.rb",
		"/home/e1sif/sdbmss/app/models/sale_agent.rb",
		"/home/e1sif/sdbmss/app/models/provenance.rb",
		"/home/e1sif/sdbmss/app/models/place.rb",
		"/home/e1sif/sdbmss/app/models/name.rb",
		"/home/e1sif/sdbmss/app/models/manuscript.rb",
		"/home/e1sif/sdbmss/app/models/language.rb",
		"/home/e1sif/sdbmss/app/models/entry_use.rb",
		"/home/e1sif/sdbmss/app/models/entry_title.rb",
		"/home/e1sif/sdbmss/app/models/entry_scribe.rb",
		"/home/e1sif/sdbmss/app/models/entry_place.rb",
		"/home/e1sif/sdbmss/app/models/entry_material.rb",
		"/home/e1sif/sdbmss/app/models/entry_manuscript.rb",
		"/home/e1sif/sdbmss/app/models/entry_language.rb",
		"/home/e1sif/sdbmss/app/models/entry_date.rb",
		"/home/e1sif/sdbmss/app/models/entry_author.rb",
		"/home/e1sif/sdbmss/app/models/entry_artist.rb",
		"/home/e1sif/sdbmss/app/models/entry.rb",
		"/home/e1sif/sdbmss/app/models/dericci_record.rb",
		"/home/e1sif/sdbmss/app/models/dericci_link.rb",
		"/tmp/fz3temp-2/style-mobile.css",
		"/tmp/fz3temp-2/footer.php",
		"/tmp/fz3temp-2/template-full-screen.php",
		"/tmp/fz3temp-2/header.php",
		"/tmp/fz3temp-2/style.css",
		"/home/e1sif/sdbmss/docker-compose.yml",
		"/tmp/fz3temp-2/content-page.php",
		"/tmp/fz3temp-2/page.php",
		"/home/e1sif/Haxe/SpidersSpidersSpiders/Project.xml",
		"/home/e1sif/Haxe/SpidersSpidersSpiders/assets/xml/playstate.xml",
		"/home/e1sif/Haxe/SpidersSpidersSpiders/assets/data/world.tmx",
		"/home/e1sif/Haxe/SpidersSpidersSpiders/source/Main.hx",
		"/home/e1sif/Downloads/remote2018.todo",
		"/home/e1sif/Haxe/Docs/documentation/02_handbook/06-flxsave.html.md",
		"/home/e1sif/Haxe/SpidersSpidersSpiders/assets/data/level0.tmx",
		"/home/e1sif/Haxe/Docs/documentation/01_tutorial/09-8-pickups.html.md",
		"/home/e1sif/Haxe/Docs/documentation/01_tutorial/15-14-polish.html.md",
		"/home/e1sif/Haxe/SpidersSpidersSpiders/todo.todo",
		"/home/e1sif/.bashrc",
		"/home/e1sif/Documents/aftermove.todo",
		"/home/e1sif/sdbmss/VERSION",
		"/home/e1sif/sdbmss/db/migrate/20180613140425_create_name_places.rb",
		"/home/e1sif/sdbmss/.docker-environment",
		"/home/e1sif/Documents/10fdesign.accounting",
		"/home/e1sif/Documents/move.todo",
		"/home/e1sif/Haxe/SpidersSpidersSpiders/spiderspiderspider.sublime-project",
		"/home/e1sif/Documents/sublime license"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
			"/home/e1sif/Haxe/Leaderships/source",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"random",
			"debug",
			"id:",
			"'\\w+ newbie',",
			"<option value=\"[\\w\\s]+\">([\\w\\s]+)</option>",
			"<option value=\"\\w+\">(\\w+)</option>",
			"wear\":\"arms",
			"newbie",
			"\"mv\"",
			"spawnenemy",
			"spawnbull",
			"on(",
			"player = new",
			"\n    ",
			"velocity: ",
			"id: ",
			"movedata",
			"new crew",
			"crewdata",
			"bulletspawned",
			"spawnenemy",
			"enemy = new",
			"enemydata",
			"SpawnEn",
			"spawnenem",
			"spawnenemy",
			"enemy = new",
			"floor",
			"update",
			"crewmember",
			"controls",
			"CONTROLS",
			"crew",
			"random",
			"crew",
			"client",
			"crew",
			"FlxText",
			"flxtext",
			"keys_text",
			"text",
			"stations",
			"station",
			"objects",
			"justpres",
			"remove",
			"exterior.add",
			"remove",
			"add",
			"remove",
			"controls",
			"jumps",
			"flxtil",
			"acceleration.y",
			"tilemap",
			"flxgroup",
			"random",
			"camera"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"",
			"'$1',",
			"$1,",
			"$1",
			"clientSocket"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "source/Objects.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1049,
						"regions":
						{
						},
						"selection":
						[
							[
								427,
								427
							]
						],
						"settings":
						{
							"haxe-build-id": 0,
							"syntax": "Packages/Haxe/Haxe.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "source/PlayState.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12041,
						"regions":
						{
						},
						"selection":
						[
							[
								4169,
								4193
							]
						],
						"settings":
						{
							"haxe-build-id": 0,
							"syntax": "Packages/Haxe/Haxe.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2099.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Project.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3154,
						"regions":
						{
						},
						"selection":
						[
							[
								2677,
								2677
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 686.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 962810,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										132,
										137
									],
									[
										236,
										241
									],
									[
										251,
										256
									],
									[
										408,
										413
									],
									[
										658,
										663
									],
									[
										838,
										843
									],
									[
										1043,
										1048
									],
									[
										1247,
										1252
									],
									[
										1468,
										1473
									],
									[
										1692,
										1697
									],
									[
										1711,
										1716
									],
									[
										1906,
										1911
									],
									[
										2093,
										2098
									],
									[
										2250,
										2255
									],
									[
										2325,
										2330
									],
									[
										2466,
										2471
									],
									[
										2511,
										2516
									],
									[
										2561,
										2566
									],
									[
										2621,
										2626
									],
									[
										2673,
										2678
									],
									[
										2770,
										2775
									],
									[
										2796,
										2801
									],
									[
										2921,
										2926
									],
									[
										2968,
										2973
									],
									[
										3013,
										3018
									],
									[
										3051,
										3056
									],
									[
										3092,
										3097
									],
									[
										3245,
										3250
									],
									[
										3323,
										3328
									],
									[
										3338,
										3343
									],
									[
										3503,
										3508
									],
									[
										3718,
										3723
									],
									[
										4018,
										4023
									],
									[
										4238,
										4243
									],
									[
										4438,
										4443
									],
									[
										4644,
										4649
									],
									[
										4864,
										4869
									],
									[
										5058,
										5063
									],
									[
										5253,
										5258
									],
									[
										5481,
										5486
									],
									[
										5700,
										5705
									],
									[
										5967,
										5972
									],
									[
										6155,
										6160
									],
									[
										6161,
										6166
									],
									[
										6226,
										6231
									],
									[
										6232,
										6237
									],
									[
										6263,
										6268
									],
									[
										6269,
										6274
									],
									[
										6305,
										6310
									],
									[
										6311,
										6316
									],
									[
										6355,
										6360
									],
									[
										6363,
										6368
									],
									[
										6401,
										6406
									],
									[
										6407,
										6412
									],
									[
										6579,
										6584
									],
									[
										6585,
										6590
									],
									[
										6690,
										6695
									],
									[
										6696,
										6701
									],
									[
										6970,
										6975
									],
									[
										7136,
										7141
									],
									[
										7142,
										7147
									],
									[
										7360,
										7365
									],
									[
										7371,
										7376
									],
									[
										7622,
										7627
									],
									[
										7633,
										7638
									],
									[
										7716,
										7721
									],
									[
										7727,
										7732
									],
									[
										7890,
										7895
									],
									[
										7901,
										7906
									],
									[
										7952,
										7957
									],
									[
										7963,
										7968
									],
									[
										8180,
										8185
									],
									[
										8191,
										8196
									],
									[
										8259,
										8264
									],
									[
										8270,
										8275
									],
									[
										8420,
										8425
									],
									[
										8430,
										8435
									],
									[
										8471,
										8476
									],
									[
										8482,
										8487
									],
									[
										8528,
										8533
									],
									[
										8539,
										8544
									],
									[
										8593,
										8598
									],
									[
										8605,
										8610
									],
									[
										8655,
										8660
									],
									[
										8666,
										8671
									],
									[
										8727,
										8732
									],
									[
										8738,
										8743
									],
									[
										8822,
										8827
									],
									[
										8833,
										8838
									],
									[
										8948,
										8953
									],
									[
										8959,
										8964
									],
									[
										9020,
										9025
									],
									[
										9031,
										9036
									],
									[
										9051,
										9056
									],
									[
										9285,
										9290
									],
									[
										9296,
										9301
									],
									[
										9316,
										9321
									],
									[
										9382,
										9387
									],
									[
										9393,
										9398
									],
									[
										9413,
										9418
									],
									[
										9559,
										9564
									],
									[
										9570,
										9575
									],
									[
										9590,
										9595
									],
									[
										9624,
										9629
									],
									[
										9635,
										9640
									],
									[
										9655,
										9660
									],
									[
										9855,
										9860
									],
									[
										9866,
										9871
									],
									[
										9886,
										9891
									],
									[
										9937,
										9942
									],
									[
										9948,
										9953
									],
									[
										9968,
										9973
									],
									[
										10101,
										10106
									],
									[
										10111,
										10116
									],
									[
										10131,
										10136
									],
									[
										10155,
										10160
									],
									[
										10166,
										10171
									],
									[
										10186,
										10191
									],
									[
										10215,
										10220
									],
									[
										10226,
										10231
									],
									[
										10246,
										10251
									],
									[
										10283,
										10288
									],
									[
										10295,
										10300
									],
									[
										10317,
										10322
									],
									[
										10348,
										10353
									],
									[
										10359,
										10364
									],
									[
										10379,
										10384
									],
									[
										10423,
										10428
									],
									[
										10434,
										10439
									],
									[
										10454,
										10459
									],
									[
										10521,
										10526
									],
									[
										10532,
										10537
									],
									[
										10552,
										10557
									],
									[
										10650,
										10655
									],
									[
										10661,
										10666
									],
									[
										10681,
										10686
									],
									[
										10725,
										10730
									],
									[
										10970,
										10975
									],
									[
										11047,
										11052
									],
									[
										11204,
										11209
									],
									[
										11249,
										11254
									],
									[
										11460,
										11465
									],
									[
										11522,
										11527
									],
									[
										11666,
										11671
									],
									[
										11701,
										11706
									],
									[
										11741,
										11746
									],
									[
										11789,
										11794
									],
									[
										11833,
										11838
									],
									[
										11888,
										11893
									],
									[
										11966,
										11971
									],
									[
										12075,
										12080
									],
									[
										12130,
										12135
									],
									[
										12377,
										12382
									],
									[
										12456,
										12461
									],
									[
										12615,
										12620
									],
									[
										12662,
										12667
									],
									[
										12875,
										12880
									],
									[
										12939,
										12944
									],
									[
										13085,
										13090
									],
									[
										13122,
										13127
									],
									[
										13164,
										13169
									],
									[
										13214,
										13219
									],
									[
										13260,
										13265
									],
									[
										13317,
										13322
									],
									[
										13397,
										13402
									],
									[
										13508,
										13513
									],
									[
										13565,
										13570
									],
									[
										13812,
										13817
									],
									[
										13891,
										13896
									],
									[
										14050,
										14055
									],
									[
										14097,
										14102
									],
									[
										14310,
										14315
									],
									[
										14374,
										14379
									],
									[
										14520,
										14525
									],
									[
										14557,
										14562
									],
									[
										14599,
										14604
									],
									[
										14649,
										14654
									],
									[
										14695,
										14700
									],
									[
										14752,
										14757
									],
									[
										14832,
										14837
									],
									[
										14943,
										14948
									],
									[
										15000,
										15005
									],
									[
										15251,
										15256
									],
									[
										15334,
										15339
									],
									[
										15497,
										15502
									],
									[
										15548,
										15553
									],
									[
										15765,
										15770
									],
									[
										15833,
										15838
									],
									[
										15983,
										15988
									],
									[
										16024,
										16029
									],
									[
										16070,
										16075
									],
									[
										16124,
										16129
									],
									[
										16174,
										16179
									],
									[
										16235,
										16240
									],
									[
										16319,
										16324
									],
									[
										16434,
										16439
									],
									[
										16495,
										16500
									],
									[
										16744,
										16749
									],
									[
										16825,
										16830
									],
									[
										16986,
										16991
									],
									[
										17035,
										17040
									],
									[
										17250,
										17255
									],
									[
										17316,
										17321
									],
									[
										17464,
										17469
									],
									[
										17503,
										17508
									],
									[
										17547,
										17552
									],
									[
										17599,
										17604
									],
									[
										17647,
										17652
									],
									[
										17706,
										17711
									],
									[
										17788,
										17793
									],
									[
										17901,
										17906
									],
									[
										17960,
										17965
									],
									[
										18211,
										18216
									],
									[
										18294,
										18299
									],
									[
										18457,
										18462
									],
									[
										18508,
										18513
									],
									[
										18725,
										18730
									],
									[
										18793,
										18798
									],
									[
										18943,
										18948
									],
									[
										18984,
										18989
									],
									[
										19030,
										19035
									],
									[
										19084,
										19089
									],
									[
										19134,
										19139
									],
									[
										19195,
										19200
									],
									[
										19279,
										19284
									],
									[
										19394,
										19399
									],
									[
										19455,
										19460
									],
									[
										19707,
										19712
									],
									[
										19791,
										19796
									],
									[
										19955,
										19960
									],
									[
										20007,
										20012
									],
									[
										20225,
										20230
									],
									[
										20294,
										20299
									],
									[
										20445,
										20450
									],
									[
										20487,
										20492
									],
									[
										20534,
										20539
									],
									[
										20589,
										20594
									],
									[
										20640,
										20645
									],
									[
										20702,
										20707
									],
									[
										20787,
										20792
									],
									[
										20903,
										20908
									],
									[
										20965,
										20970
									],
									[
										21218,
										21223
									],
									[
										21303,
										21308
									],
									[
										21468,
										21473
									],
									[
										21521,
										21526
									],
									[
										21740,
										21745
									],
									[
										21810,
										21815
									],
									[
										21962,
										21967
									],
									[
										22005,
										22010
									],
									[
										22053,
										22058
									],
									[
										22109,
										22114
									],
									[
										22161,
										22166
									],
									[
										22224,
										22229
									],
									[
										22310,
										22315
									],
									[
										22427,
										22432
									],
									[
										22490,
										22495
									],
									[
										22743,
										22748
									],
									[
										22828,
										22833
									],
									[
										22993,
										22998
									],
									[
										23046,
										23051
									],
									[
										23265,
										23270
									],
									[
										23335,
										23340
									],
									[
										23487,
										23492
									],
									[
										23530,
										23535
									],
									[
										23578,
										23583
									],
									[
										23634,
										23639
									],
									[
										23686,
										23691
									],
									[
										23749,
										23754
									],
									[
										23835,
										23840
									],
									[
										23952,
										23957
									],
									[
										24015,
										24020
									],
									[
										24024,
										24029
									],
									[
										24136,
										24141
									],
									[
										24145,
										24150
									],
									[
										24172,
										24177
									],
									[
										24181,
										24186
									],
									[
										24213,
										24218
									],
									[
										24222,
										24227
									],
									[
										24262,
										24267
									],
									[
										24273,
										24278
									],
									[
										24307,
										24312
									],
									[
										24316,
										24321
									],
									[
										24382,
										24387
									],
									[
										24391,
										24396
									],
									[
										24488,
										24493
									],
									[
										24497,
										24502
									],
									[
										24544,
										24549
									],
									[
										24553,
										24558
									],
									[
										24596,
										24601
									],
									[
										24605,
										24610
									],
									[
										24658,
										24663
									],
									[
										24669,
										24674
									],
									[
										24777,
										24782
									],
									[
										24786,
										24791
									],
									[
										24850,
										24855
									],
									[
										24859,
										24864
									],
									[
										24923,
										24928
									],
									[
										24932,
										24937
									],
									[
										24981,
										24986
									],
									[
										24990,
										24995
									],
									[
										25028,
										25033
									],
									[
										25037,
										25042
									],
									[
										25095,
										25100
									],
									[
										25104,
										25109
									],
									[
										25165,
										25170
									],
									[
										25174,
										25179
									],
									[
										25220,
										25225
									],
									[
										25229,
										25234
									],
									[
										25267,
										25272
									],
									[
										25276,
										25281
									],
									[
										25330,
										25335
									],
									[
										25339,
										25344
									],
									[
										25398,
										25403
									],
									[
										25407,
										25412
									],
									[
										25451,
										25456
									],
									[
										25460,
										25465
									],
									[
										25498,
										25503
									],
									[
										25507,
										25512
									],
									[
										25561,
										25566
									],
									[
										25570,
										25575
									],
									[
										25629,
										25634
									],
									[
										25638,
										25643
									],
									[
										25682,
										25687
									],
									[
										25691,
										25696
									],
									[
										25729,
										25734
									],
									[
										25738,
										25743
									],
									[
										25794,
										25799
									],
									[
										25803,
										25808
									],
									[
										25863,
										25868
									],
									[
										25872,
										25877
									],
									[
										25917,
										25922
									],
									[
										25926,
										25931
									],
									[
										25964,
										25969
									],
									[
										25973,
										25978
									],
									[
										26031,
										26036
									],
									[
										26040,
										26045
									],
									[
										26101,
										26106
									],
									[
										26110,
										26115
									],
									[
										26156,
										26161
									],
									[
										26165,
										26170
									],
									[
										26207,
										26212
									],
									[
										26273,
										26278
									],
									[
										26305,
										26310
									],
									[
										26342,
										26347
									],
									[
										26387,
										26392
									],
									[
										26428,
										26433
									],
									[
										26483,
										26488
									],
									[
										26549,
										26554
									],
									[
										26620,
										26625
									],
									[
										26706,
										26711
									],
									[
										26765,
										26770
									],
									[
										26832,
										26837
									],
									[
										26904,
										26909
									],
									[
										27031,
										27036
									],
									[
										27142,
										27147
									],
									[
										27194,
										27199
									],
									[
										27280,
										27285
									],
									[
										27446,
										27451
									],
									[
										27809,
										27814
									],
									[
										27815,
										27820
									],
									[
										28059,
										28064
									],
									[
										28098,
										28103
									],
									[
										28142,
										28147
									],
									[
										28194,
										28199
									],
									[
										28242,
										28247
									],
									[
										28320,
										28325
									],
									[
										28506,
										28511
									],
									[
										28565,
										28570
									],
									[
										28828,
										28833
									],
									[
										28923,
										28928
									],
									[
										29098,
										29103
									],
									[
										29161,
										29166
									],
									[
										29390,
										29395
									],
									[
										29470,
										29475
									],
									[
										29632,
										29637
									],
									[
										29684,
										29689
									],
									[
										29742,
										29747
									],
									[
										29808,
										29813
									],
									[
										29871,
										29876
									],
									[
										29944,
										29949
									],
									[
										30040,
										30045
									],
									[
										30167,
										30172
									],
									[
										30240,
										30245
									],
									[
										30586,
										30591
									],
									[
										30592,
										30597
									],
									[
										30799,
										30804
									],
									[
										30805,
										30810
									],
									[
										31026,
										31031
									],
									[
										31032,
										31037
									],
									[
										31071,
										31076
									],
									[
										31273,
										31278
									],
									[
										31469,
										31474
									],
									[
										31552,
										31557
									],
									[
										31766,
										31771
									],
									[
										31797,
										31802
									],
									[
										31833,
										31838
									],
									[
										31877,
										31882
									],
									[
										31917,
										31922
									],
									[
										31987,
										31992
									],
									[
										32180,
										32185
									],
									[
										32231,
										32236
									],
									[
										32508,
										32513
									],
									[
										32558,
										32563
									],
									[
										32613,
										32618
									],
									[
										32676,
										32681
									],
									[
										32737,
										32742
									],
									[
										32826,
										32831
									],
									[
										33072,
										33077
									],
									[
										33285,
										33290
									],
									[
										33498,
										33503
									],
									[
										33676,
										33681
									],
									[
										33961,
										33966
									],
									[
										34053,
										34058
									],
									[
										34059,
										34064
									],
									[
										34202,
										34207
									],
									[
										34257,
										34262
									],
									[
										34317,
										34322
									],
									[
										34385,
										34390
									],
									[
										34451,
										34456
									],
									[
										34535,
										34540
									],
									[
										34622,
										34627
									],
									[
										34716,
										34721
									],
									[
										34947,
										34952
									],
									[
										35037,
										35042
									],
									[
										35186,
										35191
									],
									[
										35279,
										35284
									],
									[
										35527,
										35532
									],
									[
										35600,
										35605
									],
									[
										35745,
										35750
									],
									[
										35932,
										35937
									],
									[
										36160,
										36165
									],
									[
										36219,
										36224
									],
									[
										36283,
										36288
									],
									[
										36355,
										36360
									],
									[
										36425,
										36430
									],
									[
										36523,
										36528
									],
									[
										36822,
										36827
									],
									[
										36901,
										36906
									],
									[
										36979,
										36984
									],
									[
										37023,
										37028
									],
									[
										37072,
										37077
									],
									[
										37129,
										37134
									],
									[
										37184,
										37189
									],
									[
										37247,
										37252
									],
									[
										37310,
										37315
									],
									[
										37379,
										37384
									],
									[
										37459,
										37464
									],
									[
										37533,
										37538
									],
									[
										37608,
										37613
									],
									[
										37661,
										37666
									],
									[
										37732,
										37737
									],
									[
										37929,
										37934
									],
									[
										38015,
										38020
									],
									[
										38102,
										38107
									],
									[
										38154,
										38159
									],
									[
										38235,
										38240
									],
									[
										38318,
										38323
									],
									[
										38396,
										38401
									],
									[
										38573,
										38578
									],
									[
										38753,
										38758
									],
									[
										38913,
										38918
									],
									[
										39094,
										39099
									],
									[
										39287,
										39292
									],
									[
										39374,
										39379
									],
									[
										39603,
										39608
									],
									[
										39707,
										39712
									],
									[
										39869,
										39874
									],
									[
										40000,
										40005
									],
									[
										40052,
										40057
									],
									[
										40110,
										40115
									],
									[
										40176,
										40181
									],
									[
										40241,
										40246
									],
									[
										40326,
										40331
									],
									[
										40610,
										40615
									],
									[
										40683,
										40688
									],
									[
										40814,
										40819
									],
									[
										41089,
										41094
									],
									[
										41138,
										41143
									],
									[
										41405,
										41410
									],
									[
										41481,
										41486
									],
									[
										41555,
										41560
									],
									[
										41682,
										41687
									],
									[
										41737,
										41742
									],
									[
										42261,
										42266
									],
									[
										42355,
										42360
									],
									[
										42412,
										42417
									],
									[
										42460,
										42465
									],
									[
										42513,
										42518
									],
									[
										42574,
										42579
									],
									[
										42633,
										42638
									],
									[
										42689,
										42694
									],
									[
										42725,
										42730
									],
									[
										42789,
										42794
									],
									[
										42959,
										42964
									],
									[
										43032,
										43037
									],
									[
										43098,
										43103
									],
									[
										43299,
										43304
									],
									[
										43405,
										43410
									],
									[
										43552,
										43557
									],
									[
										43561,
										43566
									],
									[
										43641,
										43646
									],
									[
										43700,
										43705
									],
									[
										43851,
										43856
									],
									[
										43944,
										43949
									],
									[
										44156,
										44161
									],
									[
										44214,
										44219
									],
									[
										44694,
										44699
									],
									[
										44793,
										44798
									],
									[
										44937,
										44942
									],
									[
										45084,
										45089
									],
									[
										45295,
										45300
									],
									[
										45439,
										45444
									],
									[
										45670,
										45675
									],
									[
										45831,
										45836
									],
									[
										45899,
										45904
									],
									[
										46169,
										46174
									],
									[
										46271,
										46276
									],
									[
										46453,
										46458
									],
									[
										46523,
										46528
									],
									[
										46759,
										46764
									],
									[
										46846,
										46851
									],
									[
										47015,
										47020
									],
									[
										47075,
										47080
									],
									[
										47140,
										47145
									],
									[
										47213,
										47218
									],
									[
										47286,
										47291
									],
									[
										47366,
										47371
									],
									[
										47469,
										47474
									],
									[
										47603,
										47608
									],
									[
										47683,
										47688
									],
									[
										47855,
										47860
									],
									[
										47902,
										47907
									],
									[
										47954,
										47959
									],
									[
										48014,
										48019
									],
									[
										48074,
										48079
									],
									[
										48173,
										48178
									],
									[
										48259,
										48264
									],
									[
										48481,
										48486
									],
									[
										48652,
										48657
									],
									[
										48719,
										48724
									],
									[
										48788,
										48793
									],
									[
										48874,
										48879
									],
									[
										48923,
										48928
									],
									[
										48977,
										48982
									],
									[
										49039,
										49044
									],
									[
										49101,
										49106
									],
									[
										49158,
										49163
									],
									[
										49210,
										49215
									],
									[
										49275,
										49280
									],
									[
										49373,
										49378
									],
									[
										49556,
										49561
									],
									[
										49625,
										49630
									],
									[
										49894,
										49899
									],
									[
										49995,
										50000
									],
									[
										50176,
										50181
									],
									[
										50245,
										50250
									],
									[
										50480,
										50485
									],
									[
										50566,
										50571
									],
									[
										50734,
										50739
									],
									[
										50793,
										50798
									],
									[
										50857,
										50862
									],
									[
										50929,
										50934
									],
									[
										51001,
										51006
									],
									[
										51080,
										51085
									],
									[
										51182,
										51187
									],
									[
										51315,
										51320
									],
									[
										51394,
										51399
									],
									[
										51495,
										51500
									],
									[
										51581,
										51586
									],
									[
										51629,
										51634
									],
									[
										51682,
										51687
									],
									[
										51743,
										51748
									],
									[
										51804,
										51809
									],
									[
										51860,
										51865
									],
									[
										51912,
										51917
									],
									[
										51976,
										51981
									],
									[
										52136,
										52141
									],
									[
										52413,
										52418
									],
									[
										52499,
										52504
									],
									[
										52724,
										52729
									],
									[
										52826,
										52831
									],
									[
										52967,
										52972
									],
									[
										53035,
										53040
									],
									[
										53306,
										53311
									],
									[
										53409,
										53414
									],
									[
										53592,
										53597
									],
									[
										53663,
										53668
									],
									[
										53900,
										53905
									],
									[
										53988,
										53993
									],
									[
										54158,
										54163
									],
									[
										54219,
										54224
									],
									[
										54285,
										54290
									],
									[
										54359,
										54364
									],
									[
										54433,
										54438
									],
									[
										54514,
										54519
									],
									[
										54618,
										54623
									],
									[
										54753,
										54758
									],
									[
										54834,
										54839
									],
									[
										55139,
										55144
									],
									[
										55225,
										55230
									],
									[
										55275,
										55280
									],
									[
										55330,
										55335
									],
									[
										55393,
										55398
									],
									[
										55456,
										55461
									],
									[
										55514,
										55519
									],
									[
										55566,
										55571
									],
									[
										55632,
										55637
									],
									[
										55847,
										55852
									],
									[
										55982,
										55987
									],
									[
										56070,
										56075
									],
									[
										56236,
										56241
									],
									[
										56365,
										56370
									],
									[
										56435,
										56440
									],
									[
										56718,
										56723
									],
									[
										56755,
										56760
									],
									[
										56797,
										56802
									],
									[
										56847,
										56852
									],
									[
										56895,
										56900
									],
									[
										57075,
										57080
									],
									[
										57131,
										57136
									],
									[
										57401,
										57406
									],
									[
										57503,
										57508
									],
									[
										57685,
										57690
									],
									[
										57755,
										57760
									],
									[
										57991,
										57996
									],
									[
										58078,
										58083
									],
									[
										58247,
										58252
									],
									[
										58306,
										58311
									],
									[
										58371,
										58376
									],
									[
										58444,
										58449
									],
									[
										58516,
										58521
									],
									[
										58596,
										58601
									],
									[
										58699,
										58704
									],
									[
										58833,
										58838
									],
									[
										58913,
										58918
									],
									[
										59183,
										59188
									],
									[
										59285,
										59290
									],
									[
										59467,
										59472
									],
									[
										59537,
										59542
									],
									[
										59773,
										59778
									],
									[
										59860,
										59865
									],
									[
										60029,
										60034
									],
									[
										60088,
										60093
									],
									[
										60153,
										60158
									],
									[
										60226,
										60231
									],
									[
										60298,
										60303
									],
									[
										60378,
										60383
									],
									[
										60481,
										60486
									],
									[
										60615,
										60620
									],
									[
										60695,
										60700
									],
									[
										60800,
										60805
									],
									[
										60920,
										60925
									],
									[
										60956,
										60961
									],
									[
										60997,
										61002
									],
									[
										61046,
										61051
									],
									[
										61093,
										61098
									],
									[
										61137,
										61142
									],
									[
										61173,
										61178
									],
									[
										61225,
										61230
									],
									[
										61284,
										61289
									],
									[
										61340,
										61345
									],
									[
										61447,
										61452
									],
									[
										61572,
										61577
									],
									[
										61610,
										61615
									],
									[
										61653,
										61658
									],
									[
										61704,
										61709
									],
									[
										61753,
										61758
									],
									[
										61799,
										61804
									],
									[
										61840,
										61845
									],
									[
										61894,
										61899
									],
									[
										61958,
										61963
									],
									[
										62016,
										62021
									],
									[
										62252,
										62257
									],
									[
										62297,
										62302
									],
									[
										62347,
										62352
									],
									[
										62405,
										62410
									],
									[
										62461,
										62466
									],
									[
										62680,
										62685
									],
									[
										62755,
										62760
									],
									[
										63125,
										63130
									],
									[
										63131,
										63136
									],
									[
										63400,
										63405
									],
									[
										63644,
										63649
									],
									[
										63844,
										63849
									],
									[
										64014,
										64019
									],
									[
										64137,
										64142
									],
									[
										64166,
										64171
									],
									[
										64202,
										64207
									],
									[
										64244,
										64249
									],
									[
										64289,
										64294
									],
									[
										64332,
										64337
									],
									[
										64381,
										64386
									],
									[
										64430,
										64435
									],
									[
										64612,
										64617
									],
									[
										64663,
										64668
									],
									[
										64710,
										64715
									],
									[
										64761,
										64766
									],
									[
										64805,
										64810
									],
									[
										64850,
										64855
									],
									[
										64891,
										64896
									],
									[
										64931,
										64936
									],
									[
										64977,
										64982
									],
									[
										65023,
										65028
									],
									[
										65076,
										65081
									],
									[
										65130,
										65135
									],
									[
										65170,
										65175
									],
									[
										65212,
										65217
									],
									[
										65260,
										65265
									],
									[
										65308,
										65313
									],
									[
										65360,
										65365
									],
									[
										65410,
										65415
									],
									[
										65450,
										65455
									],
									[
										65499,
										65504
									],
									[
										65546,
										65551
									],
									[
										65602,
										65607
									],
									[
										65696,
										65701
									],
									[
										65736,
										65741
									],
									[
										65781,
										65786
									],
									[
										65837,
										65842
									],
									[
										65884,
										65889
									],
									[
										65913,
										65918
									],
									[
										65954,
										65959
									],
									[
										66003,
										66008
									],
									[
										66043,
										66048
									],
									[
										66085,
										66090
									],
									[
										66118,
										66123
									],
									[
										66161,
										66166
									],
									[
										66206,
										66211
									],
									[
										66247,
										66252
									],
									[
										66288,
										66293
									],
									[
										66323,
										66328
									],
									[
										66356,
										66361
									],
									[
										66403,
										66408
									],
									[
										66449,
										66454
									],
									[
										66488,
										66493
									],
									[
										66527,
										66532
									],
									[
										66560,
										66565
									],
									[
										66594,
										66599
									],
									[
										66632,
										66637
									],
									[
										66669,
										66674
									],
									[
										66717,
										66722
									],
									[
										66757,
										66762
									],
									[
										66911,
										66916
									],
									[
										66952,
										66957
									],
									[
										66990,
										66995
									],
									[
										67028,
										67033
									],
									[
										67064,
										67069
									],
									[
										67102,
										67107
									],
									[
										67137,
										67142
									],
									[
										67179,
										67184
									],
									[
										67309,
										67314
									],
									[
										67517,
										67522
									],
									[
										67609,
										67614
									],
									[
										67951,
										67956
									],
									[
										68012,
										68017
									],
									[
										68050,
										68055
									],
									[
										68095,
										68100
									],
									[
										68149,
										68154
									],
									[
										68194,
										68199
									],
									[
										68529,
										68534
									],
									[
										68936,
										68941
									],
									[
										69136,
										69141
									],
									[
										69337,
										69342
									],
									[
										69488,
										69493
									],
									[
										69733,
										69738
									],
									[
										70175,
										70180
									],
									[
										87373,
										87378
									],
									[
										88054,
										88059
									],
									[
										88571,
										88576
									],
									[
										173600,
										173605
									],
									[
										240211,
										240216
									],
									[
										240608,
										240613
									],
									[
										241146,
										241151
									],
									[
										241543,
										241548
									],
									[
										241920,
										241925
									],
									[
										242274,
										242279
									],
									[
										303484,
										303489
									],
									[
										340746,
										340751
									],
									[
										340756,
										340761
									],
									[
										352956,
										352961
									],
									[
										353399,
										353404
									],
									[
										439245,
										439250
									],
									[
										439255,
										439260
									],
									[
										439275,
										439280
									],
									[
										439903,
										439908
									],
									[
										439944,
										439949
									],
									[
										440342,
										440347
									],
									[
										440631,
										440636
									],
									[
										440642,
										440647
									],
									[
										440716,
										440721
									],
									[
										440727,
										440732
									],
									[
										440797,
										440802
									],
									[
										440807,
										440812
									],
									[
										440855,
										440860
									],
									[
										440866,
										440871
									],
									[
										440886,
										440891
									],
									[
										440943,
										440948
									],
									[
										440954,
										440959
									],
									[
										440974,
										440979
									],
									[
										441027,
										441032
									],
									[
										441037,
										441042
									],
									[
										441057,
										441062
									],
									[
										441088,
										441093
									],
									[
										441156,
										441161
									],
									[
										441220,
										441225
									],
									[
										441262,
										441267
									],
									[
										441332,
										441337
									],
									[
										441398,
										441403
									],
									[
										441442,
										441447
									],
									[
										441512,
										441517
									],
									[
										441578,
										441583
									],
									[
										441622,
										441627
									],
									[
										441696,
										441701
									],
									[
										441766,
										441771
									],
									[
										441814,
										441819
									],
									[
										441886,
										441891
									],
									[
										441954,
										441959
									],
									[
										442000,
										442005
									],
									[
										442074,
										442079
									],
									[
										442144,
										442149
									],
									[
										442192,
										442197
									],
									[
										442267,
										442272
									],
									[
										442338,
										442343
									],
									[
										442387,
										442392
									],
									[
										442463,
										442468
									],
									[
										442535,
										442540
									],
									[
										442585,
										442590
									],
									[
										442661,
										442666
									],
									[
										442733,
										442738
									],
									[
										442783,
										442788
									],
									[
										442836,
										442841
									],
									[
										442902,
										442907
									],
									[
										442964,
										442969
									],
									[
										443023,
										443028
									],
									[
										443082,
										443087
									],
									[
										443168,
										443173
									],
									[
										443250,
										443255
									],
									[
										443309,
										443314
									],
									[
										443368,
										443373
									],
									[
										443432,
										443437
									],
									[
										443488,
										443493
									],
									[
										443544,
										443549
									],
									[
										443599,
										443604
									],
									[
										443672,
										443677
									],
									[
										443745,
										443750
									],
									[
										443831,
										443836
									],
									[
										443919,
										443924
									],
									[
										443991,
										443996
									],
									[
										444077,
										444082
									],
									[
										444167,
										444172
									],
									[
										444260,
										444265
									],
									[
										444349,
										444354
									],
									[
										444416,
										444421
									],
									[
										444508,
										444513
									],
									[
										444596,
										444601
									],
									[
										444662,
										444667
									],
									[
										444756,
										444761
									],
									[
										444846,
										444851
									],
									[
										444914,
										444919
									],
									[
										444960,
										444965
									],
									[
										445005,
										445010
									],
									[
										445052,
										445057
									],
									[
										445165,
										445170
									],
									[
										445210,
										445215
									],
									[
										445321,
										445326
									],
									[
										445367,
										445372
									],
									[
										445441,
										445446
									],
									[
										445488,
										445493
									],
									[
										445555,
										445560
									],
									[
										445648,
										445653
									],
									[
										445737,
										445742
									],
									[
										445803,
										445808
									],
									[
										445896,
										445901
									],
									[
										445985,
										445990
									],
									[
										446322,
										446327
									],
									[
										446663,
										446668
									],
									[
										446718,
										446723
									],
									[
										446777,
										446782
									],
									[
										446834,
										446839
									],
									[
										446889,
										446894
									],
									[
										446948,
										446953
									],
									[
										447266,
										447271
									],
									[
										447603,
										447608
									],
									[
										447747,
										447752
									],
									[
										447905,
										447910
									],
									[
										448144,
										448149
									],
									[
										448517,
										448522
									],
									[
										448641,
										448646
									],
									[
										448799,
										448804
									],
									[
										448998,
										449003
									],
									[
										449296,
										449301
									],
									[
										449368,
										449373
									],
									[
										449634,
										449639
									],
									[
										449708,
										449713
									],
									[
										449986,
										449991
									],
									[
										450067,
										450072
									],
									[
										450156,
										450161
									],
									[
										450236,
										450241
									],
									[
										450597,
										450602
									],
									[
										450675,
										450680
									],
									[
										451101,
										451106
									],
									[
										451456,
										451461
									],
									[
										451769,
										451774
									],
									[
										451775,
										451780
									],
									[
										452055,
										452060
									],
									[
										452135,
										452140
									],
									[
										452440,
										452445
									],
									[
										452513,
										452518
									],
									[
										452577,
										452582
									],
									[
										452648,
										452653
									],
									[
										452921,
										452926
									],
									[
										452992,
										452997
									],
									[
										453056,
										453061
									],
									[
										453329,
										453334
									],
									[
										453423,
										453428
									],
									[
										453710,
										453715
									],
									[
										453804,
										453809
									],
									[
										454091,
										454096
									],
									[
										454163,
										454168
									],
									[
										454243,
										454248
									],
									[
										454556,
										454561
									],
									[
										454620,
										454625
									],
									[
										454701,
										454706
									],
									[
										454795,
										454800
									],
									[
										454878,
										454883
									],
									[
										455172,
										455177
									],
									[
										455268,
										455273
									],
									[
										455557,
										455562
									],
									[
										455862,
										455867
									],
									[
										455926,
										455931
									],
									[
										456007,
										456012
									],
									[
										456099,
										456104
									],
									[
										456180,
										456185
									],
									[
										456263,
										456268
									],
									[
										456552,
										456557
									],
									[
										456646,
										456651
									],
									[
										456933,
										456938
									],
									[
										457253,
										457258
									],
									[
										457317,
										457322
									],
									[
										457398,
										457403
									],
									[
										457480,
										457485
									],
									[
										457775,
										457780
									],
									[
										457899,
										457904
									],
									[
										457964,
										457969
									],
									[
										458028,
										458033
									],
									[
										458109,
										458114
									],
									[
										458408,
										458413
									],
									[
										458503,
										458508
									],
									[
										458791,
										458796
									],
									[
										459089,
										459094
									],
									[
										459098,
										459103
									],
									[
										459158,
										459163
									],
									[
										459234,
										459239
									],
									[
										459298,
										459303
									],
									[
										459379,
										459384
									],
									[
										459461,
										459466
									],
									[
										459542,
										459547
									],
									[
										459625,
										459630
									],
									[
										459715,
										459720
									],
									[
										460010,
										460015
									],
									[
										460142,
										460147
									],
									[
										460403,
										460408
									],
									[
										460665,
										460670
									],
									[
										460742,
										460747
									],
									[
										460827,
										460832
									],
									[
										461101,
										461106
									],
									[
										461195,
										461200
									],
									[
										461493,
										461498
									],
									[
										461583,
										461588
									],
									[
										461589,
										461594
									],
									[
										461653,
										461658
									],
									[
										461938,
										461943
									],
									[
										462155,
										462160
									],
									[
										462238,
										462243
									],
									[
										462326,
										462331
									],
									[
										462601,
										462606
									],
									[
										462757,
										462762
									],
									[
										462763,
										462768
									],
									[
										462827,
										462832
									],
									[
										462903,
										462908
									],
									[
										462967,
										462972
									],
									[
										463261,
										463266
									],
									[
										463348,
										463353
									],
									[
										463628,
										463633
									],
									[
										463743,
										463748
									],
									[
										463749,
										463754
									],
									[
										463813,
										463818
									],
									[
										464078,
										464083
									],
									[
										464145,
										464150
									],
									[
										464210,
										464215
									],
									[
										464507,
										464512
									],
									[
										464516,
										464521
									],
									[
										464584,
										464589
									],
									[
										464593,
										464598
									],
									[
										464669,
										464674
									],
									[
										464678,
										464683
									],
									[
										464740,
										464745
									],
									[
										464749,
										464754
									],
									[
										465034,
										465039
									],
									[
										465112,
										465117
									],
									[
										465383,
										465388
									],
									[
										465461,
										465466
									],
									[
										465732,
										465737
									],
									[
										465809,
										465814
									],
									[
										466079,
										466084
									],
									[
										466155,
										466160
									],
									[
										466424,
										466429
									],
									[
										466498,
										466503
									],
									[
										466765,
										466770
									],
									[
										466841,
										466846
									],
									[
										467110,
										467115
									],
									[
										467182,
										467187
									],
									[
										467447,
										467452
									],
									[
										467519,
										467524
									],
									[
										467784,
										467789
									],
									[
										467854,
										467859
									],
									[
										468117,
										468122
									],
									[
										468127,
										468132
									],
									[
										468147,
										468152
									],
									[
										468206,
										468211
									],
									[
										468216,
										468221
									],
									[
										468236,
										468241
									],
									[
										468488,
										468493
									],
									[
										468498,
										468503
									],
									[
										468574,
										468579
									],
									[
										468584,
										468589
									],
									[
										468853,
										468858
									],
									[
										468859,
										468864
									],
									[
										468986,
										468991
									],
									[
										468992,
										468997
									],
									[
										469354,
										469359
									],
									[
										469661,
										469666
									],
									[
										469941,
										469946
									],
									[
										470011,
										470016
									],
									[
										470020,
										470025
									],
									[
										470086,
										470091
									],
									[
										470150,
										470155
									],
									[
										470238,
										470243
									],
									[
										470588,
										470593
									],
									[
										470938,
										470943
									],
									[
										470947,
										470952
									],
									[
										471288,
										471293
									],
									[
										471674,
										471679
									],
									[
										471767,
										471772
									],
									[
										471860,
										471865
									],
									[
										471931,
										471936
									],
									[
										472026,
										472031
									],
									[
										472119,
										472124
									],
									[
										472213,
										472218
									],
									[
										472306,
										472311
									],
									[
										472395,
										472400
									],
									[
										472460,
										472465
									],
									[
										472546,
										472551
									],
									[
										472619,
										472624
									],
									[
										472685,
										472690
									],
									[
										472762,
										472767
									],
									[
										472839,
										472844
									],
									[
										472915,
										472920
									],
									[
										472990,
										472995
									],
									[
										473063,
										473068
									],
									[
										473138,
										473143
									],
									[
										473209,
										473214
									],
									[
										473280,
										473285
									],
									[
										473349,
										473354
									],
									[
										473359,
										473364
									],
									[
										473379,
										473384
									],
									[
										473437,
										473442
									],
									[
										473447,
										473452
									],
									[
										473770,
										473775
									],
									[
										473865,
										473870
									],
									[
										474064,
										474069
									],
									[
										474383,
										474388
									],
									[
										474741,
										474746
									],
									[
										474758,
										474763
									],
									[
										475090,
										475095
									],
									[
										475372,
										475377
									],
									[
										475378,
										475383
									],
									[
										475429,
										475434
									],
									[
										475435,
										475440
									],
									[
										475550,
										475555
									],
									[
										475556,
										475561
									],
									[
										475754,
										475759
									],
									[
										475813,
										475818
									],
									[
										475927,
										475932
									],
									[
										475959,
										475964
									],
									[
										476153,
										476158
									],
									[
										476159,
										476164
									],
									[
										476387,
										476392
									],
									[
										476393,
										476398
									],
									[
										476443,
										476448
									],
									[
										476497,
										476502
									],
									[
										476529,
										476534
									],
									[
										476657,
										476662
									],
									[
										476714,
										476719
									],
									[
										476742,
										476747
									],
									[
										476792,
										476797
									],
									[
										476833,
										476838
									],
									[
										476839,
										476844
									],
									[
										476885,
										476890
									],
									[
										477069,
										477074
									],
									[
										477269,
										477274
									],
									[
										477569,
										477574
									],
									[
										477623,
										477628
									],
									[
										477629,
										477634
									],
									[
										477816,
										477821
									],
									[
										477825,
										477830
									],
									[
										477872,
										477877
									],
									[
										477881,
										477886
									],
									[
										478026,
										478031
									],
									[
										478035,
										478040
									],
									[
										478241,
										478246
									],
									[
										478303,
										478308
									],
									[
										478456,
										478461
									],
									[
										478487,
										478492
									],
									[
										478676,
										478681
									],
									[
										478685,
										478690
									],
									[
										478908,
										478913
									],
									[
										478917,
										478922
									],
									[
										478965,
										478970
									],
									[
										479023,
										479028
									],
									[
										479215,
										479220
									],
									[
										479408,
										479413
									],
									[
										479566,
										479571
									],
									[
										479620,
										479625
									],
									[
										479629,
										479634
									],
									[
										479818,
										479823
									],
									[
										479827,
										479832
									],
									[
										479880,
										479885
									],
									[
										479889,
										479894
									],
									[
										480006,
										480011
									],
									[
										480015,
										480020
									],
									[
										480102,
										480107
									],
									[
										480141,
										480146
									],
									[
										480255,
										480260
									],
									[
										480316,
										480321
									],
									[
										480616,
										480621
									],
									[
										480625,
										480630
									],
									[
										480735,
										480740
									],
									[
										480840,
										480845
									],
									[
										480850,
										480855
									],
									[
										480915,
										480920
									],
									[
										480925,
										480930
									],
									[
										481004,
										481009
									],
									[
										481014,
										481019
									],
									[
										481080,
										481085
									],
									[
										481090,
										481095
									],
									[
										481171,
										481176
									],
									[
										481181,
										481186
									],
									[
										481248,
										481253
									],
									[
										481258,
										481263
									],
									[
										481341,
										481346
									],
									[
										481351,
										481356
									],
									[
										481418,
										481423
									],
									[
										481428,
										481433
									],
									[
										481511,
										481516
									],
									[
										481521,
										481526
									],
									[
										481591,
										481596
									],
									[
										481601,
										481606
									],
									[
										481690,
										481695
									],
									[
										481700,
										481705
									],
									[
										481765,
										481770
									],
									[
										481775,
										481780
									],
									[
										481926,
										481931
									],
									[
										481980,
										481985
									],
									[
										481989,
										481994
									],
									[
										482183,
										482188
									],
									[
										482244,
										482249
									],
									[
										482407,
										482412
									],
									[
										482617,
										482622
									],
									[
										482860,
										482865
									],
									[
										483097,
										483102
									],
									[
										483510,
										483515
									],
									[
										483564,
										483569
									],
									[
										483767,
										483772
									],
									[
										483829,
										483834
									],
									[
										483993,
										483998
									],
									[
										484204,
										484209
									],
									[
										484447,
										484452
									],
									[
										484685,
										484690
									],
									[
										485101,
										485106
									],
									[
										485155,
										485160
									],
									[
										485358,
										485363
									],
									[
										485419,
										485424
									],
									[
										485582,
										485587
									],
									[
										485792,
										485797
									],
									[
										486035,
										486040
									],
									[
										486272,
										486277
									],
									[
										486685,
										486690
									],
									[
										486739,
										486744
									],
									[
										486943,
										486948
									],
									[
										487006,
										487011
									],
									[
										487171,
										487176
									],
									[
										487383,
										487388
									],
									[
										487626,
										487631
									],
									[
										487865,
										487870
									],
									[
										488284,
										488289
									],
									[
										488338,
										488343
									],
									[
										488540,
										488545
									],
									[
										488599,
										488604
									],
									[
										488760,
										488765
									],
									[
										488968,
										488973
									],
									[
										489211,
										489216
									],
									[
										489446,
										489451
									],
									[
										489853,
										489858
									],
									[
										489907,
										489912
									],
									[
										490109,
										490114
									],
									[
										490172,
										490177
									],
									[
										490337,
										490342
									],
									[
										490549,
										490554
									],
									[
										490792,
										490797
									],
									[
										491031,
										491036
									],
									[
										491450,
										491455
									],
									[
										491504,
										491509
									],
									[
										491702,
										491707
									],
									[
										491757,
										491762
									],
									[
										491914,
										491919
									],
									[
										492118,
										492123
									],
									[
										492361,
										492366
									],
									[
										492592,
										492597
									],
									[
										492987,
										492992
									],
									[
										493041,
										493046
									],
									[
										493233,
										493238
									],
									[
										493290,
										493295
									],
									[
										493449,
										493454
									],
									[
										493655,
										493660
									],
									[
										493898,
										493903
									],
									[
										494131,
										494136
									],
									[
										494532,
										494537
									],
									[
										494586,
										494591
									],
									[
										494780,
										494785
									],
									[
										494837,
										494842
									],
									[
										494996,
										495001
									],
									[
										495202,
										495207
									],
									[
										495445,
										495450
									],
									[
										495678,
										495683
									],
									[
										496079,
										496084
									],
									[
										496133,
										496138
									],
									[
										496322,
										496327
									],
									[
										496374,
										496379
									],
									[
										496490,
										496495
									],
									[
										496548,
										496553
									],
									[
										496766,
										496771
									],
									[
										496939,
										496944
									],
									[
										497168,
										497173
									],
									[
										497444,
										497449
									],
									[
										497639,
										497644
									],
									[
										497693,
										497698
									],
									[
										497884,
										497889
									],
									[
										497943,
										497948
									],
									[
										498100,
										498105
									],
									[
										498302,
										498307
									],
									[
										498580,
										498585
									],
									[
										498815,
										498820
									],
									[
										499292,
										499297
									],
									[
										499346,
										499351
									],
									[
										499536,
										499541
									],
									[
										499587,
										499592
									],
									[
										499736,
										499741
									],
									[
										499944,
										499949
									],
									[
										500322,
										500327
									],
									[
										500549,
										500554
									],
									[
										501202,
										501207
									],
									[
										501256,
										501261
									],
									[
										501461,
										501466
									],
									[
										501471,
										501476
									],
									[
										501491,
										501496
									],
									[
										501535,
										501540
									],
									[
										501545,
										501550
									],
									[
										501565,
										501570
									],
									[
										501711,
										501716
									],
									[
										501721,
										501726
									],
									[
										501741,
										501746
									],
									[
										501934,
										501939
									],
									[
										501962,
										501967
									],
									[
										502035,
										502040
									],
									[
										502201,
										502206
									],
									[
										502237,
										502242
									],
									[
										502494,
										502499
									],
									[
										502504,
										502509
									],
									[
										502524,
										502529
									],
									[
										502744,
										502749
									],
									[
										502754,
										502759
									],
									[
										502774,
										502779
									],
									[
										502827,
										502832
									],
									[
										502961,
										502966
									],
									[
										503230,
										503235
									],
									[
										503434,
										503439
									],
									[
										503610,
										503615
									],
									[
										503646,
										503651
									],
									[
										503703,
										503708
									],
									[
										503713,
										503718
									],
									[
										503733,
										503738
									],
									[
										503928,
										503933
									],
									[
										503938,
										503943
									],
									[
										503999,
										504004
									],
									[
										504009,
										504014
									],
									[
										504172,
										504177
									],
									[
										504182,
										504187
									],
									[
										504392,
										504397
									],
									[
										504420,
										504425
									],
									[
										504666,
										504671
									],
									[
										504676,
										504681
									],
									[
										504913,
										504918
									],
									[
										504923,
										504928
									],
									[
										505330,
										505335
									],
									[
										505366,
										505371
									],
									[
										505423,
										505428
									],
									[
										505433,
										505438
									],
									[
										505646,
										505651
									],
									[
										505718,
										505723
									],
									[
										505892,
										505897
									],
									[
										506113,
										506118
									],
									[
										506374,
										506379
									],
									[
										506622,
										506627
									],
									[
										507052,
										507057
									],
									[
										507140,
										507145
									],
									[
										507362,
										507367
									],
									[
										507432,
										507437
									],
									[
										507600,
										507605
									],
									[
										507676,
										507681
									],
									[
										507757,
										507762
									],
									[
										507995,
										508000
									],
									[
										508200,
										508205
									],
									[
										508446,
										508451
									],
									[
										508750,
										508755
									],
									[
										508984,
										508989
									],
									[
										509075,
										509080
									],
									[
										509300,
										509305
									],
									[
										509375,
										509380
									],
									[
										509548,
										509553
									],
									[
										509763,
										509768
									],
									[
										509956,
										509961
									],
									[
										510207,
										510212
									],
									[
										510497,
										510502
									],
									[
										510588,
										510593
									],
									[
										510822,
										510827
									],
									[
										510901,
										510906
									],
									[
										511078,
										511083
									],
									[
										511300,
										511305
									],
									[
										511525,
										511530
									],
									[
										511780,
										511785
									],
									[
										512147,
										512152
									],
									[
										512238,
										512243
									],
									[
										512461,
										512466
									],
									[
										512525,
										512530
									],
									[
										512653,
										512658
									],
									[
										512723,
										512728
									],
									[
										512915,
										512920
									],
									[
										513106,
										513111
									],
									[
										513347,
										513352
									],
									[
										513655,
										513660
									],
									[
										513864,
										513869
									],
									[
										514074,
										514079
									],
									[
										514162,
										514167
									],
									[
										514378,
										514383
									],
									[
										514450,
										514455
									],
									[
										514613,
										514618
									],
									[
										514768,
										514773
									],
									[
										514981,
										514986
									],
									[
										515229,
										515234
									],
									[
										515490,
										515495
									],
									[
										515617,
										515622
									],
									[
										515837,
										515842
									],
									[
										515905,
										515910
									],
									[
										516032,
										516037
									],
									[
										516076,
										516081
									],
									[
										516290,
										516295
									],
									[
										516347,
										516352
									],
									[
										516421,
										516426
									],
									[
										516631,
										516636
									],
									[
										516768,
										516773
									],
									[
										516851,
										516856
									],
									[
										517128,
										517133
									],
									[
										517372,
										517377
									],
									[
										517764,
										517769
									],
									[
										518004,
										518009
									],
									[
										518099,
										518104
									],
									[
										518153,
										518158
									],
									[
										518338,
										518343
									],
									[
										518418,
										518423
									],
									[
										518469,
										518474
									],
									[
										518548,
										518553
									],
									[
										518736,
										518741
									],
									[
										518907,
										518912
									],
									[
										518946,
										518951
									],
									[
										519096,
										519101
									],
									[
										519311,
										519316
									],
									[
										519497,
										519502
									],
									[
										519589,
										519594
									],
									[
										519806,
										519811
									],
									[
										519875,
										519880
									],
									[
										520003,
										520008
									],
									[
										520063,
										520068
									],
									[
										520247,
										520252
									],
									[
										520304,
										520309
									],
									[
										520378,
										520383
									],
									[
										520453,
										520458
									],
									[
										520669,
										520674
									],
									[
										520825,
										520830
									],
									[
										520926,
										520931
									],
									[
										521175,
										521180
									],
									[
										521420,
										521425
									],
									[
										521725,
										521730
									],
									[
										521785,
										521790
									],
									[
										521955,
										521960
									],
									[
										522079,
										522084
									],
									[
										522309,
										522314
									],
									[
										522390,
										522395
									],
									[
										522573,
										522578
									],
									[
										522803,
										522808
									],
									[
										523084,
										523089
									],
									[
										523341,
										523346
									],
									[
										523778,
										523783
									],
									[
										523902,
										523907
									],
									[
										524143,
										524148
									],
									[
										524223,
										524228
									],
									[
										524405,
										524410
									],
									[
										524634,
										524639
									],
									[
										524915,
										524920
									],
									[
										525171,
										525176
									],
									[
										525605,
										525610
									],
									[
										525729,
										525734
									],
									[
										525968,
										525973
									],
									[
										526047,
										526052
									],
									[
										526228,
										526233
									],
									[
										526456,
										526461
									],
									[
										526737,
										526742
									],
									[
										526992,
										526997
									],
									[
										527423,
										527428
									],
									[
										527547,
										527552
									],
									[
										527774,
										527779
									],
									[
										527842,
										527847
									],
									[
										527969,
										527974
									],
									[
										528029,
										528034
									],
									[
										528165,
										528170
									],
									[
										528222,
										528227
									],
									[
										528296,
										528301
									],
									[
										528370,
										528375
									],
									[
										528580,
										528585
									],
									[
										528735,
										528740
									],
									[
										528836,
										528841
									],
									[
										529083,
										529088
									],
									[
										529327,
										529332
									],
									[
										529603,
										529608
									],
									[
										529663,
										529668
									],
									[
										529833,
										529838
									],
									[
										529957,
										529962
									],
									[
										530175,
										530180
									],
									[
										530245,
										530250
									],
									[
										530374,
										530379
									],
									[
										530434,
										530439
									],
									[
										530658,
										530663
									],
									[
										530715,
										530720
									],
									[
										530789,
										530794
									],
									[
										530865,
										530870
									],
									[
										531075,
										531080
									],
									[
										531232,
										531237
									],
									[
										531333,
										531338
									],
									[
										531584,
										531589
									],
									[
										531830,
										531835
									],
									[
										532133,
										532138
									],
									[
										532193,
										532198
									],
									[
										532363,
										532368
									],
									[
										532487,
										532492
									],
									[
										532704,
										532709
									],
									[
										532771,
										532776
									],
									[
										532942,
										532947
									],
									[
										532999,
										533004
									],
									[
										533073,
										533078
									],
									[
										533297,
										533302
									],
									[
										533507,
										533512
									],
									[
										533750,
										533755
									],
									[
										533996,
										534001
									],
									[
										534076,
										534081
									],
									[
										534136,
										534141
									],
									[
										534313,
										534318
									],
									[
										534437,
										534442
									],
									[
										534641,
										534646
									],
									[
										534698,
										534703
									],
									[
										534868,
										534873
									],
									[
										534967,
										534972
									],
									[
										535388,
										535393
									],
									[
										535621,
										535626
									],
									[
										536377,
										536382
									],
									[
										536643,
										536648
									],
									[
										536740,
										536745
									],
									[
										536835,
										536840
									],
									[
										536928,
										536933
									],
									[
										537021,
										537026
									],
									[
										537118,
										537123
									],
									[
										537223,
										537228
									],
									[
										537328,
										537333
									],
									[
										537435,
										537440
									],
									[
										537621,
										537626
									],
									[
										537689,
										537694
									],
									[
										537758,
										537763
									],
									[
										537825,
										537830
									],
									[
										537893,
										537898
									],
									[
										538072,
										538077
									],
									[
										538156,
										538161
									],
									[
										538372,
										538377
									],
									[
										538451,
										538456
									],
									[
										538632,
										538637
									],
									[
										538860,
										538865
									],
									[
										539136,
										539141
									],
									[
										539391,
										539396
									],
									[
										539832,
										539837
									],
									[
										539951,
										539956
									],
									[
										540189,
										540194
									],
									[
										540268,
										540273
									],
									[
										540449,
										540454
									],
									[
										540677,
										540682
									],
									[
										540953,
										540958
									],
									[
										541208,
										541213
									],
									[
										541649,
										541654
									],
									[
										541768,
										541773
									],
									[
										541985,
										541990
									],
									[
										542043,
										542048
									],
									[
										542160,
										542165
									],
									[
										542209,
										542214
									],
									[
										542287,
										542292
									],
									[
										542344,
										542349
									],
									[
										542408,
										542413
									],
									[
										542611,
										542616
									],
									[
										542738,
										542743
									],
									[
										542827,
										542832
									],
									[
										543226,
										543231
									],
									[
										543460,
										543465
									],
									[
										544030,
										544035
									],
									[
										544116,
										544121
									],
									[
										544319,
										544324
									],
									[
										544384,
										544389
									],
									[
										544513,
										544518
									],
									[
										544620,
										544625
									],
									[
										544890,
										544895
									],
									[
										545131,
										545136
									],
									[
										545566,
										545571
									],
									[
										545652,
										545657
									],
									[
										545853,
										545858
									],
									[
										545909,
										545914
									],
									[
										546024,
										546029
									],
									[
										546068,
										546073
									],
									[
										546141,
										546146
									],
									[
										546198,
										546203
									],
									[
										546401,
										546406
									],
									[
										546526,
										546531
									],
									[
										546609,
										546614
									],
									[
										546998,
										547003
									],
									[
										547230,
										547235
									],
									[
										547794,
										547799
									],
									[
										547880,
										547885
									],
									[
										548091,
										548096
									],
									[
										548156,
										548161
									],
									[
										548275,
										548280
									],
									[
										548284,
										548289
									],
									[
										548343,
										548348
									],
									[
										548400,
										548405
									],
									[
										548481,
										548486
									],
									[
										548677,
										548682
									],
									[
										548795,
										548800
									],
									[
										548831,
										548836
									],
									[
										549038,
										549043
									],
									[
										549279,
										549284
									],
									[
										549332,
										549337
									],
									[
										549395,
										549400
									],
									[
										549592,
										549597
									],
									[
										549801,
										549806
									],
									[
										549937,
										549942
									],
									[
										549997,
										550002
									],
									[
										550149,
										550154
									],
									[
										550159,
										550164
									],
									[
										550309,
										550314
									],
									[
										550472,
										550477
									],
									[
										550638,
										550643
									],
									[
										550684,
										550689
									],
									[
										550844,
										550849
									],
									[
										551032,
										551037
									],
									[
										551235,
										551240
									],
									[
										551498,
										551503
									],
									[
										551577,
										551582
									],
									[
										551846,
										551851
									],
									[
										551911,
										551916
									],
									[
										552084,
										552089
									],
									[
										552190,
										552195
									],
									[
										552307,
										552312
									],
									[
										552342,
										552347
									],
									[
										552550,
										552555
									],
									[
										552792,
										552797
									],
									[
										552845,
										552850
									],
									[
										552902,
										552907
									],
									[
										552937,
										552942
									],
									[
										553068,
										553073
									],
									[
										553128,
										553133
									],
									[
										553159,
										553164
									],
									[
										553212,
										553217
									],
									[
										553267,
										553272
									],
									[
										553316,
										553321
									],
									[
										553481,
										553486
									],
									[
										553603,
										553608
									],
									[
										553718,
										553723
									],
									[
										553834,
										553839
									],
									[
										553950,
										553955
									],
									[
										554067,
										554072
									],
									[
										554287,
										554292
									],
									[
										554490,
										554495
									],
									[
										554684,
										554689
									],
									[
										554895,
										554900
									],
									[
										554961,
										554966
									],
									[
										555135,
										555140
									],
									[
										555242,
										555247
									],
									[
										555360,
										555365
									],
									[
										555396,
										555401
									],
									[
										555605,
										555610
									],
									[
										555848,
										555853
									],
									[
										555902,
										555907
									],
									[
										555960,
										555965
									],
									[
										555996,
										556001
									],
									[
										556128,
										556133
									],
									[
										556189,
										556194
									],
									[
										556221,
										556226
									],
									[
										556275,
										556280
									],
									[
										556331,
										556336
									],
									[
										556381,
										556386
									],
									[
										556609,
										556614
									],
									[
										556807,
										556812
									],
									[
										556970,
										556975
									],
									[
										557175,
										557180
									],
									[
										557234,
										557239
									],
									[
										557401,
										557406
									],
									[
										557501,
										557506
									],
									[
										557612,
										557617
									],
									[
										557641,
										557646
									],
									[
										557843,
										557848
									],
									[
										558079,
										558084
									],
									[
										558126,
										558131
									],
									[
										558177,
										558182
									],
									[
										558206,
										558211
									],
									[
										558331,
										558336
									],
									[
										558385,
										558390
									],
									[
										558410,
										558415
									],
									[
										558457,
										558462
									],
									[
										558506,
										558511
									],
									[
										558549,
										558554
									],
									[
										558708,
										558713
									],
									[
										558815,
										558820
									],
									[
										558921,
										558926
									],
									[
										558952,
										558957
									],
									[
										559032,
										559037
									],
									[
										559050,
										559055
									],
									[
										559137,
										559142
									],
									[
										559155,
										559160
									],
									[
										559248,
										559253
									],
									[
										559266,
										559271
									],
									[
										559362,
										559367
									],
									[
										559380,
										559385
									],
									[
										559474,
										559479
									],
									[
										559492,
										559497
									],
									[
										559588,
										559593
									],
									[
										559610,
										559615
									],
									[
										559706,
										559711
									],
									[
										559728,
										559733
									],
									[
										559823,
										559828
									],
									[
										559932,
										559937
									],
									[
										560032,
										560037
									],
									[
										560130,
										560135
									],
									[
										560230,
										560235
									],
									[
										560329,
										560334
									],
									[
										560428,
										560433
									],
									[
										560446,
										560451
									],
									[
										560544,
										560549
									],
									[
										560566,
										560571
									],
									[
										560664,
										560669
									],
									[
										560682,
										560687
									],
									[
										560784,
										560789
									],
									[
										560802,
										560807
									],
									[
										560897,
										560902
									],
									[
										560915,
										560920
									],
									[
										561011,
										561016
									],
									[
										561029,
										561034
									],
									[
										561121,
										561126
									],
									[
										561139,
										561144
									],
									[
										561230,
										561235
									],
									[
										561248,
										561253
									],
									[
										561345,
										561350
									],
									[
										561363,
										561368
									],
									[
										561460,
										561465
									],
									[
										561478,
										561483
									],
									[
										561582,
										561587
									],
									[
										561600,
										561605
									],
									[
										561705,
										561710
									],
									[
										561723,
										561728
									],
									[
										561814,
										561819
									],
									[
										561832,
										561837
									],
									[
										561925,
										561930
									],
									[
										561943,
										561948
									],
									[
										562042,
										562047
									],
									[
										562060,
										562065
									],
									[
										562159,
										562164
									],
									[
										562177,
										562182
									],
									[
										562280,
										562285
									],
									[
										562298,
										562303
									],
									[
										562399,
										562404
									],
									[
										562417,
										562422
									],
									[
										562508,
										562513
									],
									[
										562526,
										562531
									],
									[
										562626,
										562631
									],
									[
										562644,
										562649
									],
									[
										562742,
										562747
									],
									[
										562760,
										562765
									],
									[
										562867,
										562872
									],
									[
										562885,
										562890
									],
									[
										563078,
										563083
									],
									[
										563275,
										563280
									],
									[
										563335,
										563340
									],
									[
										563374,
										563379
									],
									[
										563421,
										563426
									],
									[
										563459,
										563464
									],
									[
										563499,
										563504
									],
									[
										563530,
										563535
									],
									[
										563571,
										563576
									],
									[
										563614,
										563619
									],
									[
										563653,
										563658
									],
									[
										563692,
										563697
									],
									[
										563725,
										563730
									],
									[
										563756,
										563761
									],
									[
										563801,
										563806
									],
									[
										563845,
										563850
									],
									[
										563882,
										563887
									],
									[
										563919,
										563924
									],
									[
										563950,
										563955
									],
									[
										563982,
										563987
									],
									[
										564018,
										564023
									],
									[
										564053,
										564058
									],
									[
										564099,
										564104
									],
									[
										564137,
										564142
									],
									[
										564280,
										564285
									],
									[
										564319,
										564324
									],
									[
										564355,
										564360
									],
									[
										564391,
										564396
									],
									[
										564425,
										564430
									],
									[
										564461,
										564466
									],
									[
										564494,
										564499
									],
									[
										564534,
										564539
									],
									[
										564703,
										564708
									],
									[
										564876,
										564881
									],
									[
										564943,
										564948
									],
									[
										565187,
										565192
									],
									[
										565393,
										565398
									],
									[
										565636,
										565641
									],
									[
										565693,
										565698
									],
									[
										565810,
										565815
									],
									[
										565917,
										565922
									],
									[
										566035,
										566040
									],
									[
										566071,
										566076
									],
									[
										566271,
										566276
									],
									[
										566505,
										566510
									],
									[
										566559,
										566564
									],
									[
										566617,
										566622
									],
									[
										566653,
										566658
									],
									[
										566785,
										566790
									],
									[
										566846,
										566851
									],
									[
										566878,
										566883
									],
									[
										566932,
										566937
									],
									[
										566979,
										566984
									],
									[
										567029,
										567034
									],
									[
										567217,
										567222
									],
									[
										567421,
										567426
									],
									[
										567597,
										567602
									],
									[
										567777,
										567782
									],
									[
										568052,
										568057
									],
									[
										568315,
										568320
									],
									[
										568584,
										568589
									],
									[
										568633,
										568638
									],
									[
										568888,
										568893
									],
									[
										568938,
										568943
									],
									[
										569186,
										569191
									],
									[
										569270,
										569275
									],
									[
										569499,
										569504
									],
									[
										569728,
										569733
									],
									[
										570177,
										570182
									],
									[
										570186,
										570191
									],
									[
										570232,
										570237
									],
									[
										570241,
										570246
									],
									[
										570435,
										570440
									],
									[
										570485,
										570490
									],
									[
										570715,
										570720
									],
									[
										570787,
										570792
									],
									[
										570883,
										570888
									],
									[
										570955,
										570960
									],
									[
										571051,
										571056
									],
									[
										571101,
										571106
									],
									[
										571175,
										571180
									],
									[
										571249,
										571254
									],
									[
										571347,
										571352
									],
									[
										571419,
										571424
									],
									[
										571515,
										571520
									],
									[
										571588,
										571593
									],
									[
										571685,
										571690
									],
									[
										571757,
										571762
									],
									[
										571853,
										571858
									],
									[
										571921,
										571926
									],
									[
										572013,
										572018
									],
									[
										572057,
										572062
									],
									[
										572125,
										572130
									],
									[
										572190,
										572195
									],
									[
										572279,
										572284
									],
									[
										572331,
										572336
									],
									[
										572407,
										572412
									],
									[
										572452,
										572457
									],
									[
										572521,
										572526
									],
									[
										572577,
										572582
									],
									[
										572657,
										572662
									],
									[
										572713,
										572718
									],
									[
										572793,
										572798
									],
									[
										572848,
										572853
									],
									[
										572927,
										572932
									],
									[
										572981,
										572986
									],
									[
										573059,
										573064
									],
									[
										573111,
										573116
									],
									[
										573187,
										573192
									],
									[
										573241,
										573246
									],
									[
										573319,
										573324
									],
									[
										573369,
										573374
									],
									[
										573443,
										573448
									],
									[
										573493,
										573498
									],
									[
										573567,
										573572
									],
									[
										573615,
										573620
									],
									[
										573687,
										573692
									],
									[
										573697,
										573702
									],
									[
										573717,
										573722
									],
									[
										573754,
										573759
									],
									[
										573764,
										573769
									],
									[
										573784,
										573789
									],
									[
										573845,
										573850
									],
									[
										573855,
										573860
									],
									[
										573909,
										573914
									],
									[
										573919,
										573924
									],
									[
										574160,
										574165
									],
									[
										574212,
										574217
									],
									[
										574456,
										574461
									],
									[
										574515,
										574520
									],
									[
										574598,
										574603
									],
									[
										574656,
										574661
									],
									[
										574879,
										574884
									],
									[
										574937,
										574942
									],
									[
										575019,
										575024
									],
									[
										575070,
										575075
									],
									[
										575145,
										575150
									],
									[
										575194,
										575199
									],
									[
										575267,
										575272
									],
									[
										575330,
										575335
									],
									[
										575417,
										575422
									],
									[
										575478,
										575483
									],
									[
										575563,
										575568
									],
									[
										575625,
										575630
									],
									[
										575711,
										575716
									],
									[
										575771,
										575776
									],
									[
										575855,
										575860
									],
									[
										575916,
										575921
									],
									[
										576001,
										576006
									],
									[
										576066,
										576071
									],
									[
										576243,
										576248
									],
									[
										576300,
										576305
									],
									[
										576381,
										576386
									],
									[
										576444,
										576449
									],
									[
										576531,
										576536
									],
									[
										576540,
										576545
									],
									[
										576580,
										576585
									],
									[
										576589,
										576594
									],
									[
										576653,
										576658
									],
									[
										576659,
										576664
									],
									[
										576703,
										576708
									],
									[
										576709,
										576714
									],
									[
										576913,
										576918
									],
									[
										576971,
										576976
									],
									[
										577228,
										577233
									],
									[
										577238,
										577243
									],
									[
										577541,
										577546
									],
									[
										577893,
										577898
									],
									[
										577985,
										577990
									],
									[
										578077,
										578082
									],
									[
										578146,
										578151
									],
									[
										578240,
										578245
									],
									[
										578332,
										578337
									],
									[
										578425,
										578430
									],
									[
										578516,
										578521
									],
									[
										578603,
										578608
									],
									[
										578665,
										578670
									],
									[
										578749,
										578754
									],
									[
										578819,
										578824
									],
									[
										578882,
										578887
									],
									[
										578956,
										578961
									],
									[
										579030,
										579035
									],
									[
										579103,
										579108
									],
									[
										579175,
										579180
									],
									[
										579245,
										579250
									],
									[
										579317,
										579322
									],
									[
										579385,
										579390
									],
									[
										579453,
										579458
									],
									[
										579519,
										579524
									],
									[
										579530,
										579535
									],
									[
										579551,
										579556
									],
									[
										579605,
										579610
									],
									[
										579616,
										579621
									],
									[
										580015,
										580020
									],
									[
										580409,
										580414
									],
									[
										580483,
										580488
									],
									[
										580861,
										580866
									],
									[
										580938,
										580943
									],
									[
										581008,
										581013
									],
									[
										581076,
										581081
									],
									[
										581159,
										581164
									],
									[
										581240,
										581245
									],
									[
										581322,
										581327
									],
									[
										581402,
										581407
									],
									[
										581482,
										581487
									],
									[
										581611,
										581616
									],
									[
										581687,
										581692
									],
									[
										581769,
										581774
									],
									[
										581779,
										581784
									],
									[
										581836,
										581841
									],
									[
										581843,
										581848
									],
									[
										582185,
										582190
									],
									[
										582521,
										582526
									],
									[
										582531,
										582536
									],
									[
										582872,
										582877
									],
									[
										582883,
										582888
									],
									[
										582951,
										582956
									],
									[
										582962,
										582967
									],
									[
										582983,
										582988
									],
									[
										583033,
										583038
									],
									[
										583095,
										583100
									],
									[
										583159,
										583164
									],
									[
										583223,
										583228
									],
									[
										583291,
										583296
									],
									[
										583357,
										583362
									],
									[
										583425,
										583430
									],
									[
										583494,
										583499
									],
									[
										583564,
										583569
									],
									[
										583634,
										583639
									],
									[
										583693,
										583698
									],
									[
										583759,
										583764
									],
									[
										583839,
										583844
									],
									[
										583897,
										583902
									],
									[
										583980,
										583985
									],
									[
										584067,
										584072
									],
									[
										584156,
										584161
									],
									[
										584244,
										584249
									],
									[
										584334,
										584339
									],
									[
										584399,
										584404
									],
									[
										584487,
										584492
									],
									[
										584845,
										584850
									],
									[
										585105,
										585110
									],
									[
										585302,
										585307
									],
									[
										585308,
										585313
									],
									[
										585348,
										585353
									],
									[
										585357,
										585362
									],
									[
										585393,
										585398
									],
									[
										585434,
										585439
									],
									[
										585474,
										585479
									],
									[
										585533,
										585538
									],
									[
										585597,
										585602
									],
									[
										585665,
										585670
									],
									[
										585718,
										585723
									],
									[
										585775,
										585780
									],
									[
										585833,
										585838
									],
									[
										585890,
										585895
									],
									[
										585949,
										585954
									],
									[
										586005,
										586010
									],
									[
										586051,
										586056
									],
									[
										586098,
										586103
									],
									[
										586365,
										586370
									],
									[
										586657,
										586662
									],
									[
										586711,
										586716
									],
									[
										587017,
										587022
									],
									[
										587242,
										587247
									],
									[
										587538,
										587543
									],
									[
										587544,
										587549
									],
									[
										587617,
										587622
									],
									[
										587626,
										587631
									],
									[
										587695,
										587700
									],
									[
										587769,
										587774
									],
									[
										587842,
										587847
									],
									[
										587934,
										587939
									],
									[
										588031,
										588036
									],
									[
										588132,
										588137
									],
									[
										588218,
										588223
									],
									[
										588308,
										588313
									],
									[
										588399,
										588404
									],
									[
										588489,
										588494
									],
									[
										588581,
										588586
									],
									[
										588670,
										588675
									],
									[
										588749,
										588754
									],
									[
										588829,
										588834
									],
									[
										589261,
										589266
									],
									[
										589712,
										589717
									],
									[
										589797,
										589802
									],
									[
										590258,
										590263
									],
									[
										590538,
										590543
									],
									[
										590730,
										590735
									],
									[
										590943,
										590948
									],
									[
										590949,
										590954
									],
									[
										590986,
										590991
									],
									[
										590996,
										591001
									],
									[
										591043,
										591048
									],
									[
										591053,
										591058
									],
									[
										591073,
										591078
									],
									[
										591103,
										591108
									],
									[
										591144,
										591149
									],
									[
										591187,
										591192
									],
									[
										591230,
										591235
									],
									[
										591277,
										591282
									],
									[
										591322,
										591327
									],
									[
										591369,
										591374
									],
									[
										591417,
										591422
									],
									[
										591466,
										591471
									],
									[
										591515,
										591520
									],
									[
										591524,
										591529
									],
									[
										591557,
										591562
									],
									[
										591595,
										591600
									],
									[
										591640,
										591645
									],
									[
										591698,
										591703
									],
									[
										591735,
										591740
									],
									[
										591791,
										591796
									],
									[
										591852,
										591857
									],
									[
										591917,
										591922
									],
									[
										591992,
										591997
									],
									[
										592050,
										592055
									],
									[
										592104,
										592109
									],
									[
										592170,
										592175
									],
									[
										592223,
										592228
									],
									[
										592278,
										592283
									],
									[
										592343,
										592348
									],
									[
										592397,
										592402
									],
									[
										592464,
										592469
									],
									[
										592520,
										592525
									],
									[
										592563,
										592568
									],
									[
										592628,
										592633
									],
									[
										592693,
										592698
									],
									[
										592735,
										592740
									],
									[
										592779,
										592784
									],
									[
										593069,
										593074
									],
									[
										593120,
										593125
									],
									[
										593411,
										593416
									],
									[
										593654,
										593659
									],
									[
										593835,
										593840
									],
									[
										594292,
										594297
									],
									[
										594302,
										594307
									],
									[
										595000,
										595005
									],
									[
										595417,
										595422
									],
									[
										595568,
										595573
									],
									[
										596118,
										596123
									],
									[
										596531,
										596536
									],
									[
										596541,
										596546
									],
									[
										596561,
										596566
									],
									[
										596675,
										596680
									],
									[
										596827,
										596832
									],
									[
										597369,
										597374
									],
									[
										597500,
										597505
									],
									[
										598183,
										598188
									],
									[
										598449,
										598454
									],
									[
										598580,
										598585
									],
									[
										598731,
										598736
									],
									[
										599265,
										599270
									],
									[
										599969,
										599974
									],
									[
										600629,
										600634
									],
									[
										600943,
										600948
									],
									[
										601001,
										601006
									],
									[
										601258,
										601263
									],
									[
										601276,
										601281
									],
									[
										601647,
										601652
									],
									[
										601984,
										601989
									],
									[
										602042,
										602047
									],
									[
										602265,
										602270
									],
									[
										602292,
										602297
									],
									[
										602637,
										602642
									],
									[
										602665,
										602670
									],
									[
										602915,
										602920
									],
									[
										602930,
										602935
									],
									[
										602987,
										602992
									],
									[
										603433,
										603438
									],
									[
										603473,
										603478
									],
									[
										603495,
										603500
									],
									[
										603995,
										604000
									],
									[
										604005,
										604010
									],
									[
										604286,
										604291
									],
									[
										604296,
										604301
									],
									[
										604563,
										604568
									],
									[
										604827,
										604832
									],
									[
										604872,
										604877
									],
									[
										605194,
										605199
									],
									[
										605653,
										605658
									],
									[
										606221,
										606226
									],
									[
										606630,
										606635
									],
									[
										606996,
										607001
									],
									[
										607464,
										607469
									],
									[
										607829,
										607834
									],
									[
										608190,
										608195
									],
									[
										608556,
										608561
									],
									[
										609004,
										609009
									],
									[
										609405,
										609410
									],
									[
										609871,
										609876
									],
									[
										610228,
										610233
									],
									[
										610544,
										610549
									],
									[
										610712,
										610717
									],
									[
										610745,
										610750
									],
									[
										610965,
										610970
									],
									[
										610985,
										610990
									],
									[
										611313,
										611318
									],
									[
										611340,
										611345
									],
									[
										611619,
										611624
									],
									[
										611634,
										611639
									],
									[
										611859,
										611864
									],
									[
										611874,
										611879
									],
									[
										612058,
										612063
									],
									[
										612335,
										612340
									],
									[
										612662,
										612667
									],
									[
										612994,
										612999
									],
									[
										613000,
										613005
									],
									[
										613044,
										613049
									],
									[
										613050,
										613055
									],
									[
										613245,
										613250
									],
									[
										613251,
										613256
									],
									[
										613309,
										613314
									],
									[
										613315,
										613320
									],
									[
										613360,
										613365
									],
									[
										613366,
										613371
									],
									[
										613483,
										613488
									],
									[
										613489,
										613494
									],
									[
										613545,
										613550
									],
									[
										613551,
										613556
									],
									[
										613594,
										613599
									],
									[
										613600,
										613605
									],
									[
										613711,
										613716
									],
									[
										613717,
										613722
									],
									[
										613767,
										613772
									],
									[
										613773,
										613778
									],
									[
										613810,
										613815
									],
									[
										613816,
										613821
									],
									[
										613919,
										613924
									],
									[
										613946,
										613951
									],
									[
										614005,
										614010
									],
									[
										614052,
										614057
									],
									[
										614093,
										614098
									],
									[
										614150,
										614155
									],
									[
										614234,
										614239
									],
									[
										614270,
										614275
									],
									[
										614381,
										614386
									],
									[
										614557,
										614562
									],
									[
										614976,
										614981
									],
									[
										614983,
										614988
									],
									[
										615161,
										615166
									],
									[
										615229,
										615234
									],
									[
										615792,
										615797
									],
									[
										616211,
										616216
									],
									[
										616297,
										616302
									],
									[
										616539,
										616544
									],
									[
										616596,
										616601
									],
									[
										616614,
										616619
									],
									[
										616671,
										616676
									],
									[
										616889,
										616894
									],
									[
										616960,
										616965
									],
									[
										617042,
										617047
									],
									[
										617118,
										617123
									],
									[
										617228,
										617233
									],
									[
										617307,
										617312
									],
									[
										617404,
										617409
									],
									[
										617463,
										617468
									],
									[
										617670,
										617675
									],
									[
										617742,
										617747
									],
									[
										617768,
										617773
									],
									[
										617921,
										617926
									],
									[
										617927,
										617932
									],
									[
										618156,
										618161
									],
									[
										618287,
										618292
									],
									[
										618375,
										618380
									],
									[
										618532,
										618537
									],
									[
										618616,
										618621
									],
									[
										618732,
										618737
									],
									[
										618853,
										618858
									],
									[
										619060,
										619065
									],
									[
										619234,
										619239
									],
									[
										619243,
										619248
									],
									[
										619283,
										619288
									],
									[
										619292,
										619297
									],
									[
										619475,
										619480
									],
									[
										619484,
										619489
									],
									[
										619526,
										619531
									],
									[
										619535,
										619540
									],
									[
										619564,
										619569
									],
									[
										619573,
										619578
									],
									[
										619672,
										619677
									],
									[
										619702,
										619707
									],
									[
										619890,
										619895
									],
									[
										619936,
										619941
									],
									[
										619976,
										619981
									],
									[
										620032,
										620037
									],
									[
										620115,
										620120
									],
									[
										620150,
										620155
									],
									[
										620260,
										620265
									],
									[
										620440,
										620445
									],
									[
										620458,
										620463
									],
									[
										620508,
										620513
									],
									[
										620539,
										620544
									],
									[
										620651,
										620656
									],
									[
										620669,
										620674
									],
									[
										620722,
										620727
									],
									[
										620749,
										620754
									],
									[
										620798,
										620803
									],
									[
										620834,
										620839
									],
									[
										620843,
										620848
									],
									[
										620886,
										620891
									],
									[
										620993,
										620998
									],
									[
										621010,
										621015
									],
									[
										621113,
										621118
									],
									[
										621183,
										621188
									],
									[
										621264,
										621269
									],
									[
										621339,
										621344
									],
									[
										621448,
										621453
									],
									[
										621526,
										621531
									],
									[
										621622,
										621627
									],
									[
										621669,
										621674
									],
									[
										621740,
										621745
									],
									[
										621765,
										621770
									],
									[
										621914,
										621919
									],
									[
										621923,
										621928
									],
									[
										622244,
										622249
									],
									[
										622479,
										622484
									],
									[
										622562,
										622567
									],
									[
										622677,
										622682
									],
									[
										622797,
										622802
									],
									[
										623000,
										623005
									],
									[
										623180,
										623185
									],
									[
										623189,
										623194
									],
									[
										623235,
										623240
									],
									[
										623244,
										623249
									],
									[
										623347,
										623352
									],
									[
										623391,
										623396
									],
									[
										623401,
										623406
									],
									[
										623419,
										623424
									],
									[
										623481,
										623486
									],
									[
										623491,
										623496
									],
									[
										623509,
										623514
									],
									[
										623572,
										623577
									],
									[
										623582,
										623587
									],
									[
										623600,
										623605
									],
									[
										623664,
										623669
									],
									[
										623674,
										623679
									],
									[
										623692,
										623697
									],
									[
										623756,
										623761
									],
									[
										623766,
										623771
									],
									[
										623784,
										623789
									],
									[
										623851,
										623856
									],
									[
										623861,
										623866
									],
									[
										623879,
										623884
									],
									[
										623927,
										623932
									],
									[
										624104,
										624109
									],
									[
										624205,
										624210
									],
									[
										624308,
										624313
									],
									[
										624412,
										624417
									],
									[
										624519,
										624524
									],
									[
										624624,
										624629
									],
									[
										624778,
										624783
									],
									[
										624820,
										624825
									],
									[
										624969,
										624974
									],
									[
										625125,
										625130
									],
									[
										625321,
										625326
									],
									[
										625477,
										625482
									],
									[
										625558,
										625563
									],
									[
										625621,
										625626
									],
									[
										625686,
										625691
									],
									[
										625753,
										625758
									],
									[
										625820,
										625825
									],
									[
										625893,
										625898
									],
									[
										625998,
										626003
									],
									[
										626081,
										626086
									],
									[
										626155,
										626160
									],
									[
										626219,
										626224
									],
									[
										626285,
										626290
									],
									[
										626353,
										626358
									],
									[
										626421,
										626426
									],
									[
										626495,
										626500
									],
									[
										626579,
										626584
									],
									[
										626644,
										626649
									],
									[
										626681,
										626686
									],
									[
										626726,
										626731
									],
									[
										626855,
										626860
									],
									[
										626864,
										626869
									],
									[
										626927,
										626932
									],
									[
										626951,
										626956
									],
									[
										627008,
										627013
									],
									[
										627080,
										627085
									],
									[
										627103,
										627108
									],
									[
										627184,
										627189
									],
									[
										627331,
										627336
									],
									[
										627396,
										627401
									],
									[
										627466,
										627471
									],
									[
										627573,
										627578
									],
									[
										627682,
										627687
									],
									[
										627792,
										627797
									],
									[
										627905,
										627910
									],
									[
										628016,
										628021
									],
									[
										628205,
										628210
									],
									[
										628384,
										628389
									],
									[
										628438,
										628443
									],
									[
										628620,
										628625
									],
									[
										628676,
										628681
									],
									[
										628835,
										628840
									],
									[
										628892,
										628897
									],
									[
										629010,
										629015
									],
									[
										629474,
										629479
									],
									[
										630032,
										630037
									],
									[
										630363,
										630368
									],
									[
										630674,
										630679
									],
									[
										630841,
										630846
									],
									[
										631021,
										631026
									],
									[
										631076,
										631081
									],
									[
										631259,
										631264
									],
									[
										631316,
										631321
									],
									[
										631476,
										631481
									],
									[
										631534,
										631539
									],
									[
										631653,
										631658
									],
									[
										632118,
										632123
									],
									[
										632682,
										632687
									],
									[
										633016,
										633021
									],
									[
										633328,
										633333
									],
									[
										633496,
										633501
									],
									[
										633675,
										633680
									],
									[
										633729,
										633734
									],
									[
										633911,
										633916
									],
									[
										633967,
										633972
									],
									[
										634126,
										634131
									],
									[
										634183,
										634188
									],
									[
										634301,
										634306
									],
									[
										634765,
										634770
									],
									[
										635323,
										635328
									],
									[
										635654,
										635659
									],
									[
										635965,
										635970
									],
									[
										636132,
										636137
									],
									[
										636313,
										636318
									],
									[
										636369,
										636374
									],
									[
										636553,
										636558
									],
									[
										636611,
										636616
									],
									[
										636772,
										636777
									],
									[
										636831,
										636836
									],
									[
										636951,
										636956
									],
									[
										637417,
										637422
									],
									[
										637987,
										637992
									],
									[
										638324,
										638329
									],
									[
										638637,
										638642
									],
									[
										638806,
										638811
									],
									[
										638983,
										638988
									],
									[
										639035,
										639040
									],
									[
										639215,
										639220
									],
									[
										639269,
										639274
									],
									[
										639426,
										639431
									],
									[
										639481,
										639486
									],
									[
										639597,
										639602
									],
									[
										640059,
										640064
									],
									[
										640605,
										640610
									],
									[
										640930,
										640935
									],
									[
										641239,
										641244
									],
									[
										641404,
										641409
									],
									[
										641585,
										641590
									],
									[
										641641,
										641646
									],
									[
										641825,
										641830
									],
									[
										641883,
										641888
									],
									[
										642044,
										642049
									],
									[
										642103,
										642108
									],
									[
										642223,
										642228
									],
									[
										642689,
										642694
									],
									[
										643259,
										643264
									],
									[
										643596,
										643601
									],
									[
										643909,
										643914
									],
									[
										644078,
										644083
									],
									[
										644251,
										644256
									],
									[
										644299,
										644304
									],
									[
										644475,
										644480
									],
									[
										644525,
										644530
									],
									[
										644678,
										644683
									],
									[
										644729,
										644734
									],
									[
										644841,
										644846
									],
									[
										645299,
										645304
									],
									[
										645821,
										645826
									],
									[
										646134,
										646139
									],
									[
										646439,
										646444
									],
									[
										646600,
										646605
									],
									[
										646775,
										646780
									],
									[
										646825,
										646830
									],
									[
										647003,
										647008
									],
									[
										647055,
										647060
									],
									[
										647210,
										647215
									],
									[
										647263,
										647268
									],
									[
										647377,
										647382
									],
									[
										647837,
										647842
									],
									[
										648371,
										648376
									],
									[
										648690,
										648695
									],
									[
										648997,
										649002
									],
									[
										649160,
										649165
									],
									[
										649335,
										649340
									],
									[
										649385,
										649390
									],
									[
										649563,
										649568
									],
									[
										649615,
										649620
									],
									[
										649770,
										649775
									],
									[
										649823,
										649828
									],
									[
										649937,
										649942
									],
									[
										650397,
										650402
									],
									[
										650931,
										650936
									],
									[
										651250,
										651255
									],
									[
										651557,
										651562
									],
									[
										651720,
										651725
									],
									[
										651890,
										651895
									],
									[
										651935,
										651940
									],
									[
										652004,
										652009
									],
									[
										652056,
										652061
									],
									[
										652251,
										652256
									],
									[
										652299,
										652304
									],
									[
										652334,
										652339
									],
									[
										652442,
										652447
									],
									[
										652489,
										652494
									],
									[
										652523,
										652528
									],
									[
										652634,
										652639
									],
									[
										652684,
										652689
									],
									[
										652721,
										652726
									],
									[
										652830,
										652835
									],
									[
										652878,
										652883
									],
									[
										652913,
										652918
									],
									[
										653017,
										653022
									],
									[
										653262,
										653267
									],
									[
										653537,
										653542
									],
									[
										653592,
										653597
									],
									[
										653708,
										653713
									],
									[
										653802,
										653807
									],
									[
										654000,
										654005
									],
									[
										654273,
										654278
									],
									[
										654348,
										654353
									],
									[
										654445,
										654450
									],
									[
										654520,
										654525
									],
									[
										654735,
										654740
									],
									[
										654789,
										654794
									],
									[
										654887,
										654892
									],
									[
										655160,
										655165
									],
									[
										655405,
										655410
									],
									[
										655586,
										655591
									],
									[
										655592,
										655597
									],
									[
										655636,
										655641
									],
									[
										655642,
										655647
									],
									[
										655710,
										655715
									],
									[
										655762,
										655767
									],
									[
										655956,
										655961
									],
									[
										656010,
										656015
									],
									[
										656051,
										656056
									],
									[
										656165,
										656170
									],
									[
										656223,
										656228
									],
									[
										656268,
										656273
									],
									[
										656381,
										656386
									],
									[
										656438,
										656443
									],
									[
										656482,
										656487
									],
									[
										656599,
										656604
									],
									[
										656660,
										656665
									],
									[
										656708,
										656713
									],
									[
										656825,
										656830
									],
									[
										656886,
										656891
									],
									[
										656934,
										656939
									],
									[
										657054,
										657059
									],
									[
										657118,
										657123
									],
									[
										657169,
										657174
									],
									[
										657284,
										657289
									],
									[
										657343,
										657348
									],
									[
										657389,
										657394
									],
									[
										657502,
										657507
									],
									[
										657559,
										657564
									],
									[
										657603,
										657608
									],
									[
										657720,
										657725
									],
									[
										657781,
										657786
									],
									[
										657829,
										657834
									],
									[
										657950,
										657955
									],
									[
										658015,
										658020
									],
									[
										658067,
										658072
									],
									[
										658191,
										658196
									],
									[
										658259,
										658264
									],
									[
										658314,
										658319
									],
									[
										658424,
										658429
									],
									[
										658479,
										658484
									],
									[
										658521,
										658526
									],
									[
										658630,
										658635
									],
									[
										658685,
										658690
									],
									[
										658727,
										658732
									],
									[
										658836,
										658841
									],
									[
										658891,
										658896
									],
									[
										658933,
										658938
									],
									[
										659042,
										659047
									],
									[
										659097,
										659102
									],
									[
										659139,
										659144
									],
									[
										659243,
										659248
									],
									[
										659858,
										659863
									],
									[
										659865,
										659870
									],
									[
										660135,
										660140
									],
									[
										660338,
										660343
									],
									[
										660820,
										660825
									],
									[
										661136,
										661141
									],
									[
										661388,
										661393
									],
									[
										661569,
										661574
									],
									[
										661575,
										661580
									],
									[
										661619,
										661624
									],
									[
										661625,
										661630
									],
									[
										661693,
										661698
									],
									[
										661749,
										661754
									],
									[
										661829,
										661834
									],
									[
										661873,
										661878
									],
									[
										661941,
										661946
									],
									[
										662006,
										662011
									],
									[
										662218,
										662223
									],
									[
										662264,
										662269
									],
									[
										662297,
										662302
									],
									[
										662409,
										662414
									],
									[
										662459,
										662464
									],
									[
										662496,
										662501
									],
									[
										662608,
										662613
									],
									[
										662657,
										662662
									],
									[
										662693,
										662698
									],
									[
										662809,
										662814
									],
									[
										662862,
										662867
									],
									[
										662902,
										662907
									],
									[
										663020,
										663025
									],
									[
										663075,
										663080
									],
									[
										663117,
										663122
									],
									[
										663233,
										663238
									],
									[
										663286,
										663291
									],
									[
										663326,
										663331
									],
									[
										663445,
										663450
									],
									[
										663501,
										663506
									],
									[
										663544,
										663549
									],
									[
										663658,
										663663
									],
									[
										663709,
										663714
									],
									[
										663747,
										663752
									],
									[
										663865,
										663870
									],
									[
										663920,
										663925
									],
									[
										663962,
										663967
									],
									[
										664080,
										664085
									],
									[
										664135,
										664140
									],
									[
										664177,
										664182
									],
									[
										664289,
										664294
									],
									[
										664338,
										664343
									],
									[
										664374,
										664379
									],
									[
										664484,
										664489
									],
									[
										664531,
										664536
									],
									[
										664565,
										664570
									],
									[
										664682,
										664687
									],
									[
										664736,
										664741
									],
									[
										664777,
										664782
									],
									[
										664894,
										664899
									],
									[
										664948,
										664953
									],
									[
										664989,
										664994
									],
									[
										665104,
										665109
									],
									[
										665156,
										665161
									],
									[
										665195,
										665200
									],
									[
										665306,
										665311
									],
									[
										665354,
										665359
									],
									[
										665389,
										665394
									],
									[
										665505,
										665510
									],
									[
										665558,
										665563
									],
									[
										665598,
										665603
									],
									[
										665709,
										665714
									],
									[
										665757,
										665762
									],
									[
										665792,
										665797
									],
									[
										665901,
										665906
									],
									[
										665948,
										665953
									],
									[
										665982,
										665987
									],
									[
										666090,
										666095
									],
									[
										666137,
										666142
									],
									[
										666171,
										666176
									],
									[
										666279,
										666284
									],
									[
										666326,
										666331
									],
									[
										666360,
										666365
									],
									[
										666468,
										666473
									],
									[
										666515,
										666520
									],
									[
										666549,
										666554
									],
									[
										666657,
										666662
									],
									[
										666704,
										666709
									],
									[
										666738,
										666743
									],
									[
										666841,
										666846
									],
									[
										667308,
										667313
									],
									[
										667315,
										667320
									],
									[
										667643,
										667648
									],
									[
										667650,
										667655
									],
									[
										668035,
										668040
									],
									[
										668042,
										668047
									],
									[
										668091,
										668096
									],
									[
										668439,
										668444
									],
									[
										668775,
										668780
									],
									[
										668897,
										668902
									],
									[
										669396,
										669401
									],
									[
										669721,
										669726
									],
									[
										669965,
										669970
									],
									[
										670157,
										670162
									],
									[
										670167,
										670172
									],
									[
										670187,
										670192
									],
									[
										670224,
										670229
									],
									[
										670234,
										670239
									],
									[
										670254,
										670259
									],
									[
										670419,
										670424
									],
									[
										670429,
										670434
									],
									[
										670449,
										670454
									],
									[
										670488,
										670493
									],
									[
										670498,
										670503
									],
									[
										670518,
										670523
									],
									[
										670660,
										670665
									],
									[
										670670,
										670675
									],
									[
										670690,
										670695
									],
									[
										670730,
										670735
									],
									[
										670740,
										670745
									],
									[
										670760,
										670765
									],
									[
										670861,
										670866
									],
									[
										670889,
										670894
									],
									[
										670930,
										670935
									],
									[
										671468,
										671473
									],
									[
										671479,
										671484
									],
									[
										671500,
										671505
									],
									[
										671783,
										671788
									],
									[
										671834,
										671839
									],
									[
										671879,
										671884
									],
									[
										671940,
										671945
									],
									[
										672028,
										672033
									],
									[
										672068,
										672073
									],
									[
										672222,
										672227
									],
									[
										672433,
										672438
									],
									[
										672507,
										672512
									],
									[
										672530,
										672535
									],
									[
										672656,
										672661
									],
									[
										672692,
										672697
									],
									[
										672850,
										672855
									],
									[
										672873,
										672878
									],
									[
										673003,
										673008
									],
									[
										673035,
										673040
									],
									[
										673089,
										673094
									],
									[
										673122,
										673127
									],
									[
										673132,
										673137
									],
									[
										673152,
										673157
									],
									[
										673200,
										673205
									],
									[
										673353,
										673358
									],
									[
										673375,
										673380
									],
									[
										673436,
										673441
									],
									[
										673620,
										673625
									],
									[
										673839,
										673844
									],
									[
										673913,
										673918
									],
									[
										673991,
										673996
									],
									[
										674171,
										674176
									],
									[
										674251,
										674256
									],
									[
										674323,
										674328
									],
									[
										674445,
										674450
									],
									[
										674528,
										674533
									],
									[
										674601,
										674606
									],
									[
										674710,
										674715
									],
									[
										674773,
										674778
									],
									[
										674934,
										674939
									],
									[
										675010,
										675015
									],
									[
										675040,
										675045
									],
									[
										675186,
										675191
									],
									[
										675196,
										675201
									],
									[
										675216,
										675221
									],
									[
										675449,
										675454
									],
									[
										675521,
										675526
									],
									[
										675586,
										675591
									],
									[
										675678,
										675683
									],
									[
										675839,
										675844
									],
									[
										675927,
										675932
									],
									[
										676047,
										676052
									],
									[
										676172,
										676177
									],
									[
										676314,
										676319
									],
									[
										676492,
										676497
									],
									[
										676502,
										676507
									],
									[
										676522,
										676527
									],
									[
										676672,
										676677
									],
									[
										676708,
										676713
									],
									[
										676900,
										676905
									],
									[
										676910,
										676915
									],
									[
										676964,
										676969
									],
									[
										676974,
										676979
									],
									[
										677156,
										677161
									],
									[
										677166,
										677171
									],
									[
										677222,
										677227
									],
									[
										677232,
										677237
									],
									[
										677391,
										677396
									],
									[
										677401,
										677406
									],
									[
										677458,
										677463
									],
									[
										677468,
										677473
									],
									[
										677586,
										677591
									],
									[
										677614,
										677619
									],
									[
										678078,
										678083
									],
									[
										678089,
										678094
									],
									[
										678632,
										678637
									],
									[
										678642,
										678647
									],
									[
										678967,
										678972
									],
									[
										678977,
										678982
									],
									[
										679288,
										679293
									],
									[
										679298,
										679303
									],
									[
										679465,
										679470
									],
									[
										679501,
										679506
									],
									[
										679694,
										679699
									],
									[
										679759,
										679764
									],
									[
										679952,
										679957
									],
									[
										680019,
										680024
									],
									[
										680189,
										680194
									],
									[
										680257,
										680262
									],
									[
										680386,
										680391
									],
									[
										680756,
										680761
									],
									[
										681341,
										681346
									],
									[
										681689,
										681694
									],
									[
										682011,
										682016
									],
									[
										682189,
										682194
									],
									[
										682423,
										682428
									],
									[
										682486,
										682491
									],
									[
										682573,
										682578
									],
									[
										682641,
										682646
									],
									[
										682733,
										682738
									],
									[
										682805,
										682810
									],
									[
										683008,
										683013
									],
									[
										683073,
										683078
									],
									[
										683125,
										683130
									],
									[
										683252,
										683257
									],
									[
										683318,
										683323
									],
									[
										683371,
										683376
									],
									[
										683498,
										683503
									],
									[
										683564,
										683569
									],
									[
										683617,
										683622
									],
									[
										683745,
										683750
									],
									[
										683812,
										683817
									],
									[
										683866,
										683871
									],
									[
										684007,
										684012
									],
									[
										684087,
										684092
									],
									[
										684154,
										684159
									],
									[
										684292,
										684297
									],
									[
										684369,
										684374
									],
									[
										684433,
										684438
									],
									[
										684565,
										684570
									],
									[
										684636,
										684641
									],
									[
										684694,
										684699
									],
									[
										684831,
										684836
									],
									[
										684906,
										684911
									],
									[
										684968,
										684973
									],
									[
										685098,
										685103
									],
									[
										685165,
										685170
									],
									[
										685219,
										685224
									],
									[
										685357,
										685362
									],
									[
										685432,
										685437
									],
									[
										685494,
										685499
									],
									[
										685631,
										685636
									],
									[
										685705,
										685710
									],
									[
										685766,
										685771
									],
									[
										685909,
										685914
									],
									[
										685989,
										685994
									],
									[
										686056,
										686061
									],
									[
										686189,
										686194
									],
									[
										686259,
										686264
									],
									[
										686316,
										686321
									],
									[
										686452,
										686457
									],
									[
										686525,
										686530
									],
									[
										686585,
										686590
									],
									[
										686721,
										686726
									],
									[
										686794,
										686799
									],
									[
										686854,
										686859
									],
									[
										686988,
										686993
									],
									[
										687059,
										687064
									],
									[
										687117,
										687122
									],
									[
										687251,
										687256
									],
									[
										687322,
										687327
									],
									[
										687380,
										687385
									],
									[
										687518,
										687523
									],
									[
										687593,
										687598
									],
									[
										687655,
										687660
									],
									[
										687790,
										687795
									],
									[
										687862,
										687867
									],
									[
										687921,
										687926
									],
									[
										688044,
										688049
									],
									[
										688229,
										688234
									],
									[
										688299,
										688304
									],
									[
										688659,
										688664
									],
									[
										689015,
										689020
									],
									[
										689292,
										689297
									],
									[
										689389,
										689394
									],
									[
										689742,
										689747
									],
									[
										690152,
										690157
									],
									[
										690487,
										690492
									],
									[
										690903,
										690908
									],
									[
										691262,
										691267
									],
									[
										691681,
										691686
									],
									[
										692155,
										692160
									],
									[
										692418,
										692423
									],
									[
										692648,
										692653
									],
									[
										692654,
										692659
									],
									[
										692698,
										692703
									],
									[
										692704,
										692709
									],
									[
										692772,
										692777
									],
									[
										692840,
										692845
									],
									[
										693043,
										693048
									],
									[
										693113,
										693118
									],
									[
										693170,
										693175
									],
									[
										693312,
										693317
									],
									[
										693394,
										693399
									],
									[
										693463,
										693468
									],
									[
										693598,
										693603
									],
									[
										693672,
										693677
									],
									[
										693733,
										693738
									],
									[
										693873,
										693878
									],
									[
										693952,
										693957
									],
									[
										694018,
										694023
									],
									[
										694150,
										694155
									],
									[
										694221,
										694226
									],
									[
										694279,
										694284
									],
									[
										694411,
										694416
									],
									[
										694482,
										694487
									],
									[
										694540,
										694545
									],
									[
										694672,
										694677
									],
									[
										694743,
										694748
									],
									[
										694801,
										694806
									],
									[
										694933,
										694938
									],
									[
										695004,
										695009
									],
									[
										695062,
										695067
									],
									[
										695194,
										695199
									],
									[
										695265,
										695270
									],
									[
										695323,
										695328
									],
									[
										695450,
										695455
									],
									[
										695752,
										695757
									],
									[
										695872,
										695877
									],
									[
										695879,
										695884
									],
									[
										696246,
										696251
									],
									[
										696356,
										696361
									],
									[
										696593,
										696598
									],
									[
										696706,
										696711
									],
									[
										697066,
										697071
									],
									[
										697236,
										697241
									],
									[
										697647,
										697652
									],
									[
										697957,
										697962
									],
									[
										698225,
										698230
									],
									[
										698466,
										698471
									],
									[
										698538,
										698543
									],
									[
										698746,
										698751
									],
									[
										698820,
										698825
									],
									[
										698881,
										698886
									],
									[
										699025,
										699030
									],
									[
										699108,
										699113
									],
									[
										699178,
										699183
									],
									[
										699314,
										699319
									],
									[
										699389,
										699394
									],
									[
										699451,
										699456
									],
									[
										699587,
										699592
									],
									[
										699662,
										699667
									],
									[
										699724,
										699729
									],
									[
										699855,
										699860
									],
									[
										700214,
										700219
									],
									[
										700552,
										700557
									],
									[
										700824,
										700829
									],
									[
										701055,
										701060
									],
									[
										701112,
										701117
									],
									[
										701193,
										701198
									],
									[
										701258,
										701263
									],
									[
										701347,
										701352
									],
									[
										701397,
										701402
									],
									[
										701597,
										701602
									],
									[
										701657,
										701662
									],
									[
										701704,
										701709
									],
									[
										701833,
										701838
									],
									[
										701901,
										701906
									],
									[
										701956,
										701961
									],
									[
										702083,
										702088
									],
									[
										702149,
										702154
									],
									[
										702202,
										702207
									],
									[
										702326,
										702331
									],
									[
										702389,
										702394
									],
									[
										702439,
										702444
									],
									[
										702570,
										702575
									],
									[
										702640,
										702645
									],
									[
										702697,
										702702
									],
									[
										702830,
										702835
									],
									[
										702902,
										702907
									],
									[
										702961,
										702966
									],
									[
										703088,
										703093
									],
									[
										703153,
										703158
									],
									[
										703205,
										703210
									],
									[
										703334,
										703339
									],
									[
										703400,
										703405
									],
									[
										703453,
										703458
									],
									[
										703582,
										703587
									],
									[
										703648,
										703653
									],
									[
										703701,
										703706
									],
									[
										703823,
										703828
									],
									[
										703882,
										703887
									],
									[
										703928,
										703933
									],
									[
										704045,
										704050
									],
									[
										704181,
										704186
									],
									[
										704403,
										704408
									],
									[
										704531,
										704536
									],
									[
										704633,
										704638
									],
									[
										704736,
										704741
									],
									[
										704801,
										704806
									],
									[
										705031,
										705036
									],
									[
										705317,
										705322
									],
									[
										705386,
										705391
									],
									[
										705491,
										705496
									],
									[
										705771,
										705776
									],
									[
										705963,
										705968
									],
									[
										706283,
										706288
									],
									[
										706512,
										706517
									],
									[
										706854,
										706859
									],
									[
										707145,
										707150
									],
									[
										707487,
										707492
									],
									[
										707825,
										707830
									],
									[
										708082,
										708087
									],
									[
										708314,
										708319
									],
									[
										708379,
										708384
									],
									[
										708569,
										708574
									],
									[
										708636,
										708641
									],
									[
										708690,
										708695
									],
									[
										708819,
										708824
									],
									[
										708893,
										708898
									],
									[
										708954,
										708959
									],
									[
										709080,
										709085
									],
									[
										709151,
										709156
									],
									[
										709209,
										709214
									],
									[
										709331,
										709336
									],
									[
										709398,
										709403
									],
									[
										709452,
										709457
									],
									[
										709574,
										709579
									],
									[
										709641,
										709646
									],
									[
										709695,
										709700
									],
									[
										709812,
										709817
									],
									[
										710073,
										710078
									],
									[
										710354,
										710359
									],
									[
										710619,
										710624
									],
									[
										710890,
										710895
									],
									[
										710899,
										710904
									],
									[
										710939,
										710944
									],
									[
										710948,
										710953
									],
									[
										711012,
										711017
									],
									[
										711068,
										711073
									],
									[
										711148,
										711153
									],
									[
										711192,
										711197
									],
									[
										711260,
										711265
									],
									[
										711321,
										711326
									],
									[
										711406,
										711411
									],
									[
										711468,
										711473
									],
									[
										711554,
										711559
									],
									[
										711615,
										711620
									],
									[
										711700,
										711705
									],
									[
										711763,
										711768
									],
									[
										711850,
										711855
									],
									[
										711910,
										711915
									],
									[
										712004,
										712009
									],
									[
										712062,
										712067
									],
									[
										712263,
										712268
									],
									[
										712326,
										712331
									],
									[
										712376,
										712381
									],
									[
										712487,
										712492
									],
									[
										712528,
										712533
									],
									[
										712566,
										712571
									],
									[
										712619,
										712624
									],
									[
										712655,
										712660
									],
									[
										712697,
										712702
									],
									[
										712829,
										712834
									],
									[
										712900,
										712905
									],
									[
										712958,
										712963
									],
									[
										713096,
										713101
									],
									[
										713172,
										713177
									],
									[
										713235,
										713240
									],
									[
										713351,
										713356
									],
									[
										713375,
										713380
									],
									[
										713416,
										713421
									],
									[
										713452,
										713457
									],
									[
										713491,
										713496
									],
									[
										713516,
										713521
									],
									[
										713636,
										713641
									],
									[
										713660,
										713665
									],
									[
										713705,
										713710
									],
									[
										713741,
										713746
									],
									[
										713784,
										713789
									],
									[
										713809,
										713814
									],
									[
										713946,
										713951
									],
									[
										714020,
										714025
									],
									[
										714081,
										714086
									],
									[
										714211,
										714216
									],
									[
										714278,
										714283
									],
									[
										714332,
										714337
									],
									[
										714462,
										714467
									],
									[
										714529,
										714534
									],
									[
										714583,
										714588
									],
									[
										714714,
										714719
									],
									[
										714782,
										714787
									],
									[
										714837,
										714842
									],
									[
										714966,
										714971
									],
									[
										715032,
										715037
									],
									[
										715085,
										715090
									],
									[
										715216,
										715221
									],
									[
										715284,
										715289
									],
									[
										715339,
										715344
									],
									[
										715449,
										715454
									],
									[
										715478,
										715483
									],
									[
										715513,
										715518
									],
									[
										715554,
										715559
									],
									[
										715587,
										715592
									],
									[
										715617,
										715622
									],
									[
										715758,
										715763
									],
									[
										715836,
										715841
									],
									[
										715901,
										715906
									],
									[
										716031,
										716036
									],
									[
										716098,
										716103
									],
									[
										716152,
										716157
									],
									[
										716288,
										716293
									],
									[
										716361,
										716366
									],
									[
										716421,
										716426
									],
									[
										716564,
										716569
									],
									[
										716644,
										716649
									],
									[
										716711,
										716716
									],
									[
										716853,
										716858
									],
									[
										716932,
										716937
									],
									[
										716998,
										717003
									],
									[
										717141,
										717146
									],
									[
										717221,
										717226
									],
									[
										717288,
										717293
									],
									[
										717430,
										717435
									],
									[
										717509,
										717514
									],
									[
										717575,
										717580
									],
									[
										717711,
										717716
									],
									[
										717784,
										717789
									],
									[
										717844,
										717849
									],
									[
										717992,
										717997
									],
									[
										718077,
										718082
									],
									[
										718149,
										718154
									],
									[
										718296,
										718301
									],
									[
										718380,
										718385
									],
									[
										718451,
										718456
									],
									[
										718588,
										718593
									],
									[
										718662,
										718667
									],
									[
										718723,
										718728
									],
									[
										718856,
										718861
									],
									[
										718926,
										718931
									],
									[
										718983,
										718988
									],
									[
										719120,
										719125
									],
									[
										719194,
										719199
									],
									[
										719255,
										719260
									],
									[
										719398,
										719403
									],
									[
										719478,
										719483
									],
									[
										719545,
										719550
									],
									[
										719687,
										719692
									],
									[
										719766,
										719771
									],
									[
										719832,
										719837
									],
									[
										719953,
										719958
									],
									[
										720200,
										720205
									],
									[
										720700,
										720705
									],
									[
										721120,
										721125
									],
									[
										721238,
										721243
									],
									[
										721354,
										721359
									],
									[
										721541,
										721546
									],
									[
										721586,
										721591
									],
									[
										722355,
										722360
									],
									[
										722496,
										722501
									],
									[
										722622,
										722627
									],
									[
										722720,
										722725
									],
									[
										722792,
										722797
									],
									[
										722963,
										722968
									],
									[
										723246,
										723251
									],
									[
										723487,
										723492
									],
									[
										723612,
										723617
									],
									[
										723840,
										723845
									],
									[
										723850,
										723855
									],
									[
										723993,
										723998
									],
									[
										724113,
										724118
									],
									[
										724181,
										724186
									],
									[
										724305,
										724310
									],
									[
										724519,
										724524
									],
									[
										724702,
										724707
									],
									[
										724860,
										724865
									],
									[
										725114,
										725119
									],
									[
										725496,
										725501
									],
									[
										725544,
										725549
									],
									[
										726190,
										726195
									],
									[
										726321,
										726326
									],
									[
										726599,
										726604
									],
									[
										726856,
										726861
									],
									[
										726945,
										726950
									],
									[
										727227,
										727232
									],
									[
										727316,
										727321
									],
									[
										727567,
										727572
									],
									[
										727651,
										727656
									],
									[
										727873,
										727878
									],
									[
										728107,
										728112
									],
									[
										728318,
										728323
									],
									[
										728656,
										728661
									],
									[
										728745,
										728750
									],
									[
										729029,
										729034
									],
									[
										729257,
										729262
									],
									[
										729697,
										729702
									],
									[
										730004,
										730009
									],
									[
										730026,
										730031
									],
									[
										730142,
										730147
									],
									[
										730400,
										730405
									],
									[
										730422,
										730427
									],
									[
										730539,
										730544
									],
									[
										730834,
										730839
									],
									[
										730873,
										730878
									],
									[
										730973,
										730978
									],
									[
										731013,
										731018
									],
									[
										731139,
										731144
									],
									[
										731182,
										731187
									],
									[
										731596,
										731601
									],
									[
										731640,
										731645
									],
									[
										731771,
										731776
									],
									[
										731825,
										731830
									],
									[
										732059,
										732064
									],
									[
										732328,
										732333
									],
									[
										732355,
										732360
									],
									[
										732671,
										732676
									],
									[
										732997,
										733002
									],
									[
										733775,
										733780
									],
									[
										733810,
										733815
									],
									[
										734230,
										734235
									],
									[
										734375,
										734380
									],
									[
										734595,
										734600
									],
									[
										734669,
										734674
									],
									[
										734986,
										734991
									],
									[
										735328,
										735333
									],
									[
										735589,
										735594
									],
									[
										735849,
										735854
									],
									[
										735893,
										735898
									],
									[
										735961,
										735966
									],
									[
										736022,
										736027
									],
									[
										736107,
										736112
									],
									[
										736169,
										736174
									],
									[
										736255,
										736260
									],
									[
										736315,
										736320
									],
									[
										736517,
										736522
									],
									[
										736581,
										736586
									],
									[
										736632,
										736637
									],
									[
										736758,
										736763
									],
									[
										736823,
										736828
									],
									[
										736875,
										736880
									],
									[
										737003,
										737008
									],
									[
										737070,
										737075
									],
									[
										737124,
										737129
									],
									[
										737254,
										737259
									],
									[
										737323,
										737328
									],
									[
										737379,
										737384
									],
									[
										737511,
										737516
									],
									[
										737582,
										737587
									],
									[
										737640,
										737645
									],
									[
										737775,
										737780
									],
									[
										737849,
										737854
									],
									[
										737910,
										737915
									],
									[
										738048,
										738053
									],
									[
										738125,
										738130
									],
									[
										738189,
										738194
									],
									[
										738310,
										738315
									],
									[
										738424,
										738429
									],
									[
										738496,
										738501
									],
									[
										738849,
										738854
									],
									[
										739127,
										739132
									],
									[
										739389,
										739394
									],
									[
										739650,
										739655
									],
									[
										739724,
										739729
									],
									[
										739926,
										739931
									],
									[
										740002,
										740007
									],
									[
										740181,
										740186
									],
									[
										740258,
										740263
									],
									[
										740396,
										740401
									],
									[
										740786,
										740791
									],
									[
										741376,
										741381
									],
									[
										741731,
										741736
									],
									[
										742062,
										742067
									],
									[
										742249,
										742254
									],
									[
										742509,
										742514
									],
									[
										742582,
										742587
									],
									[
										742783,
										742788
									],
									[
										742858,
										742863
									],
									[
										743036,
										743041
									],
									[
										743112,
										743117
									],
									[
										743249,
										743254
									],
									[
										743639,
										743644
									],
									[
										744223,
										744228
									],
									[
										744575,
										744580
									],
									[
										744905,
										744910
									],
									[
										745091,
										745096
									],
									[
										745350,
										745355
									],
									[
										745422,
										745427
									],
									[
										745622,
										745627
									],
									[
										745696,
										745701
									],
									[
										745873,
										745878
									],
									[
										745948,
										745953
									],
									[
										746084,
										746089
									],
									[
										746474,
										746479
									],
									[
										747052,
										747057
									],
									[
										747401,
										747406
									],
									[
										747730,
										747735
									],
									[
										747915,
										747920
									],
									[
										748184,
										748189
									],
									[
										748228,
										748233
									],
									[
										748296,
										748301
									],
									[
										748357,
										748362
									],
									[
										748442,
										748447
									],
									[
										748514,
										748519
									],
									[
										748610,
										748615
									],
									[
										748671,
										748676
									],
									[
										748756,
										748761
									],
									[
										748819,
										748824
									],
									[
										748906,
										748911
									],
									[
										748966,
										748971
									],
									[
										749168,
										749173
									],
									[
										749231,
										749236
									],
									[
										749281,
										749286
									],
									[
										749406,
										749411
									],
									[
										749470,
										749475
									],
									[
										749521,
										749526
									],
									[
										749648,
										749653
									],
									[
										749714,
										749719
									],
									[
										749767,
										749772
									],
									[
										749900,
										749905
									],
									[
										749972,
										749977
									],
									[
										750031,
										750036
									],
									[
										750165,
										750170
									],
									[
										750238,
										750243
									],
									[
										750298,
										750303
									],
									[
										750429,
										750434
									],
									[
										750499,
										750504
									],
									[
										750556,
										750561
									],
									[
										750676,
										750681
									],
									[
										750790,
										750795
									],
									[
										750861,
										750866
									],
									[
										751224,
										751229
									],
									[
										751334,
										751339
									],
									[
										751703,
										751708
									],
									[
										751916,
										751921
									],
									[
										752242,
										752247
									],
									[
										752518,
										752523
									],
									[
										752777,
										752782
									],
									[
										753014,
										753019
									],
									[
										753275,
										753280
									],
									[
										753545,
										753550
									],
									[
										753589,
										753594
									],
									[
										753657,
										753662
									],
									[
										753718,
										753723
									],
									[
										753803,
										753808
									],
									[
										753877,
										753882
									],
									[
										753975,
										753980
									],
									[
										754038,
										754043
									],
									[
										754125,
										754130
									],
									[
										754185,
										754190
									],
									[
										754399,
										754404
									],
									[
										754464,
										754469
									],
									[
										754516,
										754521
									],
									[
										754643,
										754648
									],
									[
										754709,
										754714
									],
									[
										754762,
										754767
									],
									[
										754891,
										754896
									],
									[
										754959,
										754964
									],
									[
										755014,
										755019
									],
									[
										755159,
										755164
									],
									[
										755243,
										755248
									],
									[
										755314,
										755319
									],
									[
										755452,
										755457
									],
									[
										755528,
										755533
									],
									[
										755591,
										755596
									],
									[
										755731,
										755736
									],
									[
										755808,
										755813
									],
									[
										755872,
										755877
									],
									[
										756010,
										756015
									],
									[
										756085,
										756090
									],
									[
										756147,
										756152
									],
									[
										756294,
										756299
									],
									[
										756378,
										756383
									],
									[
										756449,
										756454
									],
									[
										756592,
										756597
									],
									[
										756672,
										756677
									],
									[
										756739,
										756744
									],
									[
										756868,
										756873
									],
									[
										756934,
										756939
									],
									[
										756987,
										756992
									],
									[
										757110,
										757115
									],
									[
										757224,
										757229
									],
									[
										757297,
										757302
									],
									[
										757591,
										757596
									],
									[
										757703,
										757708
									],
									[
										758061,
										758066
									],
									[
										758356,
										758361
									],
									[
										758650,
										758655
									],
									[
										758923,
										758928
									],
									[
										759162,
										759167
									],
									[
										759425,
										759430
									],
									[
										759677,
										759682
									],
									[
										759722,
										759727
									],
									[
										759791,
										759796
									],
									[
										759835,
										759840
									],
									[
										759903,
										759908
									],
									[
										759964,
										759969
									],
									[
										760049,
										760054
									],
									[
										760109,
										760114
									],
									[
										760316,
										760321
									],
									[
										760378,
										760383
									],
									[
										760427,
										760432
									],
									[
										760551,
										760556
									],
									[
										760614,
										760619
									],
									[
										760664,
										760669
									],
									[
										760790,
										760795
									],
									[
										760855,
										760860
									],
									[
										760907,
										760912
									],
									[
										761031,
										761036
									],
									[
										761094,
										761099
									],
									[
										761144,
										761149
									],
									[
										761272,
										761277
									],
									[
										761339,
										761344
									],
									[
										761393,
										761398
									],
									[
										761523,
										761528
									],
									[
										761592,
										761597
									],
									[
										761648,
										761653
									],
									[
										761775,
										761780
									],
									[
										761841,
										761846
									],
									[
										761894,
										761899
									],
									[
										762022,
										762027
									],
									[
										762089,
										762094
									],
									[
										762143,
										762148
									],
									[
										762272,
										762277
									],
									[
										762340,
										762345
									],
									[
										762395,
										762400
									],
									[
										762524,
										762529
									],
									[
										762592,
										762597
									],
									[
										762647,
										762652
									],
									[
										762782,
										762787
									],
									[
										762856,
										762861
									],
									[
										762917,
										762922
									],
									[
										763044,
										763049
									],
									[
										763110,
										763115
									],
									[
										763163,
										763168
									],
									[
										763282,
										763287
									],
									[
										763434,
										763439
									],
									[
										763554,
										763559
									],
									[
										763754,
										763759
									],
									[
										763921,
										763926
									],
									[
										763991,
										763996
									],
									[
										764327,
										764332
									],
									[
										764591,
										764596
									],
									[
										765054,
										765059
									],
									[
										765407,
										765412
									],
									[
										765730,
										765735
									],
									[
										765990,
										765995
									],
									[
										766227,
										766232
									],
									[
										766277,
										766282
									],
									[
										766397,
										766402
									],
									[
										766449,
										766454
									],
									[
										766488,
										766493
									],
									[
										766601,
										766606
									],
									[
										766654,
										766659
									],
									[
										766694,
										766699
									],
									[
										766807,
										766812
									],
									[
										766860,
										766865
									],
									[
										766900,
										766905
									],
									[
										767014,
										767019
									],
									[
										767067,
										767072
									],
									[
										767107,
										767112
									],
									[
										767221,
										767226
									],
									[
										767274,
										767279
									],
									[
										767314,
										767319
									],
									[
										767428,
										767433
									],
									[
										767481,
										767486
									],
									[
										767521,
										767526
									],
									[
										767630,
										767635
									],
									[
										767720,
										767725
									],
									[
										767801,
										767806
									],
									[
										767883,
										767888
									],
									[
										767963,
										767968
									],
									[
										768044,
										768049
									],
									[
										768246,
										768251
									],
									[
										768409,
										768414
									],
									[
										768540,
										768545
									],
									[
										768705,
										768710
									],
									[
										768838,
										768843
									],
									[
										769040,
										769045
									],
									[
										769193,
										769198
									],
									[
										769348,
										769353
									],
									[
										769499,
										769504
									],
									[
										769652,
										769657
									],
									[
										769970,
										769975
									],
									[
										770261,
										770266
									],
									[
										770526,
										770531
									],
									[
										770858,
										770863
									],
									[
										771189,
										771194
									],
									[
										771495,
										771500
									],
									[
										771766,
										771771
									],
									[
										771993,
										771998
									],
									[
										772065,
										772070
									],
									[
										772265,
										772270
									],
									[
										772339,
										772344
									],
									[
										772516,
										772521
									],
									[
										772591,
										772596
									],
									[
										772727,
										772732
									],
									[
										773112,
										773117
									],
									[
										773715,
										773720
									],
									[
										774074,
										774079
									],
									[
										774403,
										774408
									],
									[
										774588,
										774593
									],
									[
										774842,
										774847
									],
									[
										774914,
										774919
									],
									[
										775114,
										775119
									],
									[
										775188,
										775193
									],
									[
										775365,
										775370
									],
									[
										775440,
										775445
									],
									[
										775576,
										775581
									],
									[
										775961,
										775966
									],
									[
										776564,
										776569
									],
									[
										776923,
										776928
									],
									[
										777252,
										777257
									],
									[
										777437,
										777442
									],
									[
										777670,
										777675
									],
									[
										777714,
										777719
									],
									[
										777782,
										777787
									],
									[
										777833,
										777838
									],
									[
										777908,
										777913
									],
									[
										777957,
										777962
									],
									[
										778146,
										778151
									],
									[
										778199,
										778204
									],
									[
										778239,
										778244
									],
									[
										778349,
										778354
									],
									[
										778751,
										778756
									],
									[
										779069,
										779074
									],
									[
										779320,
										779325
									],
									[
										779535,
										779540
									],
									[
										779593,
										779598
									],
									[
										779813,
										779818
									],
									[
										779873,
										779878
									],
									[
										779920,
										779925
									],
									[
										780041,
										780046
									],
									[
										780106,
										780111
									],
									[
										780158,
										780163
									],
									[
										780269,
										780274
									],
									[
										780493,
										780498
									],
									[
										780924,
										780929
									],
									[
										781246,
										781251
									],
									[
										781504,
										781509
									],
									[
										781710,
										781715
									],
									[
										781754,
										781759
									],
									[
										781822,
										781827
									],
									[
										781871,
										781876
									],
									[
										782060,
										782065
									],
									[
										782111,
										782116
									],
									[
										782149,
										782154
									],
									[
										782257,
										782262
									],
									[
										782649,
										782654
									],
									[
										782961,
										782966
									],
									[
										783210,
										783215
									],
									[
										783425,
										783430
									],
									[
										783434,
										783439
									],
									[
										783480,
										783485
									],
									[
										783489,
										783494
									],
									[
										783559,
										783564
									],
									[
										783603,
										783608
									],
									[
										783671,
										783676
									],
									[
										783729,
										783734
									],
									[
										783821,
										783826
									],
									[
										783879,
										783884
									],
									[
										784084,
										784089
									],
									[
										784144,
										784149
									],
									[
										784191,
										784196
									],
									[
										784420,
										784425
									],
									[
										784486,
										784491
									],
									[
										784539,
										784544
									],
									[
										784668,
										784673
									],
									[
										784736,
										784741
									],
									[
										784791,
										784796
									],
									[
										784918,
										784923
									],
									[
										784984,
										784989
									],
									[
										785037,
										785042
									],
									[
										785161,
										785166
									],
									[
										785223,
										785228
									],
									[
										785272,
										785277
									],
									[
										785409,
										785414
									],
									[
										785483,
										785488
									],
									[
										785544,
										785549
									],
									[
										785676,
										785681
									],
									[
										785745,
										785750
									],
									[
										785801,
										785806
									],
									[
										785903,
										785908
									],
									[
										785934,
										785939
									],
									[
										785961,
										785966
									],
									[
										786004,
										786009
									],
									[
										786029,
										786034
									],
									[
										786061,
										786066
									],
									[
										786192,
										786197
									],
									[
										786260,
										786265
									],
									[
										786315,
										786320
									],
									[
										786454,
										786459
									],
									[
										786748,
										786753
									],
									[
										786858,
										786863
									],
									[
										787065,
										787070
									],
									[
										787116,
										787121
									],
									[
										787161,
										787166
									],
									[
										787222,
										787227
									],
									[
										787310,
										787315
									],
									[
										787350,
										787355
									],
									[
										787465,
										787470
									],
									[
										787623,
										787628
									],
									[
										787678,
										787683
									],
									[
										787688,
										787693
									],
									[
										787855,
										787860
									],
									[
										787914,
										787919
									],
									[
										788096,
										788101
									],
									[
										788195,
										788200
									],
									[
										788568,
										788573
									],
									[
										788646,
										788651
									],
									[
										788660,
										788665
									],
									[
										788896,
										788901
									],
									[
										788952,
										788957
									],
									[
										789015,
										789020
									],
									[
										789206,
										789211
									],
									[
										789273,
										789278
									],
									[
										789585,
										789590
									],
									[
										789647,
										789652
									],
									[
										789677,
										789682
									],
									[
										789768,
										789773
									],
									[
										789811,
										789816
									],
									[
										789869,
										789874
									],
									[
										789930,
										789935
									],
									[
										789983,
										789988
									],
									[
										790059,
										790064
									],
									[
										790088,
										790093
									],
									[
										790123,
										790128
									],
									[
										790353,
										790358
									],
									[
										790433,
										790438
									],
									[
										790456,
										790461
									],
									[
										790511,
										790516
									],
									[
										790547,
										790552
									],
									[
										790664,
										790669
									],
									[
										790687,
										790692
									],
									[
										790745,
										790750
									],
									[
										790777,
										790782
									],
									[
										790831,
										790836
									],
									[
										790885,
										790890
									],
									[
										790933,
										790938
									],
									[
										791045,
										791050
									],
									[
										791067,
										791072
									],
									[
										791128,
										791133
									],
									[
										791210,
										791215
									],
									[
										791367,
										791372
									],
									[
										791378,
										791383
									],
									[
										791419,
										791424
									],
									[
										791437,
										791442
									],
									[
										791604,
										791609
									],
									[
										791801,
										791806
									],
									[
										791812,
										791817
									],
									[
										791854,
										791859
									],
									[
										791872,
										791877
									],
									[
										792038,
										792043
									],
									[
										792302,
										792307
									],
									[
										792334,
										792339
									],
									[
										792597,
										792602
									],
									[
										792633,
										792638
									],
									[
										792720,
										792725
									],
									[
										792759,
										792764
									],
									[
										792848,
										792853
									],
									[
										793158,
										793163
									],
									[
										793228,
										793233
									],
									[
										793264,
										793269
									],
									[
										793421,
										793426
									],
									[
										793444,
										793449
									],
									[
										793602,
										793607
									],
									[
										793874,
										793879
									],
									[
										793953,
										793958
									],
									[
										794234,
										794239
									],
									[
										794313,
										794318
									],
									[
										794454,
										794459
									],
									[
										794577,
										794582
									],
									[
										794602,
										794607
									],
									[
										794626,
										794631
									],
									[
										794744,
										794749
									],
									[
										794769,
										794774
									],
									[
										794800,
										794805
									],
									[
										794925,
										794930
									],
									[
										795062,
										795067
									],
									[
										795221,
										795226
									],
									[
										795311,
										795316
									],
									[
										795502,
										795507
									],
									[
										795564,
										795569
									],
									[
										795908,
										795913
									],
									[
										796064,
										796069
									],
									[
										796144,
										796149
									],
									[
										796258,
										796263
									],
									[
										796341,
										796346
									],
									[
										796442,
										796447
									],
									[
										796494,
										796499
									],
									[
										796570,
										796575
									],
									[
										796600,
										796605
									],
									[
										796767,
										796772
									],
									[
										797093,
										797098
									],
									[
										797266,
										797271
									],
									[
										797346,
										797351
									],
									[
										797434,
										797439
									],
									[
										797554,
										797559
									],
									[
										797679,
										797684
									],
									[
										797956,
										797961
									],
									[
										798006,
										798011
									],
									[
										798255,
										798260
									],
									[
										798562,
										798567
									],
									[
										798795,
										798800
									],
									[
										798801,
										798806
									],
									[
										798845,
										798850
									],
									[
										798851,
										798856
									],
									[
										799064,
										799069
									],
									[
										799071,
										799076
									],
									[
										799506,
										799511
									],
									[
										799873,
										799878
									],
									[
										799931,
										799936
									],
									[
										800506,
										800511
									],
									[
										800550,
										800555
									],
									[
										800604,
										800609
									],
									[
										801186,
										801191
									],
									[
										801303,
										801308
									],
									[
										801650,
										801655
									],
									[
										801874,
										801879
									],
									[
										802044,
										802049
									],
									[
										802076,
										802081
									],
									[
										802300,
										802305
									],
									[
										802720,
										802725
									],
									[
										803070,
										803075
									],
									[
										803128,
										803133
									],
									[
										803210,
										803215
									],
									[
										803269,
										803274
									],
									[
										803520,
										803525
									],
									[
										803572,
										803577
									],
									[
										803834,
										803839
									],
									[
										804008,
										804013
									],
									[
										804268,
										804273
									],
									[
										804443,
										804448
									],
									[
										804710,
										804715
									],
									[
										804878,
										804883
									],
									[
										805497,
										805502
									],
									[
										805681,
										805686
									],
									[
										806637,
										806642
									],
									[
										807264,
										807269
									],
									[
										807322,
										807327
									],
									[
										807449,
										807454
									],
									[
										807509,
										807514
									],
									[
										807556,
										807561
									],
									[
										807688,
										807693
									],
									[
										807907,
										807912
									],
									[
										807957,
										807962
									],
									[
										808001,
										808006
									],
									[
										808061,
										808066
									],
									[
										808148,
										808153
									],
									[
										808187,
										808192
									],
									[
										808301,
										808306
									],
									[
										808461,
										808466
									],
									[
										808482,
										808487
									],
									[
										808545,
										808550
									],
									[
										808707,
										808712
									],
									[
										808892,
										808897
									],
									[
										809132,
										809137
									],
									[
										809210,
										809215
									],
									[
										809365,
										809370
									],
									[
										809502,
										809507
									],
									[
										809637,
										809642
									],
									[
										809772,
										809777
									],
									[
										809905,
										809910
									],
									[
										810095,
										810100
									],
									[
										810184,
										810189
									],
									[
										810436,
										810441
									],
									[
										810515,
										810520
									],
									[
										810628,
										810633
									],
									[
										810710,
										810715
									],
									[
										810810,
										810815
									],
									[
										810861,
										810866
									],
									[
										810936,
										810941
									],
									[
										810965,
										810970
									],
									[
										811132,
										811137
									],
									[
										811457,
										811462
									],
									[
										811629,
										811634
									],
									[
										811708,
										811713
									],
									[
										811795,
										811800
									],
									[
										811914,
										811919
									],
									[
										812038,
										812043
									],
									[
										812331,
										812336
									],
									[
										812390,
										812395
									],
									[
										812518,
										812523
									],
									[
										812579,
										812584
									],
									[
										812627,
										812632
									],
									[
										812760,
										812765
									],
									[
										812909,
										812914
									],
									[
										812960,
										812965
									],
									[
										813005,
										813010
									],
									[
										813066,
										813071
									],
									[
										813154,
										813159
									],
									[
										813194,
										813199
									],
									[
										813309,
										813314
									],
									[
										813470,
										813475
									],
									[
										813492,
										813497
									],
									[
										813600,
										813605
									],
									[
										813675,
										813680
									],
									[
										813761,
										813766
									],
									[
										813841,
										813846
									],
									[
										813955,
										813960
									],
									[
										814038,
										814043
									],
									[
										814139,
										814144
									],
									[
										814191,
										814196
									],
									[
										814267,
										814272
									],
									[
										814297,
										814302
									],
									[
										814465,
										814470
									],
									[
										814791,
										814796
									],
									[
										815031,
										815036
									],
									[
										815119,
										815124
									],
									[
										815239,
										815244
									],
									[
										815364,
										815369
									],
									[
										815651,
										815656
									],
									[
										815703,
										815708
									],
									[
										815824,
										815829
									],
									[
										815878,
										815883
									],
									[
										815919,
										815924
									],
									[
										816045,
										816050
									],
									[
										816289,
										816294
									],
									[
										816336,
										816341
									],
									[
										816390,
										816395
									],
									[
										816450,
										816455
									],
									[
										816513,
										816518
									],
									[
										816574,
										816579
									],
									[
										816641,
										816646
									],
									[
										816708,
										816713
									],
									[
										816979,
										816984
									],
									[
										817048,
										817053
									],
									[
										817113,
										817118
									],
									[
										817182,
										817187
									],
									[
										817244,
										817249
									],
									[
										817307,
										817312
									],
									[
										817366,
										817371
									],
									[
										817424,
										817429
									],
									[
										817488,
										817493
									],
									[
										817552,
										817557
									],
									[
										817623,
										817628
									],
									[
										817695,
										817700
									],
									[
										817753,
										817758
									],
									[
										817813,
										817818
									],
									[
										817879,
										817884
									],
									[
										817945,
										817950
									],
									[
										818015,
										818020
									],
									[
										818083,
										818088
									],
									[
										818141,
										818146
									],
									[
										818208,
										818213
									],
									[
										818273,
										818278
									],
									[
										818347,
										818352
									],
									[
										818435,
										818440
									],
									[
										818479,
										818484
									],
									[
										818517,
										818522
									],
									[
										818571,
										818576
									],
									[
										818652,
										818657
									],
									[
										818685,
										818690
									],
									[
										818793,
										818798
									],
									[
										818947,
										818952
									],
									[
										818962,
										818967
									],
									[
										819019,
										819024
									],
									[
										819205,
										819210
									],
									[
										819240,
										819245
									],
									[
										819363,
										819368
									],
									[
										819402,
										819407
									],
									[
										819457,
										819462
									],
									[
										819496,
										819501
									],
									[
										819551,
										819556
									],
									[
										819590,
										819595
									],
									[
										819772,
										819777
									],
									[
										819812,
										819817
									],
									[
										819901,
										819906
									],
									[
										819942,
										819947
									],
									[
										819999,
										820004
									],
									[
										820040,
										820045
									],
									[
										820130,
										820135
									],
									[
										820172,
										820177
									],
									[
										820263,
										820268
									],
									[
										820306,
										820311
									],
									[
										820398,
										820403
									],
									[
										820442,
										820447
									],
									[
										820502,
										820507
									],
									[
										820546,
										820551
									],
									[
										820606,
										820611
									],
									[
										820650,
										820655
									],
									[
										820743,
										820748
									],
									[
										820788,
										820793
									],
									[
										820849,
										820854
									],
									[
										820894,
										820899
									],
									[
										820968,
										820973
									],
									[
										821013,
										821018
									],
									[
										821094,
										821099
									],
									[
										821140,
										821145
									],
									[
										821202,
										821207
									],
									[
										821248,
										821253
									],
									[
										821343,
										821348
									],
									[
										821390,
										821395
									],
									[
										821453,
										821458
									],
									[
										821500,
										821505
									],
									[
										821563,
										821568
									],
									[
										821610,
										821615
									],
									[
										821677,
										821682
									],
									[
										821724,
										821729
									],
									[
										821816,
										821821
									],
									[
										821864,
										821869
									],
									[
										821932,
										821937
									],
									[
										821980,
										821985
									],
									[
										822073,
										822078
									],
									[
										822122,
										822127
									],
									[
										822220,
										822225
									],
									[
										822270,
										822275
									],
									[
										822340,
										822345
									],
									[
										822390,
										822395
									],
									[
										822485,
										822490
									],
									[
										822536,
										822541
									],
									[
										822636,
										822641
									],
									[
										822688,
										822693
									],
									[
										822789,
										822794
									],
									[
										822842,
										822847
									],
									[
										822944,
										822949
									],
									[
										822999,
										823004
									],
									[
										823133,
										823138
									],
									[
										823345,
										823350
									],
									[
										823364,
										823369
									],
									[
										823523,
										823528
									],
									[
										823546,
										823551
									],
									[
										823637,
										823642
									],
									[
										823660,
										823665
									],
									[
										823751,
										823756
									],
									[
										823774,
										823779
									],
									[
										824012,
										824017
									],
									[
										824036,
										824041
									],
									[
										824161,
										824166
									],
									[
										824186,
										824191
									],
									[
										824279,
										824284
									],
									[
										824304,
										824309
									],
									[
										824430,
										824435
									],
									[
										824456,
										824461
									],
									[
										824583,
										824588
									],
									[
										824610,
										824615
									],
									[
										824738,
										824743
									],
									[
										824766,
										824771
									],
									[
										824862,
										824867
									],
									[
										824890,
										824895
									],
									[
										824986,
										824991
									],
									[
										825014,
										825019
									],
									[
										825143,
										825148
									],
									[
										825172,
										825177
									],
									[
										825269,
										825274
									],
									[
										825298,
										825303
									],
									[
										825408,
										825413
									],
									[
										825437,
										825442
									],
									[
										825554,
										825559
									],
									[
										825584,
										825589
									],
									[
										825682,
										825687
									],
									[
										825712,
										825717
									],
									[
										825843,
										825848
									],
									[
										825874,
										825879
									],
									[
										825973,
										825978
									],
									[
										826004,
										826009
									],
									[
										826103,
										826108
									],
									[
										826134,
										826139
									],
									[
										826237,
										826242
									],
									[
										826268,
										826273
									],
									[
										826396,
										826401
									],
									[
										826428,
										826433
									],
									[
										826532,
										826537
									],
									[
										826564,
										826569
									],
									[
										826693,
										826698
									],
									[
										826726,
										826731
									],
									[
										826860,
										826865
									],
									[
										826894,
										826899
									],
									[
										827000,
										827005
									],
									[
										827034,
										827039
									],
									[
										827165,
										827170
									],
									[
										827200,
										827205
									],
									[
										827336,
										827341
									],
									[
										827372,
										827377
									],
									[
										827509,
										827514
									],
									[
										827546,
										827551
									],
									[
										827684,
										827689
									],
									[
										827723,
										827728
									],
									[
										827901,
										827906
									],
									[
										827999,
										828004
									],
									[
										828093,
										828098
									],
									[
										828195,
										828200
									],
									[
										828288,
										828293
									],
									[
										828383,
										828388
									],
									[
										828469,
										828474
									],
									[
										828565,
										828570
									],
									[
										828663,
										828668
									],
									[
										828757,
										828762
									],
									[
										828851,
										828856
									],
									[
										828939,
										828944
									],
									[
										829025,
										829030
									],
									[
										829125,
										829130
									],
									[
										829224,
										829229
									],
									[
										829316,
										829321
									],
									[
										829408,
										829413
									],
									[
										829494,
										829499
									],
									[
										829581,
										829586
									],
									[
										829672,
										829677
									],
									[
										829762,
										829767
									],
									[
										829863,
										829868
									],
									[
										829956,
										829961
									],
									[
										830374,
										830379
									],
									[
										830468,
										830473
									],
									[
										830559,
										830564
									],
									[
										830650,
										830655
									],
									[
										830739,
										830744
									],
									[
										830830,
										830835
									],
									[
										830918,
										830923
									],
									[
										831013,
										831018
									],
									[
										831300,
										831305
									],
									[
										831372,
										831377
									],
									[
										831382,
										831387
									],
									[
										831421,
										831426
									],
									[
										831515,
										831520
									],
									[
										831525,
										831530
									],
									[
										831572,
										831577
									],
									[
										831674,
										831679
									],
									[
										831684,
										831689
									],
									[
										831722,
										831727
									],
									[
										831815,
										831820
									],
									[
										831825,
										831830
									],
									[
										831865,
										831870
									],
									[
										831960,
										831965
									],
									[
										831970,
										831975
									],
									[
										832001,
										832006
									],
									[
										832087,
										832092
									],
									[
										832097,
										832102
									],
									[
										832138,
										832143
									],
									[
										832234,
										832239
									],
									[
										832244,
										832249
									],
									[
										832287,
										832292
									],
									[
										832385,
										832390
									],
									[
										832395,
										832400
									],
									[
										832434,
										832439
									],
									[
										832528,
										832533
									],
									[
										832538,
										832543
									],
									[
										832577,
										832582
									],
									[
										832671,
										832676
									],
									[
										832681,
										832686
									],
									[
										832714,
										832719
									],
									[
										832802,
										832807
									],
									[
										832812,
										832817
									],
									[
										832843,
										832848
									],
									[
										832929,
										832934
									],
									[
										832939,
										832944
									],
									[
										832984,
										832989
									],
									[
										833084,
										833089
									],
									[
										833094,
										833099
									],
									[
										833138,
										833143
									],
									[
										833237,
										833242
									],
									[
										833247,
										833252
									],
									[
										833284,
										833289
									],
									[
										833376,
										833381
									],
									[
										833386,
										833391
									],
									[
										833423,
										833428
									],
									[
										833515,
										833520
									],
									[
										833525,
										833530
									],
									[
										833556,
										833561
									],
									[
										833642,
										833647
									],
									[
										833652,
										833657
									],
									[
										833684,
										833689
									],
									[
										833771,
										833776
									],
									[
										833781,
										833786
									],
									[
										833817,
										833822
									],
									[
										833908,
										833913
									],
									[
										833918,
										833923
									],
									[
										833953,
										833958
									],
									[
										834043,
										834048
									],
									[
										834053,
										834058
									],
									[
										834095,
										834100
									],
									[
										834192,
										834197
									],
									[
										834206,
										834211
									],
									[
										834248,
										834253
									],
									[
										834341,
										834346
									],
									[
										834351,
										834356
									],
									[
										834389,
										834394
									],
									[
										834482,
										834487
									],
									[
										834589,
										834594
									],
									[
										834696,
										834701
									],
									[
										834805,
										834810
									],
									[
										834910,
										834915
									],
									[
										835019,
										835024
									],
									[
										835146,
										835151
									],
									[
										835160,
										835165
									],
									[
										835199,
										835204
									],
									[
										835289,
										835294
									],
									[
										835303,
										835308
									],
									[
										835343,
										835348
									],
									[
										835434,
										835439
									],
									[
										835444,
										835449
									],
									[
										835480,
										835485
									],
									[
										835571,
										835576
									],
									[
										835581,
										835586
									],
									[
										835615,
										835620
									],
									[
										835704,
										835709
									],
									[
										835714,
										835719
									],
									[
										835750,
										835755
									],
									[
										835841,
										835846
									],
									[
										835851,
										835856
									],
									[
										835884,
										835889
									],
									[
										835972,
										835977
									],
									[
										835982,
										835987
									],
									[
										836009,
										836014
									],
									[
										836091,
										836096
									],
									[
										836114,
										836119
									],
									[
										836151,
										836156
									],
									[
										836230,
										836235
									],
									[
										836353,
										836358
									],
									[
										836521,
										836526
									],
									[
										836604,
										836609
									],
									[
										836655,
										836660
									],
									[
										836732,
										836737
									],
									[
										836817,
										836822
									],
									[
										836893,
										836898
									],
									[
										836971,
										836976
									],
									[
										837040,
										837045
									],
									[
										837119,
										837124
									],
									[
										837200,
										837205
									],
									[
										837277,
										837282
									],
									[
										837354,
										837359
									],
									[
										837425,
										837430
									],
									[
										837494,
										837499
									],
									[
										837577,
										837582
									],
									[
										837659,
										837664
									],
									[
										837734,
										837739
									],
									[
										837809,
										837814
									],
									[
										837878,
										837883
									],
									[
										837948,
										837953
									],
									[
										838022,
										838027
									],
									[
										838095,
										838100
									],
									[
										838179,
										838184
									],
									[
										838255,
										838260
									],
									[
										838588,
										838593
									],
									[
										838665,
										838670
									],
									[
										838739,
										838744
									],
									[
										838813,
										838818
									],
									[
										838885,
										838890
									],
									[
										838959,
										838964
									],
									[
										839030,
										839035
									],
									[
										839108,
										839113
									],
									[
										839343,
										839348
									],
									[
										839416,
										839421
									],
									[
										839523,
										839528
									],
									[
										839599,
										839604
									],
									[
										839693,
										839698
									],
									[
										839738,
										839743
									],
									[
										839807,
										839812
									],
									[
										839830,
										839835
									],
									[
										839991,
										839996
									],
									[
										840310,
										840315
									],
									[
										840476,
										840481
									],
									[
										840549,
										840554
									],
									[
										840630,
										840635
									],
									[
										840743,
										840748
									],
									[
										840861,
										840866
									],
									[
										841200,
										841205
									],
									[
										841258,
										841263
									],
									[
										841307,
										841312
									],
									[
										841708,
										841713
									],
									[
										841732,
										841737
									],
									[
										841766,
										841771
									],
									[
										842186,
										842191
									],
									[
										842290,
										842295
									],
									[
										842617,
										842622
									],
									[
										842838,
										842843
									],
									[
										842861,
										842866
									],
									[
										843206,
										843211
									],
									[
										843521,
										843526
									],
									[
										843839,
										843844
									],
									[
										843858,
										843863
									],
									[
										844220,
										844225
									],
									[
										844227,
										844232
									],
									[
										844495,
										844500
									],
									[
										844502,
										844507
									],
									[
										844731,
										844736
									],
									[
										844989,
										844994
									],
									[
										845144,
										845149
									],
									[
										845346,
										845351
									],
									[
										845588,
										845593
									],
									[
										845933,
										845938
									],
									[
										845963,
										845968
									],
									[
										846264,
										846269
									],
									[
										846281,
										846286
									],
									[
										846699,
										846704
									],
									[
										846723,
										846728
									],
									[
										847138,
										847143
									],
									[
										847150,
										847155
									],
									[
										847454,
										847459
									],
									[
										847466,
										847471
									],
									[
										847694,
										847699
									],
									[
										847967,
										847972
									],
									[
										848224,
										848229
									],
									[
										848274,
										848279
									],
									[
										848395,
										848400
									],
									[
										848449,
										848454
									],
									[
										848585,
										848590
									],
									[
										848638,
										848643
									],
									[
										848772,
										848777
									],
									[
										848825,
										848830
									],
									[
										848959,
										848964
									],
									[
										849012,
										849017
									],
									[
										849146,
										849151
									],
									[
										849199,
										849204
									],
									[
										849333,
										849338
									],
									[
										849386,
										849391
									],
									[
										849533,
										849538
									],
									[
										849596,
										849601
									],
									[
										849647,
										849652
									],
									[
										849692,
										849697
									],
									[
										849753,
										849758
									],
									[
										849841,
										849846
									],
									[
										849881,
										849886
									],
									[
										849996,
										850001
									],
									[
										850153,
										850158
									],
									[
										850200,
										850205
									],
									[
										850251,
										850256
									],
									[
										850300,
										850305
									],
									[
										850347,
										850352
									],
									[
										850400,
										850405
									],
									[
										850627,
										850632
									],
									[
										850686,
										850691
									],
									[
										850708,
										850713
									],
									[
										850769,
										850774
									],
									[
										850991,
										850996
									],
									[
										851065,
										851070
									],
									[
										851140,
										851145
									],
									[
										851246,
										851251
									],
									[
										851360,
										851365
									],
									[
										851470,
										851475
									],
									[
										851576,
										851581
									],
									[
										851752,
										851757
									],
									[
										851832,
										851837
									],
									[
										851904,
										851909
									],
									[
										851968,
										851973
									],
									[
										852040,
										852045
									],
									[
										852108,
										852113
									],
									[
										852172,
										852177
									],
									[
										852290,
										852295
									],
									[
										852373,
										852378
									],
									[
										852446,
										852451
									],
									[
										852511,
										852516
									],
									[
										852584,
										852589
									],
									[
										852653,
										852658
									],
									[
										852718,
										852723
									],
									[
										852823,
										852828
									],
									[
										852886,
										852891
									],
									[
										853081,
										853086
									],
									[
										853157,
										853162
									],
									[
										853187,
										853192
									],
									[
										853346,
										853351
									],
									[
										853579,
										853584
									],
									[
										853714,
										853719
									],
									[
										853806,
										853811
									],
									[
										853967,
										853972
									],
									[
										854055,
										854060
									],
									[
										854175,
										854180
									],
									[
										854300,
										854305
									],
									[
										854442,
										854447
									],
									[
										854622,
										854627
									],
									[
										854828,
										854833
									],
									[
										854978,
										854983
									],
									[
										855003,
										855008
									],
									[
										855147,
										855152
									],
									[
										855159,
										855164
									],
									[
										855418,
										855423
									],
									[
										855437,
										855442
									],
									[
										855693,
										855698
									],
									[
										855700,
										855705
									],
									[
										855903,
										855908
									],
									[
										855910,
										855915
									],
									[
										856027,
										856032
									],
									[
										856259,
										856264
									],
									[
										856622,
										856627
									],
									[
										856880,
										856885
									],
									[
										857160,
										857165
									],
									[
										857405,
										857410
									],
									[
										857418,
										857423
									],
									[
										857609,
										857614
									],
									[
										858195,
										858200
									],
									[
										858354,
										858359
									],
									[
										858937,
										858942
									],
									[
										859161,
										859166
									],
									[
										859800,
										859805
									],
									[
										860124,
										860129
									],
									[
										860768,
										860773
									],
									[
										861352,
										861357
									],
									[
										861983,
										861988
									],
									[
										862137,
										862142
									],
									[
										862323,
										862328
									],
									[
										862850,
										862855
									],
									[
										863408,
										863413
									],
									[
										863974,
										863979
									],
									[
										864440,
										864445
									],
									[
										864783,
										864788
									],
									[
										864802,
										864807
									],
									[
										865294,
										865299
									],
									[
										865752,
										865757
									],
									[
										865776,
										865781
									],
									[
										865820,
										865825
									],
									[
										866032,
										866037
									],
									[
										866362,
										866367
									],
									[
										866748,
										866753
									],
									[
										866919,
										866924
									],
									[
										867197,
										867202
									],
									[
										867423,
										867428
									],
									[
										867968,
										867973
									],
									[
										868073,
										868078
									],
									[
										868147,
										868152
									],
									[
										868767,
										868772
									],
									[
										869033,
										869038
									],
									[
										869260,
										869265
									],
									[
										869708,
										869713
									],
									[
										870057,
										870062
									],
									[
										870423,
										870428
									],
									[
										870684,
										870689
									],
									[
										871055,
										871060
									],
									[
										871070,
										871075
									],
									[
										871083,
										871088
									],
									[
										871307,
										871312
									],
									[
										871649,
										871654
									],
									[
										872011,
										872016
									],
									[
										872456,
										872461
									],
									[
										872918,
										872923
									],
									[
										873440,
										873445
									],
									[
										873724,
										873729
									],
									[
										873881,
										873886
									],
									[
										873994,
										873999
									],
									[
										874130,
										874135
									],
									[
										874531,
										874536
									],
									[
										874608,
										874613
									],
									[
										874757,
										874762
									],
									[
										874837,
										874842
									],
									[
										875180,
										875185
									],
									[
										875314,
										875319
									],
									[
										875340,
										875345
									],
									[
										875353,
										875358
									],
									[
										875490,
										875495
									],
									[
										875738,
										875743
									],
									[
										875789,
										875794
									],
									[
										876016,
										876021
									],
									[
										876424,
										876429
									],
									[
										876446,
										876451
									],
									[
										876646,
										876651
									],
									[
										876662,
										876667
									],
									[
										876720,
										876725
									],
									[
										876808,
										876813
									],
									[
										876864,
										876869
									],
									[
										876887,
										876892
									],
									[
										877044,
										877049
									],
									[
										877284,
										877289
									],
									[
										877305,
										877310
									],
									[
										877350,
										877355
									],
									[
										877387,
										877392
									],
									[
										877437,
										877442
									],
									[
										877482,
										877487
									],
									[
										877741,
										877746
									],
									[
										877959,
										877964
									],
									[
										878166,
										878171
									],
									[
										878215,
										878220
									],
									[
										878304,
										878309
									],
									[
										878328,
										878333
									],
									[
										878351,
										878356
									],
									[
										878515,
										878520
									],
									[
										878751,
										878756
									],
									[
										878785,
										878790
									],
									[
										878794,
										878799
									],
									[
										878868,
										878873
									],
									[
										878901,
										878906
									],
									[
										878957,
										878962
									],
									[
										878984,
										878989
									],
									[
										879351,
										879356
									],
									[
										879529,
										879534
									],
									[
										879563,
										879568
									],
									[
										879578,
										879583
									],
									[
										879596,
										879601
									],
									[
										879671,
										879676
									],
									[
										879754,
										879759
									],
									[
										879769,
										879774
									],
									[
										879867,
										879872
									],
									[
										879882,
										879887
									],
									[
										880028,
										880033
									],
									[
										880043,
										880048
									],
									[
										880225,
										880230
									],
									[
										880243,
										880248
									],
									[
										880296,
										880301
									],
									[
										880472,
										880477
									],
									[
										880587,
										880592
									],
									[
										880698,
										880703
									],
									[
										880714,
										880719
									],
									[
										880778,
										880783
									],
									[
										880903,
										880908
									],
									[
										880996,
										881001
									],
									[
										881195,
										881200
									],
									[
										881210,
										881215
									],
									[
										881350,
										881355
									],
									[
										881502,
										881507
									],
									[
										881517,
										881522
									],
									[
										881656,
										881661
									],
									[
										881672,
										881677
									],
									[
										881865,
										881870
									],
									[
										881881,
										881886
									],
									[
										881995,
										882000
									],
									[
										882019,
										882024
									],
									[
										882159,
										882164
									],
									[
										882174,
										882179
									],
									[
										882294,
										882299
									],
									[
										882310,
										882315
									],
									[
										882441,
										882446
									],
									[
										882457,
										882462
									],
									[
										882571,
										882576
									],
									[
										882595,
										882600
									],
									[
										882725,
										882730
									],
									[
										882741,
										882746
									],
									[
										882896,
										882901
									],
									[
										882911,
										882916
									],
									[
										883108,
										883113
									],
									[
										883196,
										883201
									],
									[
										883245,
										883250
									],
									[
										883314,
										883319
									],
									[
										883410,
										883415
									],
									[
										883515,
										883520
									],
									[
										883631,
										883636
									],
									[
										883737,
										883742
									],
									[
										883857,
										883862
									],
									[
										884129,
										884134
									],
									[
										884314,
										884319
									],
									[
										884327,
										884332
									],
									[
										884386,
										884391
									],
									[
										884522,
										884527
									],
									[
										884786,
										884791
									],
									[
										884893,
										884898
									],
									[
										884940,
										884945
									],
									[
										884953,
										884958
									],
									[
										884974,
										884979
									],
									[
										885048,
										885053
									],
									[
										885082,
										885087
									],
									[
										885128,
										885133
									],
									[
										885221,
										885226
									],
									[
										885301,
										885306
									],
									[
										885328,
										885333
									],
									[
										885429,
										885434
									],
									[
										885495,
										885500
									],
									[
										885511,
										885516
									],
									[
										885604,
										885609
									],
									[
										885662,
										885667
									],
									[
										885877,
										885882
									],
									[
										885905,
										885910
									],
									[
										885978,
										885983
									],
									[
										886033,
										886038
									],
									[
										886188,
										886193
									],
									[
										886340,
										886345
									],
									[
										886371,
										886376
									],
									[
										886457,
										886462
									],
									[
										886568,
										886573
									],
									[
										886696,
										886701
									],
									[
										886778,
										886783
									],
									[
										886931,
										886936
									],
									[
										887065,
										887070
									],
									[
										887238,
										887243
									],
									[
										887360,
										887365
									],
									[
										887442,
										887447
									],
									[
										887492,
										887497
									],
									[
										887561,
										887566
									],
									[
										887659,
										887664
									],
									[
										887731,
										887736
									],
									[
										887833,
										887838
									],
									[
										887904,
										887909
									],
									[
										888081,
										888086
									],
									[
										888175,
										888180
									],
									[
										888199,
										888204
									],
									[
										888212,
										888217
									],
									[
										888233,
										888238
									],
									[
										888390,
										888395
									],
									[
										888594,
										888599
									],
									[
										888865,
										888870
									],
									[
										889207,
										889212
									],
									[
										889472,
										889477
									],
									[
										889690,
										889695
									],
									[
										889896,
										889901
									],
									[
										890102,
										890107
									],
									[
										890376,
										890381
									],
									[
										890747,
										890752
									],
									[
										890962,
										890967
									],
									[
										891226,
										891231
									],
									[
										891402,
										891407
									],
									[
										891666,
										891671
									],
									[
										891690,
										891695
									],
									[
										891703,
										891708
									],
									[
										891757,
										891762
									],
									[
										891990,
										891995
									],
									[
										892014,
										892019
									],
									[
										892027,
										892032
									],
									[
										892048,
										892053
									],
									[
										892198,
										892203
									],
									[
										892403,
										892408
									],
									[
										892556,
										892561
									],
									[
										892748,
										892753
									],
									[
										892926,
										892931
									],
									[
										893166,
										893171
									],
									[
										893432,
										893437
									],
									[
										893700,
										893705
									],
									[
										893917,
										893922
									],
									[
										893950,
										893955
									],
									[
										893980,
										893985
									],
									[
										894016,
										894021
									],
									[
										894073,
										894078
									],
									[
										894098,
										894103
									],
									[
										894270,
										894275
									],
									[
										894531,
										894536
									],
									[
										894663,
										894668
									],
									[
										894899,
										894904
									],
									[
										895031,
										895036
									],
									[
										895309,
										895314
									],
									[
										895565,
										895570
									],
									[
										895776,
										895781
									],
									[
										895986,
										895991
									],
									[
										896080,
										896085
									],
									[
										896360,
										896365
									],
									[
										896578,
										896583
									],
									[
										896738,
										896743
									],
									[
										896789,
										896794
									],
									[
										896832,
										896837
									],
									[
										896879,
										896884
									],
									[
										896926,
										896931
									],
									[
										896975,
										896980
									],
									[
										897036,
										897041
									],
									[
										897085,
										897090
									],
									[
										897287,
										897292
									],
									[
										897405,
										897410
									],
									[
										897426,
										897431
									],
									[
										897470,
										897475
									],
									[
										897537,
										897542
									],
									[
										897649,
										897654
									],
									[
										897766,
										897771
									],
									[
										897882,
										897887
									],
									[
										898006,
										898011
									],
									[
										898127,
										898132
									],
									[
										898252,
										898257
									],
									[
										898379,
										898384
									],
									[
										898501,
										898506
									],
									[
										898641,
										898646
									],
									[
										898695,
										898700
									],
									[
										898846,
										898851
									],
									[
										898895,
										898900
									],
									[
										899035,
										899040
									],
									[
										899122,
										899127
									],
									[
										899142,
										899147
									],
									[
										899320,
										899325
									],
									[
										899427,
										899432
									],
									[
										899633,
										899638
									],
									[
										899833,
										899838
									],
									[
										899879,
										899884
									],
									[
										899902,
										899907
									],
									[
										899929,
										899934
									],
									[
										899957,
										899962
									],
									[
										899970,
										899975
									],
									[
										899991,
										899996
									],
									[
										900004,
										900009
									],
									[
										900058,
										900063
									],
									[
										900086,
										900091
									],
									[
										900099,
										900104
									],
									[
										900186,
										900191
									],
									[
										900296,
										900301
									],
									[
										900321,
										900326
									],
									[
										900399,
										900404
									],
									[
										900506,
										900511
									],
									[
										900672,
										900677
									],
									[
										900917,
										900922
									],
									[
										901047,
										901052
									],
									[
										901218,
										901223
									],
									[
										901370,
										901375
									],
									[
										901486,
										901491
									],
									[
										901523,
										901528
									],
									[
										901536,
										901541
									],
									[
										901550,
										901555
									],
									[
										901563,
										901568
									],
									[
										901627,
										901632
									],
									[
										901764,
										901769
									],
									[
										901889,
										901894
									],
									[
										902026,
										902031
									],
									[
										902196,
										902201
									],
									[
										902386,
										902391
									],
									[
										902416,
										902421
									],
									[
										902601,
										902606
									],
									[
										902610,
										902615
									],
									[
										902752,
										902757
									],
									[
										902874,
										902879
									],
									[
										902998,
										903003
									],
									[
										903132,
										903137
									],
									[
										903263,
										903268
									],
									[
										903391,
										903396
									],
									[
										903513,
										903518
									],
									[
										903722,
										903727
									],
									[
										903842,
										903847
									],
									[
										904039,
										904044
									],
									[
										904122,
										904127
									],
									[
										904134,
										904139
									],
									[
										904176,
										904181
									],
									[
										904292,
										904297
									],
									[
										904403,
										904408
									],
									[
										904588,
										904593
									],
									[
										904674,
										904679
									],
									[
										904793,
										904798
									],
									[
										904893,
										904898
									],
									[
										905075,
										905080
									],
									[
										905222,
										905227
									],
									[
										905231,
										905236
									],
									[
										905425,
										905430
									],
									[
										905604,
										905609
									],
									[
										905780,
										905785
									],
									[
										905962,
										905967
									],
									[
										906121,
										906126
									],
									[
										906283,
										906288
									],
									[
										906430,
										906435
									],
									[
										906455,
										906460
									],
									[
										906624,
										906629
									],
									[
										906754,
										906759
									],
									[
										906914,
										906919
									],
									[
										907093,
										907098
									],
									[
										907240,
										907245
									],
									[
										907447,
										907452
									],
									[
										907611,
										907616
									],
									[
										907649,
										907654
									],
									[
										907817,
										907822
									],
									[
										907826,
										907831
									],
									[
										907879,
										907884
									],
									[
										907940,
										907945
									],
									[
										908094,
										908099
									],
									[
										908383,
										908388
									],
									[
										908555,
										908560
									],
									[
										908803,
										908808
									],
									[
										908833,
										908838
									],
									[
										908999,
										909004
									],
									[
										909130,
										909135
									],
									[
										909211,
										909216
									],
									[
										909344,
										909349
									],
									[
										909497,
										909502
									],
									[
										909588,
										909593
									],
									[
										909748,
										909753
									],
									[
										909786,
										909791
									],
									[
										909961,
										909966
									],
									[
										909970,
										909975
									],
									[
										909982,
										909987
									],
									[
										910235,
										910240
									],
									[
										910352,
										910357
									],
									[
										910842,
										910847
									],
									[
										911058,
										911063
									],
									[
										911202,
										911207
									],
									[
										911313,
										911318
									],
									[
										911465,
										911470
									],
									[
										911623,
										911628
									],
									[
										911701,
										911706
									],
									[
										911911,
										911916
									],
									[
										912083,
										912088
									],
									[
										912092,
										912097
									],
									[
										912149,
										912154
									],
									[
										912191,
										912196
									],
									[
										912251,
										912256
									],
									[
										912310,
										912315
									],
									[
										912371,
										912376
									],
									[
										912554,
										912559
									],
									[
										912779,
										912784
									],
									[
										912956,
										912961
									],
									[
										912993,
										912998
									],
									[
										913270,
										913275
									],
									[
										913353,
										913358
									],
									[
										913406,
										913411
									],
									[
										913467,
										913472
									],
									[
										913640,
										913645
									],
									[
										913782,
										913787
									],
									[
										913889,
										913894
									],
									[
										914024,
										914029
									],
									[
										914083,
										914088
									],
									[
										914157,
										914162
									],
									[
										914293,
										914298
									],
									[
										914418,
										914423
									],
									[
										914511,
										914516
									],
									[
										914663,
										914668
									],
									[
										914703,
										914708
									],
									[
										914945,
										914950
									],
									[
										915032,
										915037
									],
									[
										915141,
										915146
									],
									[
										915241,
										915246
									],
									[
										915350,
										915355
									],
									[
										915384,
										915389
									],
									[
										915520,
										915525
									],
									[
										915629,
										915634
									],
									[
										915877,
										915882
									],
									[
										915995,
										916000
									],
									[
										916182,
										916187
									],
									[
										916407,
										916412
									],
									[
										916578,
										916583
									],
									[
										916648,
										916653
									],
									[
										916851,
										916856
									],
									[
										917026,
										917031
									],
									[
										917096,
										917101
									],
									[
										917299,
										917304
									],
									[
										917477,
										917482
									],
									[
										917627,
										917632
									],
									[
										917816,
										917821
									],
									[
										917987,
										917992
									],
									[
										918124,
										918129
									],
									[
										918337,
										918342
									],
									[
										918515,
										918520
									],
									[
										918549,
										918554
									],
									[
										918747,
										918752
									],
									[
										918756,
										918761
									],
									[
										918811,
										918816
									],
									[
										918820,
										918825
									],
									[
										918876,
										918881
									],
									[
										918885,
										918890
									],
									[
										919040,
										919045
									],
									[
										919230,
										919235
									],
									[
										919294,
										919299
									],
									[
										919440,
										919445
									],
									[
										919609,
										919614
									],
									[
										919643,
										919648
									],
									[
										919750,
										919755
									],
									[
										919759,
										919764
									],
									[
										919853,
										919858
									],
									[
										920053,
										920058
									],
									[
										920214,
										920219
									],
									[
										920343,
										920348
									],
									[
										920522,
										920527
									],
									[
										920528,
										920533
									],
									[
										920570,
										920575
									],
									[
										920579,
										920584
									],
									[
										920725,
										920730
									],
									[
										920861,
										920866
									],
									[
										921039,
										921044
									],
									[
										921166,
										921171
									],
									[
										921336,
										921341
									],
									[
										921474,
										921479
									],
									[
										921597,
										921602
									],
									[
										921876,
										921881
									],
									[
										922059,
										922064
									],
									[
										922186,
										922191
									],
									[
										922278,
										922283
									],
									[
										922399,
										922404
									],
									[
										922525,
										922530
									],
									[
										922866,
										922871
									],
									[
										923014,
										923019
									],
									[
										923181,
										923186
									],
									[
										923217,
										923222
									],
									[
										923365,
										923370
									],
									[
										923562,
										923567
									],
									[
										923789,
										923794
									],
									[
										923901,
										923906
									],
									[
										923910,
										923915
									],
									[
										924098,
										924103
									],
									[
										924287,
										924292
									],
									[
										924454,
										924459
									],
									[
										924577,
										924582
									],
									[
										924586,
										924591
									],
									[
										924760,
										924765
									],
									[
										924903,
										924908
									],
									[
										924968,
										924973
									],
									[
										925089,
										925094
									],
									[
										925365,
										925370
									],
									[
										925539,
										925544
									],
									[
										925761,
										925766
									],
									[
										925786,
										925791
									],
									[
										925923,
										925928
									],
									[
										925948,
										925953
									],
									[
										926094,
										926099
									],
									[
										926119,
										926124
									],
									[
										926252,
										926257
									],
									[
										926515,
										926520
									],
									[
										926547,
										926552
									],
									[
										926571,
										926576
									],
									[
										926826,
										926831
									],
									[
										926851,
										926856
									],
									[
										927058,
										927063
									],
									[
										927083,
										927088
									],
									[
										927266,
										927271
									],
									[
										927291,
										927296
									],
									[
										927450,
										927455
									],
									[
										927475,
										927480
									],
									[
										927711,
										927716
									],
									[
										927720,
										927725
									],
									[
										927732,
										927737
									],
									[
										927776,
										927781
									],
									[
										927818,
										927823
									],
									[
										927999,
										928004
									],
									[
										928101,
										928106
									],
									[
										928249,
										928254
									],
									[
										928471,
										928476
									],
									[
										928549,
										928554
									],
									[
										928603,
										928608
									],
									[
										928778,
										928783
									],
									[
										928884,
										928889
									],
									[
										928909,
										928914
									],
									[
										928987,
										928992
									],
									[
										929035,
										929040
									],
									[
										929060,
										929065
									],
									[
										929160,
										929165
									],
									[
										929330,
										929335
									],
									[
										929355,
										929360
									],
									[
										929456,
										929461
									],
									[
										929753,
										929758
									],
									[
										929785,
										929790
									],
									[
										930010,
										930015
									],
									[
										930164,
										930169
									],
									[
										930381,
										930386
									],
									[
										930516,
										930521
									],
									[
										930730,
										930735
									],
									[
										930755,
										930760
									],
									[
										930890,
										930895
									],
									[
										930940,
										930945
									],
									[
										930977,
										930982
									],
									[
										931006,
										931011
									],
									[
										931038,
										931043
									],
									[
										931057,
										931062
									],
									[
										931116,
										931121
									],
									[
										931200,
										931205
									],
									[
										931225,
										931230
									],
									[
										931280,
										931285
									],
									[
										931568,
										931573
									],
									[
										931738,
										931743
									],
									[
										931889,
										931894
									],
									[
										932048,
										932053
									],
									[
										932206,
										932211
									],
									[
										932342,
										932347
									],
									[
										932646,
										932651
									],
									[
										932675,
										932680
									],
									[
										932794,
										932799
									],
									[
										932965,
										932970
									],
									[
										933090,
										933095
									],
									[
										933115,
										933120
									],
									[
										933332,
										933337
									],
									[
										933510,
										933515
									],
									[
										933648,
										933653
									],
									[
										933674,
										933679
									],
									[
										933785,
										933790
									],
									[
										933811,
										933816
									],
									[
										934138,
										934143
									],
									[
										934278,
										934283
									],
									[
										934303,
										934308
									],
									[
										934348,
										934353
									],
									[
										934465,
										934470
									],
									[
										934490,
										934495
									],
									[
										934624,
										934629
									],
									[
										934649,
										934654
									],
									[
										934770,
										934775
									],
									[
										934795,
										934800
									],
									[
										934847,
										934852
									],
									[
										935032,
										935037
									],
									[
										935156,
										935161
									],
									[
										935371,
										935376
									],
									[
										935396,
										935401
									],
									[
										935552,
										935557
									],
									[
										935775,
										935780
									],
									[
										935800,
										935805
									],
									[
										935965,
										935970
									],
									[
										936263,
										936268
									],
									[
										936288,
										936293
									],
									[
										936456,
										936461
									],
									[
										936662,
										936667
									],
									[
										936687,
										936692
									],
									[
										936835,
										936840
									],
									[
										937076,
										937081
									],
									[
										937228,
										937233
									],
									[
										937436,
										937441
									],
									[
										937723,
										937728
									],
									[
										937748,
										937753
									],
									[
										937894,
										937899
									],
									[
										938044,
										938049
									],
									[
										938242,
										938247
									],
									[
										938367,
										938372
									],
									[
										938589,
										938594
									],
									[
										938600,
										938605
									],
									[
										938842,
										938847
									],
									[
										939127,
										939132
									],
									[
										939133,
										939138
									],
									[
										939256,
										939261
									],
									[
										939400,
										939405
									],
									[
										939597,
										939602
									],
									[
										939696,
										939701
									],
									[
										939721,
										939726
									],
									[
										939734,
										939739
									],
									[
										939768,
										939773
									],
									[
										939931,
										939936
									],
									[
										939950,
										939955
									],
									[
										939993,
										939998
									],
									[
										940035,
										940040
									],
									[
										940075,
										940080
									],
									[
										940209,
										940214
									],
									[
										940224,
										940229
									],
									[
										940278,
										940283
									],
									[
										940333,
										940338
									],
									[
										940440,
										940445
									],
									[
										940453,
										940458
									],
									[
										940476,
										940481
									],
									[
										940580,
										940585
									],
									[
										940597,
										940602
									],
									[
										940626,
										940631
									],
									[
										940670,
										940675
									],
									[
										940701,
										940706
									],
									[
										940744,
										940749
									],
									[
										940774,
										940779
									],
									[
										940815,
										940820
									],
									[
										940952,
										940957
									],
									[
										941003,
										941008
									],
									[
										941016,
										941021
									],
									[
										941042,
										941047
									],
									[
										941267,
										941272
									],
									[
										941335,
										941340
									],
									[
										941356,
										941361
									],
									[
										941400,
										941405
									],
									[
										941447,
										941452
									],
									[
										941527,
										941532
									],
									[
										941556,
										941561
									],
									[
										941610,
										941615
									],
									[
										941633,
										941638
									],
									[
										941644,
										941649
									],
									[
										941660,
										941665
									],
									[
										941731,
										941736
									],
									[
										941788,
										941793
									],
									[
										941814,
										941819
									],
									[
										941825,
										941830
									],
									[
										941844,
										941849
									],
									[
										941918,
										941923
									],
									[
										941974,
										941979
									],
									[
										941999,
										942004
									],
									[
										942010,
										942015
									],
									[
										942028,
										942033
									],
									[
										942101,
										942106
									],
									[
										942275,
										942280
									],
									[
										942402,
										942407
									],
									[
										942528,
										942533
									],
									[
										942575,
										942580
									],
									[
										942698,
										942703
									],
									[
										942741,
										942746
									],
									[
										943012,
										943017
									],
									[
										943036,
										943041
									],
									[
										943198,
										943203
									],
									[
										943292,
										943297
									],
									[
										943316,
										943321
									],
									[
										943329,
										943334
									],
									[
										943350,
										943355
									],
									[
										943445,
										943450
									],
									[
										943464,
										943469
									],
									[
										943611,
										943616
									],
									[
										943639,
										943644
									],
									[
										943652,
										943657
									],
									[
										943672,
										943677
									],
									[
										943784,
										943789
									],
									[
										943797,
										943802
									],
									[
										943926,
										943931
									],
									[
										943939,
										943944
									],
									[
										944024,
										944029
									],
									[
										944037,
										944042
									],
									[
										944170,
										944175
									],
									[
										944182,
										944187
									],
									[
										944414,
										944419
									],
									[
										944441,
										944446
									],
									[
										944562,
										944567
									],
									[
										944637,
										944642
									],
									[
										944647,
										944652
									],
									[
										944682,
										944687
									],
									[
										944733,
										944738
									],
									[
										944743,
										944748
									],
									[
										944895,
										944900
									],
									[
										944993,
										944998
									],
									[
										945084,
										945089
									],
									[
										945120,
										945125
									],
									[
										945192,
										945197
									],
									[
										945242,
										945247
									],
									[
										945343,
										945348
									],
									[
										945418,
										945423
									],
									[
										945471,
										945476
									],
									[
										945575,
										945580
									],
									[
										945649,
										945654
									],
									[
										945701,
										945706
									],
									[
										945949,
										945954
									],
									[
										946109,
										946114
									],
									[
										946139,
										946144
									],
									[
										946240,
										946245
									],
									[
										946271,
										946276
									],
									[
										946458,
										946463
									],
									[
										946652,
										946657
									],
									[
										946709,
										946714
									],
									[
										946795,
										946800
									],
									[
										946838,
										946843
									],
									[
										946931,
										946936
									],
									[
										947086,
										947091
									],
									[
										947118,
										947123
									],
									[
										947368,
										947373
									],
									[
										947609,
										947614
									],
									[
										947648,
										947653
									],
									[
										947731,
										947736
									],
									[
										947867,
										947872
									],
									[
										947880,
										947885
									],
									[
										947936,
										947941
									],
									[
										948033,
										948038
									],
									[
										948066,
										948071
									],
									[
										948243,
										948248
									],
									[
										948258,
										948263
									],
									[
										948300,
										948305
									],
									[
										948398,
										948403
									],
									[
										948469,
										948474
									],
									[
										948629,
										948634
									],
									[
										948660,
										948665
									],
									[
										948702,
										948707
									],
									[
										948902,
										948907
									],
									[
										949047,
										949052
									],
									[
										949168,
										949173
									],
									[
										949334,
										949339
									],
									[
										949722,
										949727
									],
									[
										950103,
										950108
									],
									[
										950356,
										950361
									],
									[
										950560,
										950565
									],
									[
										950770,
										950775
									],
									[
										950999,
										951004
									],
									[
										951212,
										951217
									],
									[
										951433,
										951438
									],
									[
										951558,
										951563
									],
									[
										951822,
										951827
									],
									[
										951947,
										951952
									],
									[
										952230,
										952235
									],
									[
										952355,
										952360
									],
									[
										952618,
										952623
									],
									[
										952743,
										952748
									],
									[
										953102,
										953107
									],
									[
										953438,
										953443
									],
									[
										953787,
										953792
									],
									[
										954048,
										954053
									],
									[
										954127,
										954132
									],
									[
										954167,
										954172
									],
									[
										954184,
										954189
									],
									[
										954489,
										954494
									],
									[
										954606,
										954611
									],
									[
										954809,
										954814
									],
									[
										954994,
										954999
									],
									[
										955185,
										955190
									],
									[
										955300,
										955305
									],
									[
										955462,
										955467
									],
									[
										955690,
										955695
									],
									[
										955968,
										955973
									],
									[
										956062,
										956067
									],
									[
										956105,
										956110
									],
									[
										956148,
										956153
									],
									[
										956277,
										956282
									],
									[
										956540,
										956545
									],
									[
										956818,
										956823
									],
									[
										956896,
										956901
									],
									[
										957096,
										957101
									],
									[
										957268,
										957273
									],
									[
										957429,
										957434
									],
									[
										957599,
										957604
									],
									[
										957634,
										957639
									],
									[
										957684,
										957689
									],
									[
										957720,
										957725
									],
									[
										957830,
										957835
									],
									[
										957900,
										957905
									],
									[
										957951,
										957956
									],
									[
										958024,
										958029
									],
									[
										958364,
										958369
									],
									[
										958385,
										958390
									],
									[
										958444,
										958449
									],
									[
										958470,
										958475
									],
									[
										958500,
										958505
									],
									[
										958640,
										958645
									],
									[
										958686,
										958691
									],
									[
										958706,
										958711
									],
									[
										958728,
										958733
									],
									[
										958747,
										958752
									],
									[
										958788,
										958793
									],
									[
										958837,
										958842
									],
									[
										958850,
										958855
									],
									[
										958895,
										958900
									],
									[
										958991,
										958996
									],
									[
										959001,
										959006
									],
									[
										959045,
										959050
									],
									[
										959068,
										959073
									],
									[
										959103,
										959108
									],
									[
										959130,
										959135
									],
									[
										959164,
										959169
									],
									[
										959201,
										959206
									],
									[
										959244,
										959249
									],
									[
										959261,
										959266
									],
									[
										959309,
										959314
									],
									[
										959355,
										959360
									],
									[
										959404,
										959409
									],
									[
										959465,
										959470
									],
									[
										959527,
										959532
									],
									[
										959585,
										959590
									],
									[
										959616,
										959621
									],
									[
										959698,
										959703
									],
									[
										959710,
										959715
									],
									[
										959780,
										959785
									],
									[
										959799,
										959804
									],
									[
										959841,
										959846
									],
									[
										959888,
										959893
									],
									[
										959914,
										959919
									],
									[
										959942,
										959947
									],
									[
										960031,
										960036
									],
									[
										960166,
										960171
									],
									[
										960190,
										960195
									],
									[
										960264,
										960269
									],
									[
										960293,
										960298
									],
									[
										960349,
										960354
									],
									[
										960523,
										960528
									],
									[
										960557,
										960562
									],
									[
										960605,
										960610
									],
									[
										960682,
										960687
									],
									[
										960736,
										960741
									],
									[
										960763,
										960768
									],
									[
										960909,
										960914
									],
									[
										960952,
										960957
									],
									[
										961007,
										961012
									],
									[
										961034,
										961039
									],
									[
										961219,
										961224
									],
									[
										961413,
										961418
									],
									[
										961432,
										961437
									],
									[
										961531,
										961536
									],
									[
										961558,
										961563
									],
									[
										961571,
										961576
									],
									[
										961591,
										961596
									],
									[
										961739,
										961744
									],
									[
										961752,
										961757
									],
									[
										961881,
										961886
									],
									[
										961894,
										961899
									],
									[
										961979,
										961984
									],
									[
										961992,
										961997
									],
									[
										962124,
										962129
									],
									[
										962136,
										962141
									],
									[
										962410,
										962415
									],
									[
										962423,
										962428
									],
									[
										962676,
										962681
									],
									[
										962689,
										962694
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								962546,
								962546
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 3,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 237106.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "source/PlayState.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12041,
						"regions":
						{
						},
						"selection":
						[
							[
								1387,
								1387
							]
						],
						"settings":
						{
							"haxe-build-id": 0,
							"syntax": "Packages/Haxe/Haxe.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 615.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "server/Main.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1545,
						"regions":
						{
						},
						"selection":
						[
							[
								394,
								394
							]
						],
						"settings":
						{
							"auto_name": "package ;",
							"haxe-build-id": 0,
							"syntax": "Packages/Haxe/Haxe.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 135.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "source/MenuState.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 858,
						"regions":
						{
						},
						"selection":
						[
							[
								310,
								310
							]
						],
						"settings":
						{
							"haxe-build-id": 0,
							"syntax": "Packages/Haxe/Haxe.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "assets/xml/menustate.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1313,
						"regions":
						{
						},
						"selection":
						[
							[
								513,
								513
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 108.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "Leaderships.sublime-project",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"projec",
				"Leaderships/Project.xml"
			],
			[
				"menus",
				"Leaderships/source/MenuState.hx"
			],
			[
				"menu s",
				"Leaderships/assets/xml/menustate.xml"
			],
			[
				"main",
				"Leaderships/source/Main.hx"
			],
			[
				"proj",
				"Leaderships/Project.xml"
			],
			[
				"menust",
				"Leaderships/assets/xml/menustate.xml"
			],
			[
				"proje",
				"Leaderships/Project.xml"
			],
			[
				"inter",
				"Leaderships/assets/data/interior.tmx"
			],
			[
				"deric record show",
				"app/views/dericci_records/show.html.erb"
			],
			[
				"name",
				"app/models/name.rb"
			],
			[
				"name name html",
				"app/views/names/_name.html.erb"
			],
			[
				"name place",
				"app/models/name_place.rb"
			],
			[
				"source",
				"app/models/source.rb"
			],
			[
				"source typ",
				"app/models/source_type.rb"
			],
			[
				"source age",
				"app/models/source_agent.rb"
			],
			[
				"sale",
				"app/models/sale.rb"
			],
			[
				"sale age",
				"app/models/sale_agent.rb"
			],
			[
				"prove",
				"app/models/provenance.rb"
			],
			[
				"place",
				"app/models/place.rb"
			],
			[
				"manu",
				"app/models/manuscript.rb"
			],
			[
				"langu",
				"app/models/language.rb"
			],
			[
				"entr us",
				"app/models/entry_use.rb"
			],
			[
				"entry tit",
				"app/models/entry_title.rb"
			],
			[
				"entry scrib",
				"app/models/entry_scribe.rb"
			],
			[
				"entry place",
				"app/models/entry_place.rb"
			],
			[
				"entry mat",
				"app/models/entry_material.rb"
			],
			[
				"entry manu",
				"app/models/entry_manuscript.rb"
			],
			[
				"entry lang",
				"app/models/entry_language.rb"
			],
			[
				"entry date",
				"app/models/entry_date.rb"
			],
			[
				"entry auth",
				"app/models/entry_author.rb"
			],
			[
				"entry art",
				"app/models/entry_artist.rb"
			],
			[
				"entry",
				"app/models/entry.rb"
			],
			[
				"dericci link",
				"app/models/dericci_link.rb"
			],
			[
				"dericc rec",
				"app/models/dericci_record.rb"
			],
			[
				"mapp",
				"mapping.ttl"
			],
			[
				"tell",
				"app/models/concerns/tell_bunny.rb"
			],
			[
				"tell b",
				"app/models/concerns/tell_bunny.rb"
			],
			[
				"interf",
				"interface/interface.rb"
			],
			[
				"sourc",
				"app/models/source.rb"
			],
			[
				"docker com",
				"docker-compose.yml"
			],
			[
				"appli",
				"config/application.rb"
			],
			[
				"tell bunn",
				"app/models/concerns/tell_bunny.rb"
			],
			[
				"world",
				"assets/data/world.tmx"
			],
			[
				"PROJ",
				"Project.xml"
			],
			[
				"pro",
				"Project.xml"
			],
			[
				"level",
				"assets/data/level0.tmx"
			],
			[
				"playst",
				"source/PlayState.hx"
			],
			[
				"menu",
				"source/MenuState.hx"
			],
			[
				"mai",
				"source/Main.hx"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 251.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
